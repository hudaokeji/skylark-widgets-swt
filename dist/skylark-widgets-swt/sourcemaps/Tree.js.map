{"version":3,"sources":["Tree.js"],"names":["define","skylark","langx","$","plugins","swt","Widget","Tree","inherit","klassName","pluginName","widgetClass","options","multiSelect","multiTier","nest","levels","selectors","children","classes","expandIcon","collapseIcon","item","injectStyle","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","colors","normal","undefined","normalBack","border","onhover","selected","selectedBack","searchResult","searchResultBack","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","search","ignoreCase","exactMatch","revealResults","noding","silent","ignoreChildren","templates","list","indent","icon","link","badge","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","css","_init","this","element","_elm","$element","elementId","id","styleId","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","buildStyleOverride","i","join","pop","href","text","tags","tag","color","backColor","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString"],"mappings":"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","file":"../Tree.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"./swt\",\r\n  \"./Widget\"  \r\n], function(skylark,langx,$,plugins,swt,Widget) {\r\n\r\n  /*global jQuery, console*/\r\n\r\n  'use strict';\r\n\r\n\r\n  var Tree =  swt.Tree = Widget.inherit({\r\n    klassName: \"Tree\",\r\n\r\n    pluginName : \"lark.tree\",\r\n\r\n    widgetClass : \"lark-tree\",\r\n\r\n    options : {\r\n      multiSelect: false,\r\n      //multiTier : false,\r\n      //levels: 2,\r\n\r\n      multiTier : {\r\n        nest   : true,\r\n      //  popup  : true,\r\n        levels : 2,\r\n        selectors :  {\r\n          children : \".list-group\"\r\n        },\r\n        classes : {\r\n          expandIcon: 'glyphicon glyphicon-plus',\r\n          collapseIcon: 'glyphicon glyphicon-minus',\r\n        },        \r\n      },\r\n\r\n      selectors : {\r\n        item : \".list-group-item\",\r\n        children : \".list-group\"\r\n      },\r\n\r\n      injectStyle: true,\r\n\r\n\r\n      emptyIcon: 'glyphicon',\r\n      nodeIcon: '',\r\n      selectedIcon: '',\r\n      checkedIcon: 'glyphicon glyphicon-check',\r\n      uncheckedIcon: 'glyphicon glyphicon-unchecked',\r\n\r\n\r\n      colors : {\r\n        normal: undefined, // '#000000',\r\n        normalBack: undefined, // '#FFFFFF',\r\n        border: undefined, // '#dddddd',\r\n        onhover: '#F5F5F5',\r\n        selected: '#FFFFFF',\r\n        selectedBack: '#428bca',\r\n        searchResult: '#D9534F',\r\n        searchResultBack: undefined //'#FFFFFF',\r\n      },\r\n\r\n\r\n      enableLinks: false,\r\n      highlightSelected: true,\r\n      highlightSearchResults: true,\r\n      showBorder: true,\r\n      showIcon: true,\r\n      showCheckbox: false,\r\n      showTags: false,\r\n\r\n      search : {\r\n        ignoreCase: true, \r\n        exactMatch: false,\r\n        revealResults: true    \r\n      },\r\n\r\n      noding : {\r\n        silent: false,\r\n        ignoreChildren: false\r\n      },\r\n\r\n\r\n      templates : {\r\n        list: '<ul class=\"list-group\"></ul>',\r\n        item: '<li class=\"list-group-item\"></li>',\r\n        indent: '<span class=\"indent\"></span>',\r\n        icon: '<span class=\"icon\"></span>',\r\n        link: '<a href=\"#\" style=\"color:inherit;\"></a>',\r\n        badge: '<span class=\"badge\"></span>'\r\n      },\r\n\r\n\r\n      // Event handlers\r\n      onNodeChecked: undefined,\r\n      onNodeCollapsed: undefined,\r\n      onNodeDisabled: undefined,\r\n      onNodeEnabled: undefined,\r\n      onNodeExpanded: undefined,\r\n      onNodeSelected: undefined,\r\n      onNodeUnchecked: undefined,\r\n      onNodeUnselected: undefined,\r\n      onSearchComplete: undefined,\r\n      onSearchCleared: undefined\r\n\r\n    },   \r\n\r\n\r\n    css : '.Tree .list-group-item{cursor:pointer}.Tree span.indent{margin-left:10px;margin-right:10px}.Tree span.icon{width:12px;margin-right:5px}.Tree .node-disabled{color:silver;cursor:not-allowed}' ,\r\n\r\n\r\n    _init : function () {\r\n\r\n      var options = this.options,\r\n          element = this._elm;\r\n\r\n      this.$element = $(element);\r\n      this.elementId = element.id;\r\n      this.styleId = this.elementId + '-style';\r\n\r\n\r\n      this.tree = [];\r\n      this.nodes = [];\r\n\r\n      if (options.data) {\r\n        if (typeof options.data === 'string') {\r\n          options.data = JSON.parse(options.data);\r\n        }\r\n        this.tree = langx.extend(true, [], options.data);\r\n      }\r\n\r\n      this.destroy();\r\n      this.subscribeEvents();\r\n      this.setInitialStates({ nodes: this.tree }, 0);\r\n      this.render();\r\n    },\r\n\r\n    remove : function () {\r\n      this.destroy();\r\n      datax.removeData(this, this.pluginName);\r\n      $('#' + this.styleId).remove();\r\n    },\r\n\r\n    destroy : function () {\r\n\r\n      if (!this.initialized) return;\r\n\r\n      this.$wrapper.remove();\r\n      this.$wrapper = null;\r\n\r\n      // Switch off events\r\n      this.unsubscribeEvents();\r\n\r\n      // Reset this.initialized flag\r\n      this.initialized = false;\r\n    },\r\n\r\n    unsubscribeEvents : function () {\r\n\r\n      this.$element.off('click');\r\n      this.$element.off('nodeChecked');\r\n      this.$element.off('nodeCollapsed');\r\n      this.$element.off('nodeDisabled');\r\n      this.$element.off('nodeEnabled');\r\n      this.$element.off('nodeExpanded');\r\n      this.$element.off('nodeSelected');\r\n      this.$element.off('nodeUnchecked');\r\n      this.$element.off('nodeUnselected');\r\n      this.$element.off('searchComplete');\r\n      this.$element.off('searchCleared');\r\n    },\r\n\r\n    subscribeEvents : function () {\r\n\r\n      this.unsubscribeEvents();\r\n\r\n      this.$element.on('click', langx.proxy(this.clickHandler, this));\r\n\r\n      if (typeof (this.options.onNodeChecked) === 'function') {\r\n        this.$element.on('nodeChecked', this.options.onNodeChecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeCollapsed) === 'function') {\r\n        this.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeDisabled) === 'function') {\r\n        this.$element.on('nodeDisabled', this.options.onNodeDisabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeEnabled) === 'function') {\r\n        this.$element.on('nodeEnabled', this.options.onNodeEnabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeExpanded) === 'function') {\r\n        this.$element.on('nodeExpanded', this.options.onNodeExpanded);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeSelected) === 'function') {\r\n        this.$element.on('nodeSelected', this.options.onNodeSelected);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnchecked) === 'function') {\r\n        this.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnselected) === 'function') {\r\n        this.$element.on('nodeUnselected', this.options.onNodeUnselected);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchComplete) === 'function') {\r\n        this.$element.on('searchComplete', this.options.onSearchComplete);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchCleared) === 'function') {\r\n        this.$element.on('searchCleared', this.options.onSearchCleared);\r\n      }\r\n    },\r\n\r\n    /*\r\n      Recurse the tree structure and ensure all nodes have\r\n      valid initial states.  User defined states will be preserved.\r\n      For performance we also take this opportunity to\r\n      index nodes in a flattened structure\r\n    */\r\n    setInitialStates : function (node, level) {\r\n\r\n      if (!node.nodes) return;\r\n      level += 1;\r\n\r\n      var parent = node;\r\n      var _this = this;\r\n      langx.each(node.nodes, function checkStates(index, node) {\r\n\r\n        // nodeId : unique, incremental identifier\r\n        node.nodeId = _this.nodes.length;\r\n\r\n        // parentId : transversing up the tree\r\n        node.parentId = parent.nodeId;\r\n\r\n        // if not provided set selectable default value\r\n        if (!node.hasOwnProperty('selectable')) {\r\n          node.selectable = true;\r\n        }\r\n\r\n        // where provided we should preserve states\r\n        node.state = node.state || {};\r\n\r\n        // set checked state; unless set always false\r\n        if (!node.state.hasOwnProperty('checked')) {\r\n          node.state.checked = false;\r\n        }\r\n\r\n        // set enabled state; unless set always false\r\n        if (!node.state.hasOwnProperty('disabled')) {\r\n          node.state.disabled = false;\r\n        }\r\n\r\n        // set expanded state; if not provided based on levels\r\n        if (!node.state.hasOwnProperty('expanded')) {\r\n          if (!node.state.disabled &&\r\n              (level < _this.options.multiTier.levels) &&\r\n              (node.nodes && node.nodes.length > 0)) {\r\n            node.state.expanded = true;\r\n          }\r\n          else {\r\n            node.state.expanded = false;\r\n          }\r\n        }\r\n\r\n        // set selected state; unless set always false\r\n        if (!node.state.hasOwnProperty('selected')) {\r\n          node.state.selected = false;\r\n        }\r\n\r\n        // index nodes in a flattened structure for use later\r\n        _this.nodes.push(node);\r\n\r\n        // recurse child nodes and transverse the tree\r\n        if (node.nodes) {\r\n          _this.setInitialStates(node, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    clickHandler : function (event) {\r\n\r\n      if (!this.options.enableLinks) event.preventDefault();\r\n\r\n      var target = $(event.target);\r\n      var node = this.findNode(target);\r\n      if (!node || node.state.disabled) return;\r\n      \r\n      var classList = target.attr('class') ? target.attr('class').split(' ') : [];\r\n      if ((classList.indexOf('expand-icon') !== -1)) {\r\n\r\n        this.toggleExpandedState(node,this.options.noding);\r\n        this.render();\r\n      }\r\n      else if ((classList.indexOf('check-icon') !== -1)) {\r\n        \r\n        this.toggleCheckedState(node,this.options.noding);\r\n        this.render();\r\n      }\r\n      else {\r\n        \r\n        if (node.selectable) {\r\n          this.toggleSelectedState(node,this.options.noding);\r\n        } else {\r\n          this.toggleExpandedState(node,this.options.noding);\r\n        }\r\n\r\n        this.render();\r\n      }\r\n    },\r\n\r\n    // Looks up the DOM for the closest parent list item to retrieve the\r\n    // data attribute nodeid, which is used to lookup the node in the flattened structure.\r\n    findNode : function (target) {\r\n\r\n      //var nodeId = target.closest('li.list-group-item').attr('data-nodeid');\r\n      var nodeId = target.closest(this.options.selectors.item).attr('data-nodeid');\r\n      var node = this.nodes[nodeId];\r\n\r\n      if (!node) {\r\n        console.log('Error: node does not exist');\r\n      }\r\n      return node;\r\n    },\r\n\r\n    toggleExpandedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setExpandedState(node, !node.state.expanded, options);\r\n    },\r\n\r\n    setExpandedState : function (node, state, options) {\r\n\r\n      if (state === node.state.expanded) return;\r\n\r\n      if (state && node.nodes) {\r\n\r\n        // Expand a node\r\n        node.state.expanded = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else if (!state) {\r\n\r\n        // Collapse a node\r\n        node.state.expanded = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\r\n        }\r\n\r\n        // Collapse child nodes\r\n        if (node.nodes && !options.ignoreChildren) {\r\n          langx.each(node.nodes, langx.proxy(function (index, node) {\r\n            this.setExpandedState(node, false, options);\r\n          }, this));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleSelectedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setSelectedState(node, !node.state.selected, options);\r\n    },\r\n\r\n    setSelectedState : function (node, state, options) {\r\n\r\n      if (state === node.state.selected) return;\r\n\r\n      if (state) {\r\n\r\n        // If multiSelect false, unselect previously selected\r\n        if (!this.options.multiSelect) {\r\n          langx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\r\n            this.setSelectedState(node, false, options);\r\n          }, this));\r\n        }\r\n\r\n        // Continue selecting node\r\n        node.state.selected = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeSelected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Unselect node\r\n        node.state.selected = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleCheckedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setCheckedState(node, !node.state.checked, options);\r\n    },\r\n\r\n    setCheckedState : function (node, state, options) {\r\n\r\n      if (state === node.state.checked) return;\r\n\r\n      if (state) {\r\n\r\n        // Check node\r\n        node.state.checked = true;\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeChecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Uncheck node\r\n        node.state.checked = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    setDisabledState : function (node, state, options) {\r\n\r\n      if (state === node.state.disabled) return;\r\n\r\n      if (state) {\r\n\r\n        // Disable node\r\n        node.state.disabled = true;\r\n\r\n        // Disable all other states\r\n        this.setExpandedState(node, false, options);\r\n        this.setSelectedState(node, false, options);\r\n        this.setCheckedState(node, false, options);\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Enabled node\r\n        node.state.disabled = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    render : function () {\r\n\r\n      if (!this.initialized) {\r\n\r\n        // Setup first time only components\r\n        this.$element.addClass(this.widgetClass);\r\n        this.$wrapper = $(this.options.templates.list);\r\n\r\n        this.injectStyle();\r\n\r\n        this.initialized = true;\r\n      }\r\n\r\n      this.$element.empty().append(this.$wrapper.empty());\r\n\r\n      // Build tree\r\n      this.buildTree(this.tree, 0);\r\n    },\r\n\r\n    // Starting from the root node, and recursing down the\r\n    // structure we build the tree one node at a time\r\n    buildTree : function (nodes, level) {\r\n\r\n      if (!nodes) return;\r\n      level += 1;\r\n\r\n      var _this = this;\r\n      langx.each(nodes, function addNodes(id, node) {\r\n\r\n        var treeItem = $(_this.options.templates.item)\r\n          .addClass('node-' + _this.elementId)\r\n          .addClass(node.state.checked ? 'node-checked' : '')\r\n          .addClass(node.state.disabled ? 'node-disabled': '')\r\n          .addClass(node.state.selected ? 'node-selected' : '')\r\n          .addClass(node.searchResult ? 'search-result' : '') \r\n          .attr('data-nodeid', node.nodeId)\r\n          .attr('style', _this.buildStyleOverride(node));\r\n\r\n        // Add indent/spacer to mimic tree structure\r\n        for (var i = 0; i < (level - 1); i++) {\r\n          treeItem.append(_this.options.templates.indent);\r\n        }\r\n\r\n        // Add expand, collapse or empty spacer icons\r\n        var classList = [];\r\n        if (node.nodes) {\r\n          classList.push('expand-icon');\r\n          if (node.state.expanded) {\r\n            classList.push(_this.options.multiTier.classes.collapseIcon);\r\n          }\r\n          else {\r\n            classList.push(_this.options.multiTier.classes.expandIcon);\r\n          }\r\n        }\r\n        else {\r\n          classList.push(_this.options.emptyIcon);\r\n        }\r\n\r\n        treeItem\r\n          .append($(_this.options.templates.icon)\r\n            .addClass(classList.join(' '))\r\n          );\r\n\r\n\r\n        // Add node icon\r\n        if (_this.options.showIcon) {\r\n          \r\n          var classList = ['node-icon'];\r\n\r\n          classList.push(node.icon || _this.options.nodeIcon);\r\n          if (node.state.selected) {\r\n            classList.pop();\r\n            classList.push(node.selectedIcon || _this.options.selectedIcon || \r\n                    node.icon || _this.options.nodeIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.options.templates.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add check / unchecked icon\r\n        if (_this.options.showCheckbox) {\r\n\r\n          var classList = ['check-icon'];\r\n          if (node.state.checked) {\r\n            classList.push(_this.options.checkedIcon); \r\n          }\r\n          else {\r\n            classList.push(_this.options.uncheckedIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.options.templates.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add text\r\n        if (_this.options.enableLinks) {\r\n          // Add hyperlink\r\n          treeItem\r\n            .append($(_this.options.templates.link)\r\n              .attr('href', node.href)\r\n              .append(node.text)\r\n            );\r\n        }\r\n        else {\r\n          // otherwise just text\r\n          treeItem\r\n            .append(node.text);\r\n        }\r\n\r\n        // Add tags as badges\r\n        if (_this.options.showTags && node.tags) {\r\n          langx.each(node.tags, function addTag(id, tag) {\r\n            treeItem\r\n              .append($(_this.options.templates.badge)\r\n                .append(tag)\r\n              );\r\n          });\r\n        }\r\n\r\n        // Add item to the tree\r\n        _this.$wrapper.append(treeItem);\r\n\r\n        // Recursively add child ndoes\r\n        if (node.nodes && node.state.expanded && !node.state.disabled) {\r\n          return _this.buildTree(node.nodes, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    // Define any node level style override for\r\n    // 1. selectedNode\r\n    // 2. node|data assigned color overrides\r\n    buildStyleOverride : function (node) {\r\n\r\n      if (node.state.disabled) return '';\r\n\r\n      var color = node.color;\r\n      var backColor = node.backColor;\r\n\r\n      if (this.options.highlightSelected && node.state.selected) {\r\n        if (this.options.colors.selected) {\r\n          color = this.options.colors.selected;\r\n        }\r\n        if (this.options.colors.selectedBack) {\r\n          backColor = this.options.colors.selectedBack;\r\n        }\r\n      }\r\n\r\n      if (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\r\n        if (this.options.colors.searchResult) {\r\n          color = this.options.colors.searchResult;\r\n        }\r\n        if (this.options.colors.searchResultBack) {\r\n          backColor = this.options.colors.searchResultBack;\r\n        }\r\n      }\r\n\r\n      return 'color:' + color +\r\n        ';background-color:' + backColor + ';';\r\n    },\r\n\r\n    // Add inline style into head\r\n    injectStyle : function () {\r\n\r\n      if (this.options.injectStyle && !document.getElementById(this.styleId)) {\r\n        $('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\r\n      }\r\n    },\r\n\r\n    // Construct trees style based on user options\r\n    buildStyle : function () {\r\n\r\n      var style = '.node-' + this.elementId + '{';\r\n\r\n      if (this.options.colors.normal) {\r\n        style += 'color:' + this.options.colors.normal + ';';\r\n      }\r\n\r\n      if (this.options.colors.normalBack) {\r\n        style += 'background-color:' + this.options.colors.normalBack + ';';\r\n      }\r\n\r\n      if (!this.options.showBorder) {\r\n        style += 'border:none;';\r\n      }\r\n      else if (this.options.colors.border) {\r\n        style += 'border:1px solid ' + this.options.colors.border + ';';\r\n      }\r\n      style += '}';\r\n\r\n      if (this.options.colors.onhover) {\r\n        style += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\r\n          'background-color:' + this.options.colors.onhover + ';' +\r\n        '}';\r\n      }\r\n\r\n      return this.css + style;\r\n    },\r\n\r\n    /**\r\n      Returns a single node object that matches the given node id.\r\n      @param {Number} nodeId - A node's unique identifier\r\n      @return {Object} node - Matching node\r\n    */\r\n    getNode : function (nodeId) {\r\n      return this.nodes[nodeId];\r\n    },\r\n\r\n    /**\r\n      Returns the parent node of a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Object} node - The parent node\r\n    */\r\n    getParent : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      return this.nodes[node.parentId];\r\n    },\r\n\r\n    /**\r\n      Returns an array of sibling nodes for a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Array} nodes - Sibling nodes\r\n    */\r\n    getSiblings : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      var parent = this.getParent(node);\r\n      var nodes = parent ? parent.nodes : this.tree;\r\n      return nodes.filter(function (obj) {\r\n          return obj.nodeId !== node.nodeId;\r\n        });\r\n    },\r\n\r\n    /**\r\n      Returns an array of selected nodes.\r\n      @returns {Array} nodes - Selected nodes\r\n    */\r\n    getSelected : function () {\r\n      return this.findNodes('true', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unselected nodes.\r\n      @returns {Array} nodes - Unselected nodes\r\n    */\r\n    getUnselected : function () {\r\n      return this.findNodes('false', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of expanded nodes.\r\n      @returns {Array} nodes - Expanded nodes\r\n    */\r\n    getExpanded : function () {\r\n      return this.findNodes('true', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of collapsed nodes.\r\n      @returns {Array} nodes - Collapsed nodes\r\n    */\r\n    getCollapsed : function () {\r\n      return this.findNodes('false', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of checked nodes.\r\n      @returns {Array} nodes - Checked nodes\r\n    */\r\n    getChecked : function () {\r\n      return this.findNodes('true', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unchecked nodes.\r\n      @returns {Array} nodes - Unchecked nodes\r\n    */\r\n    getUnchecked : function () {\r\n      return this.findNodes('false', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of disabled nodes.\r\n      @returns {Array} nodes - Disabled nodes\r\n    */\r\n    getDisabled : function () {\r\n      return this.findNodes('true', 'g', 'state.disabled');\r\n    },\r\n\r\n    /**\r\n      Returns an array of enabled nodes.\r\n      @returns {Array} nodes - Enabled nodes\r\n    */\r\n    getEnabled : function () {\r\n      return this.findNodes('false', 'g', 'state.disabled');\r\n    },\r\n\r\n\r\n    /**\r\n      Set a node state to selected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    selectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Set a node state to unselected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    unselectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a node selected state; selecting if unselected, unselecting if selected.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeSelected : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleSelectedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Collapse all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    collapseAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.expanded');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Collapse a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    collapseNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    expandAll : function (options) {\r\n      options = langx.extend({},this.options.noding, options);\r\n\r\n      if (options && options.levels) {\r\n        this.expandLevels(this.tree, options.levels, options);\r\n      }\r\n      else {\r\n        var identifiers = this.findNodes('false', 'g', 'state.expanded');\r\n        this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n          this.setExpandedState(node, true, options);\r\n        }, this));\r\n      }\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    expandNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, true, options);\r\n        if (node.nodes && (options && options.levels)) {\r\n          this.expandLevels(node.nodes, options.levels-1, options);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    expandLevels : function (nodes, level, options) {\r\n      options = langx.extend({},this.options.noding, options);\r\n\r\n      langx.each(nodes, langx.proxy(function (index, node) {\r\n        this.setExpandedState(node, (level > 0) ? true : false, options);\r\n        if (node.nodes) {\r\n          this.expandLevels(node.nodes, level-1, options);\r\n        }\r\n      }, this));\r\n    },\r\n\r\n    /**\r\n      Reveals a given tree node, expanding the tree from node to root.\r\n      @param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    revealNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        var parentNode = this.getParent(node);\r\n        while (parentNode) {\r\n          this.setExpandedState(parentNode, true, options);\r\n          parentNode = this.getParent(parentNode);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeExpanded : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleExpandedState(node, options);\r\n      }, this));\r\n      \r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Check all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    checkAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Check a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    checkNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    uncheckAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    uncheckNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes checked state; checking if unchecked, unchecking if checked.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeChecked : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleCheckedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Disable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    disableAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Disable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    disableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    enableAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    enableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes disabled state; disabling is enabled, enabling if disabled.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeDisabled : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, !node.state.disabled, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Common code for processing multiple identifiers\r\n    */\r\n    forEachIdentifier : function (identifiers, options, callback) {\r\n\r\n      options = langx.extend({},this.options.noding, options);\r\n\r\n      if (!(identifiers instanceof Array)) {\r\n        identifiers = [identifiers];\r\n      }\r\n\r\n      langx.each(identifiers, langx.proxy(function (index, identifier) {\r\n        callback(this.identifyNode(identifier), options);\r\n      }, this));  \r\n    },\r\n\r\n    /*\r\n      Identifies a node from either a node id or object\r\n    */\r\n    identifyNode : function (identifier) {\r\n      return ((typeof identifier) === 'number') ?\r\n              this.nodes[identifier] :\r\n              identifier;\r\n    },\r\n\r\n    /**\r\n      Searches the tree for nodes (text) that match given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional Object} options - Search criteria options\r\n      @return {Array} nodes - Matching nodes\r\n    */\r\n    search : function (pattern, options) {\r\n      options = langx.extend({},this.options.search, options);\r\n\r\n      this.clearSearch({ render: false });\r\n\r\n      var results = [];\r\n      if (pattern && pattern.length > 0) {\r\n\r\n        if (options.exactMatch) {\r\n          pattern = '^' + pattern + '$';\r\n        }\r\n\r\n        var modifier = 'g';\r\n        if (options.ignoreCase) {\r\n          modifier += 'i';\r\n        }\r\n\r\n        results = this.findNodes(pattern, modifier);\r\n\r\n        // Add searchResult property to all matching nodes\r\n        // This will be used to apply custom styles\r\n        // and when identifying result to be cleared\r\n        langx.each(results, function (index, node) {\r\n          node.searchResult = true;\r\n        })\r\n      }\r\n\r\n      // If revealResults, then render is triggered from revealNode\r\n      // otherwise we just call render.\r\n      if (options.revealResults) {\r\n        this.revealNode(results);\r\n      }\r\n      else {\r\n        this.render();\r\n      }\r\n\r\n      this.$element.trigger('searchComplete', langx.extend(true, {}, results));\r\n\r\n      return results;\r\n    },\r\n\r\n    /**\r\n      Clears previous search results\r\n    */\r\n    clearSearch : function (options) {\r\n\r\n      options = langx.extend({}, { render: true }, options);\r\n\r\n      var results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\r\n        node.searchResult = false;\r\n      });\r\n\r\n      if (options.render) {\r\n        this.render();  \r\n      }\r\n      \r\n      this.$element.trigger('searchCleared', langx.extend(true, {}, results));\r\n    },\r\n\r\n    /**\r\n      Find nodes that match a given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional String} modifier - Valid RegEx modifiers\r\n      @param {optional String} attribute - Attribute to compare pattern against\r\n      @return {Array} nodes - Nodes that match your criteria\r\n    */\r\n    findNodes : function (pattern, modifier, attribute) {\r\n\r\n      modifier = modifier || 'g';\r\n      attribute = attribute || 'text';\r\n\r\n      var _this = this;\r\n      return langx.grep(this.nodes, function (node) {\r\n        var val = _this.getNodeValue(node, attribute);\r\n        if (typeof val === 'string') {\r\n          return val.match(new RegExp(pattern, modifier));\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n      Recursive find for retrieving nested attributes values\r\n      All values are return as strings, unless invalid\r\n      @param {Object} obj - Typically a node, could be any object\r\n      @param {String} attr - Identifies an object property using dot notation\r\n      @return {String} value - Matching attributes string representation\r\n    */\r\n    getNodeValue : function (obj, attr) {\r\n      var index = attr.indexOf('.');\r\n      if (index > 0) {\r\n        var _obj = obj[attr.substring(0, index)];\r\n        var _attr = attr.substring(index + 1, attr.length);\r\n        return this.getNodeValue(_obj, _attr);\r\n      }\r\n      else {\r\n        if (obj.hasOwnProperty(attr)) {\r\n          return obj[attr].toString();\r\n        }\r\n        else {\r\n          return undefined;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return Tree;\r\n});"]}
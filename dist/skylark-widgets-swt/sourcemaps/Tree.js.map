{"version":3,"sources":["Tree.js"],"names":["define","skylark","langx","$","plugins","swt","Widget","_default","settings","injectStyle","levels","expandIcon","collapseIcon","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","color","undefined","backColor","borderColor","onhoverColor","selectedColor","selectedBackColor","searchResultColor","searchResultBackColor","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","multiSelect","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","options","silent","ignoreChildren","searchOptions","ignoreCase","exactMatch","revealResults","Tree","inherit","klassName","pluginName","widgetClass","template","list","item","indent","icon","link","badge","css","_construct","element","this","$element","elementId","id","styleId","_init","tree","nodes","data","JSON","parse","extend","destroy","subscribeEvents","setInitialStates","render","remove","datax","removeData","initialized","$wrapper","unsubscribeEvents","off","on","proxy","clickHandler","node","level","parent","_this","each","index","nodeId","length","parentId","hasOwnProperty","selectable","state","checked","disabled","expanded","selected","push","event","preventDefault","target","findNode","classList","attr","split","indexOf","toggleExpandedState","toggleCheckedState","toggleSelectedState","closest","console","log","setExpandedState","trigger","setSelectedState","findNodes","setCheckedState","setDisabledState","addClass","empty","append","buildTree","treeItem","searchResult","buildStyleOverride","i","join","pop","href","text","tags","tag","document","getElementById","buildStyle","appendTo","style","getNode","getParent","identifier","identifyNode","getSiblings","filter","obj","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseAll","collapseNode","expandAll","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","callback","Array","search","pattern","clearSearch","results","modifier","attribute","grep","val","getNodeValue","match","RegExp","_obj","substring","_attr","toString"],"mappings":"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","file":"../Tree.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"./swt\",\r\n  \"./Widget\"  \r\n], function(skylark,langx,$,plugins,swt,Widget) {\r\n\r\n  /*global jQuery, console*/\r\n\r\n  'use strict';\r\n\r\n\r\n  var _default = {};\r\n\r\n  _default.settings = {\r\n\r\n    injectStyle: true,\r\n\r\n    levels: 2,\r\n\r\n    expandIcon: 'glyphicon glyphicon-plus',\r\n    collapseIcon: 'glyphicon glyphicon-minus',\r\n    emptyIcon: 'glyphicon',\r\n    nodeIcon: '',\r\n    selectedIcon: '',\r\n    checkedIcon: 'glyphicon glyphicon-check',\r\n    uncheckedIcon: 'glyphicon glyphicon-unchecked',\r\n\r\n    color: undefined, // '#000000',\r\n    backColor: undefined, // '#FFFFFF',\r\n    borderColor: undefined, // '#dddddd',\r\n    onhoverColor: '#F5F5F5',\r\n    selectedColor: '#FFFFFF',\r\n    selectedBackColor: '#428bca',\r\n    searchResultColor: '#D9534F',\r\n    searchResultBackColor: undefined, //'#FFFFFF',\r\n\r\n    enableLinks: false,\r\n    highlightSelected: true,\r\n    highlightSearchResults: true,\r\n    showBorder: true,\r\n    showIcon: true,\r\n    showCheckbox: false,\r\n    showTags: false,\r\n    multiSelect: false,\r\n\r\n    // Event handlers\r\n    onNodeChecked: undefined,\r\n    onNodeCollapsed: undefined,\r\n    onNodeDisabled: undefined,\r\n    onNodeEnabled: undefined,\r\n    onNodeExpanded: undefined,\r\n    onNodeSelected: undefined,\r\n    onNodeUnchecked: undefined,\r\n    onNodeUnselected: undefined,\r\n    onSearchComplete: undefined,\r\n    onSearchCleared: undefined\r\n  };\r\n\r\n  _default.options = {\r\n    silent: false,\r\n    ignoreChildren: false\r\n  };\r\n\r\n  _default.searchOptions = {\r\n    ignoreCase: true, \r\n    exactMatch: false,\r\n    revealResults: true\r\n  };\r\n\r\n  var Tree =  swt.Tree = Widget.inherit({\r\n    klassName: \"Tree\",\r\n\r\n    pluginName : \"lark.tree\",\r\n\r\n    widgetClass : \"lark-tree\",\r\n\r\n    options : {\r\n      injectStyle: true,\r\n\r\n      levels: 2,\r\n\r\n      expandIcon: 'glyphicon glyphicon-plus',\r\n      collapseIcon: 'glyphicon glyphicon-minus',\r\n      emptyIcon: 'glyphicon',\r\n      nodeIcon: '',\r\n      selectedIcon: '',\r\n      checkedIcon: 'glyphicon glyphicon-check',\r\n      uncheckedIcon: 'glyphicon glyphicon-unchecked',\r\n\r\n      color: undefined, // '#000000',\r\n      backColor: undefined, // '#FFFFFF',\r\n      borderColor: undefined, // '#dddddd',\r\n      onhoverColor: '#F5F5F5',\r\n      selectedColor: '#FFFFFF',\r\n      selectedBackColor: '#428bca',\r\n      searchResultColor: '#D9534F',\r\n      searchResultBackColor: undefined, //'#FFFFFF',\r\n\r\n      enableLinks: false,\r\n      highlightSelected: true,\r\n      highlightSearchResults: true,\r\n      showBorder: true,\r\n      showIcon: true,\r\n      showCheckbox: false,\r\n      showTags: false,\r\n      multiSelect: false,\r\n\r\n      // Event handlers\r\n      onNodeChecked: undefined,\r\n      onNodeCollapsed: undefined,\r\n      onNodeDisabled: undefined,\r\n      onNodeEnabled: undefined,\r\n      onNodeExpanded: undefined,\r\n      onNodeSelected: undefined,\r\n      onNodeUnchecked: undefined,\r\n      onNodeUnselected: undefined,\r\n      onSearchComplete: undefined,\r\n      onSearchCleared: undefined\r\n\r\n    },   \r\n\r\n    template : {\r\n      list: '<ul class=\"list-group\"></ul>',\r\n      item: '<li class=\"list-group-item\"></li>',\r\n      indent: '<span class=\"indent\"></span>',\r\n      icon: '<span class=\"icon\"></span>',\r\n      link: '<a href=\"#\" style=\"color:inherit;\"></a>',\r\n      badge: '<span class=\"badge\"></span>'\r\n    },\r\n\r\n    css : '.Tree .list-group-item{cursor:pointer}.Tree span.indent{margin-left:10px;margin-right:10px}.Tree span.icon{width:12px;margin-right:5px}.Tree .node-disabled{color:silver;cursor:not-allowed}' ,\r\n\r\n    _construct : function (element, options) {\r\n\r\n      this.$element = $(element);\r\n      this.elementId = element.id;\r\n      this.styleId = this.elementId + '-style';\r\n\r\n      this._init(options);\r\n    },\r\n\r\n    _init : function (options) {\r\n\r\n      //var options = this.options\r\n\r\n      this.tree = [];\r\n      this.nodes = [];\r\n\r\n      if (options.data) {\r\n        if (typeof options.data === 'string') {\r\n          options.data = JSON.parse(options.data);\r\n        }\r\n        this.tree = langx.extend(true, [], options.data);\r\n        delete options.data;\r\n      }\r\n      //this.options = langx.extend({}, _default.settings, options);\r\n\r\n      this.destroy();\r\n      this.subscribeEvents();\r\n      this.setInitialStates({ nodes: this.tree }, 0);\r\n      this.render();\r\n    },\r\n\r\n    remove : function () {\r\n      this.destroy();\r\n      datax.removeData(this, this.pluginName);\r\n      $('#' + this.styleId).remove();\r\n    },\r\n\r\n    destroy : function () {\r\n\r\n      if (!this.initialized) return;\r\n\r\n      this.$wrapper.remove();\r\n      this.$wrapper = null;\r\n\r\n      // Switch off events\r\n      this.unsubscribeEvents();\r\n\r\n      // Reset this.initialized flag\r\n      this.initialized = false;\r\n    },\r\n\r\n    unsubscribeEvents : function () {\r\n\r\n      this.$element.off('click');\r\n      this.$element.off('nodeChecked');\r\n      this.$element.off('nodeCollapsed');\r\n      this.$element.off('nodeDisabled');\r\n      this.$element.off('nodeEnabled');\r\n      this.$element.off('nodeExpanded');\r\n      this.$element.off('nodeSelected');\r\n      this.$element.off('nodeUnchecked');\r\n      this.$element.off('nodeUnselected');\r\n      this.$element.off('searchComplete');\r\n      this.$element.off('searchCleared');\r\n    },\r\n\r\n    subscribeEvents : function () {\r\n\r\n      this.unsubscribeEvents();\r\n\r\n      this.$element.on('click', langx.proxy(this.clickHandler, this));\r\n\r\n      if (typeof (this.options.onNodeChecked) === 'function') {\r\n        this.$element.on('nodeChecked', this.options.onNodeChecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeCollapsed) === 'function') {\r\n        this.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeDisabled) === 'function') {\r\n        this.$element.on('nodeDisabled', this.options.onNodeDisabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeEnabled) === 'function') {\r\n        this.$element.on('nodeEnabled', this.options.onNodeEnabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeExpanded) === 'function') {\r\n        this.$element.on('nodeExpanded', this.options.onNodeExpanded);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeSelected) === 'function') {\r\n        this.$element.on('nodeSelected', this.options.onNodeSelected);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnchecked) === 'function') {\r\n        this.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnselected) === 'function') {\r\n        this.$element.on('nodeUnselected', this.options.onNodeUnselected);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchComplete) === 'function') {\r\n        this.$element.on('searchComplete', this.options.onSearchComplete);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchCleared) === 'function') {\r\n        this.$element.on('searchCleared', this.options.onSearchCleared);\r\n      }\r\n    },\r\n\r\n    /*\r\n      Recurse the tree structure and ensure all nodes have\r\n      valid initial states.  User defined states will be preserved.\r\n      For performance we also take this opportunity to\r\n      index nodes in a flattened structure\r\n    */\r\n    setInitialStates : function (node, level) {\r\n\r\n      if (!node.nodes) return;\r\n      level += 1;\r\n\r\n      var parent = node;\r\n      var _this = this;\r\n      langx.each(node.nodes, function checkStates(index, node) {\r\n\r\n        // nodeId : unique, incremental identifier\r\n        node.nodeId = _this.nodes.length;\r\n\r\n        // parentId : transversing up the tree\r\n        node.parentId = parent.nodeId;\r\n\r\n        // if not provided set selectable default value\r\n        if (!node.hasOwnProperty('selectable')) {\r\n          node.selectable = true;\r\n        }\r\n\r\n        // where provided we should preserve states\r\n        node.state = node.state || {};\r\n\r\n        // set checked state; unless set always false\r\n        if (!node.state.hasOwnProperty('checked')) {\r\n          node.state.checked = false;\r\n        }\r\n\r\n        // set enabled state; unless set always false\r\n        if (!node.state.hasOwnProperty('disabled')) {\r\n          node.state.disabled = false;\r\n        }\r\n\r\n        // set expanded state; if not provided based on levels\r\n        if (!node.state.hasOwnProperty('expanded')) {\r\n          if (!node.state.disabled &&\r\n              (level < _this.options.levels) &&\r\n              (node.nodes && node.nodes.length > 0)) {\r\n            node.state.expanded = true;\r\n          }\r\n          else {\r\n            node.state.expanded = false;\r\n          }\r\n        }\r\n\r\n        // set selected state; unless set always false\r\n        if (!node.state.hasOwnProperty('selected')) {\r\n          node.state.selected = false;\r\n        }\r\n\r\n        // index nodes in a flattened structure for use later\r\n        _this.nodes.push(node);\r\n\r\n        // recurse child nodes and transverse the tree\r\n        if (node.nodes) {\r\n          _this.setInitialStates(node, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    clickHandler : function (event) {\r\n\r\n      if (!this.options.enableLinks) event.preventDefault();\r\n\r\n      var target = $(event.target);\r\n      var node = this.findNode(target);\r\n      if (!node || node.state.disabled) return;\r\n      \r\n      var classList = target.attr('class') ? target.attr('class').split(' ') : [];\r\n      if ((classList.indexOf('expand-icon') !== -1)) {\r\n\r\n        this.toggleExpandedState(node, _default.options);\r\n        this.render();\r\n      }\r\n      else if ((classList.indexOf('check-icon') !== -1)) {\r\n        \r\n        this.toggleCheckedState(node, _default.options);\r\n        this.render();\r\n      }\r\n      else {\r\n        \r\n        if (node.selectable) {\r\n          this.toggleSelectedState(node, _default.options);\r\n        } else {\r\n          this.toggleExpandedState(node, _default.options);\r\n        }\r\n\r\n        this.render();\r\n      }\r\n    },\r\n\r\n    // Looks up the DOM for the closest parent list item to retrieve the\r\n    // data attribute nodeid, which is used to lookup the node in the flattened structure.\r\n    findNode : function (target) {\r\n\r\n      var nodeId = target.closest('li.list-group-item').attr('data-nodeid');\r\n      var node = this.nodes[nodeId];\r\n\r\n      if (!node) {\r\n        console.log('Error: node does not exist');\r\n      }\r\n      return node;\r\n    },\r\n\r\n    toggleExpandedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setExpandedState(node, !node.state.expanded, options);\r\n    },\r\n\r\n    setExpandedState : function (node, state, options) {\r\n\r\n      if (state === node.state.expanded) return;\r\n\r\n      if (state && node.nodes) {\r\n\r\n        // Expand a node\r\n        node.state.expanded = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else if (!state) {\r\n\r\n        // Collapse a node\r\n        node.state.expanded = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\r\n        }\r\n\r\n        // Collapse child nodes\r\n        if (node.nodes && !options.ignoreChildren) {\r\n          langx.each(node.nodes, langx.proxy(function (index, node) {\r\n            this.setExpandedState(node, false, options);\r\n          }, this));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleSelectedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setSelectedState(node, !node.state.selected, options);\r\n    },\r\n\r\n    setSelectedState : function (node, state, options) {\r\n\r\n      if (state === node.state.selected) return;\r\n\r\n      if (state) {\r\n\r\n        // If multiSelect false, unselect previously selected\r\n        if (!this.options.multiSelect) {\r\n          langx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\r\n            this.setSelectedState(node, false, options);\r\n          }, this));\r\n        }\r\n\r\n        // Continue selecting node\r\n        node.state.selected = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeSelected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Unselect node\r\n        node.state.selected = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleCheckedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setCheckedState(node, !node.state.checked, options);\r\n    },\r\n\r\n    setCheckedState : function (node, state, options) {\r\n\r\n      if (state === node.state.checked) return;\r\n\r\n      if (state) {\r\n\r\n        // Check node\r\n        node.state.checked = true;\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeChecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Uncheck node\r\n        node.state.checked = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    setDisabledState : function (node, state, options) {\r\n\r\n      if (state === node.state.disabled) return;\r\n\r\n      if (state) {\r\n\r\n        // Disable node\r\n        node.state.disabled = true;\r\n\r\n        // Disable all other states\r\n        this.setExpandedState(node, false, options);\r\n        this.setSelectedState(node, false, options);\r\n        this.setCheckedState(node, false, options);\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Enabled node\r\n        node.state.disabled = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    render : function () {\r\n\r\n      if (!this.initialized) {\r\n\r\n        // Setup first time only components\r\n        this.$element.addClass(this.widgetClass);\r\n        this.$wrapper = $(this.template.list);\r\n\r\n        this.injectStyle();\r\n\r\n        this.initialized = true;\r\n      }\r\n\r\n      this.$element.empty().append(this.$wrapper.empty());\r\n\r\n      // Build tree\r\n      this.buildTree(this.tree, 0);\r\n    },\r\n\r\n    // Starting from the root node, and recursing down the\r\n    // structure we build the tree one node at a time\r\n    buildTree : function (nodes, level) {\r\n\r\n      if (!nodes) return;\r\n      level += 1;\r\n\r\n      var _this = this;\r\n      langx.each(nodes, function addNodes(id, node) {\r\n\r\n        var treeItem = $(_this.template.item)\r\n          .addClass('node-' + _this.elementId)\r\n          .addClass(node.state.checked ? 'node-checked' : '')\r\n          .addClass(node.state.disabled ? 'node-disabled': '')\r\n          .addClass(node.state.selected ? 'node-selected' : '')\r\n          .addClass(node.searchResult ? 'search-result' : '') \r\n          .attr('data-nodeid', node.nodeId)\r\n          .attr('style', _this.buildStyleOverride(node));\r\n\r\n        // Add indent/spacer to mimic tree structure\r\n        for (var i = 0; i < (level - 1); i++) {\r\n          treeItem.append(_this.template.indent);\r\n        }\r\n\r\n        // Add expand, collapse or empty spacer icons\r\n        var classList = [];\r\n        if (node.nodes) {\r\n          classList.push('expand-icon');\r\n          if (node.state.expanded) {\r\n            classList.push(_this.options.collapseIcon);\r\n          }\r\n          else {\r\n            classList.push(_this.options.expandIcon);\r\n          }\r\n        }\r\n        else {\r\n          classList.push(_this.options.emptyIcon);\r\n        }\r\n\r\n        treeItem\r\n          .append($(_this.template.icon)\r\n            .addClass(classList.join(' '))\r\n          );\r\n\r\n\r\n        // Add node icon\r\n        if (_this.options.showIcon) {\r\n          \r\n          var classList = ['node-icon'];\r\n\r\n          classList.push(node.icon || _this.options.nodeIcon);\r\n          if (node.state.selected) {\r\n            classList.pop();\r\n            classList.push(node.selectedIcon || _this.options.selectedIcon || \r\n                    node.icon || _this.options.nodeIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.template.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add check / unchecked icon\r\n        if (_this.options.showCheckbox) {\r\n\r\n          var classList = ['check-icon'];\r\n          if (node.state.checked) {\r\n            classList.push(_this.options.checkedIcon); \r\n          }\r\n          else {\r\n            classList.push(_this.options.uncheckedIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.template.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add text\r\n        if (_this.options.enableLinks) {\r\n          // Add hyperlink\r\n          treeItem\r\n            .append($(_this.template.link)\r\n              .attr('href', node.href)\r\n              .append(node.text)\r\n            );\r\n        }\r\n        else {\r\n          // otherwise just text\r\n          treeItem\r\n            .append(node.text);\r\n        }\r\n\r\n        // Add tags as badges\r\n        if (_this.options.showTags && node.tags) {\r\n          langx.each(node.tags, function addTag(id, tag) {\r\n            treeItem\r\n              .append($(_this.template.badge)\r\n                .append(tag)\r\n              );\r\n          });\r\n        }\r\n\r\n        // Add item to the tree\r\n        _this.$wrapper.append(treeItem);\r\n\r\n        // Recursively add child ndoes\r\n        if (node.nodes && node.state.expanded && !node.state.disabled) {\r\n          return _this.buildTree(node.nodes, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    // Define any node level style override for\r\n    // 1. selectedNode\r\n    // 2. node|data assigned color overrides\r\n    buildStyleOverride : function (node) {\r\n\r\n      if (node.state.disabled) return '';\r\n\r\n      var color = node.color;\r\n      var backColor = node.backColor;\r\n\r\n      if (this.options.highlightSelected && node.state.selected) {\r\n        if (this.options.selectedColor) {\r\n          color = this.options.selectedColor;\r\n        }\r\n        if (this.options.selectedBackColor) {\r\n          backColor = this.options.selectedBackColor;\r\n        }\r\n      }\r\n\r\n      if (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\r\n        if (this.options.searchResultColor) {\r\n          color = this.options.searchResultColor;\r\n        }\r\n        if (this.options.searchResultBackColor) {\r\n          backColor = this.options.searchResultBackColor;\r\n        }\r\n      }\r\n\r\n      return 'color:' + color +\r\n        ';background-color:' + backColor + ';';\r\n    },\r\n\r\n    // Add inline style into head\r\n    injectStyle : function () {\r\n\r\n      if (this.options.injectStyle && !document.getElementById(this.styleId)) {\r\n        $('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\r\n      }\r\n    },\r\n\r\n    // Construct trees style based on user options\r\n    buildStyle : function () {\r\n\r\n      var style = '.node-' + this.elementId + '{';\r\n\r\n      if (this.options.color) {\r\n        style += 'color:' + this.options.color + ';';\r\n      }\r\n\r\n      if (this.options.backColor) {\r\n        style += 'background-color:' + this.options.backColor + ';';\r\n      }\r\n\r\n      if (!this.options.showBorder) {\r\n        style += 'border:none;';\r\n      }\r\n      else if (this.options.borderColor) {\r\n        style += 'border:1px solid ' + this.options.borderColor + ';';\r\n      }\r\n      style += '}';\r\n\r\n      if (this.options.onhoverColor) {\r\n        style += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\r\n          'background-color:' + this.options.onhoverColor + ';' +\r\n        '}';\r\n      }\r\n\r\n      return this.css + style;\r\n    },\r\n\r\n    /**\r\n      Returns a single node object that matches the given node id.\r\n      @param {Number} nodeId - A node's unique identifier\r\n      @return {Object} node - Matching node\r\n    */\r\n    getNode : function (nodeId) {\r\n      return this.nodes[nodeId];\r\n    },\r\n\r\n    /**\r\n      Returns the parent node of a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Object} node - The parent node\r\n    */\r\n    getParent : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      return this.nodes[node.parentId];\r\n    },\r\n\r\n    /**\r\n      Returns an array of sibling nodes for a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Array} nodes - Sibling nodes\r\n    */\r\n    getSiblings : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      var parent = this.getParent(node);\r\n      var nodes = parent ? parent.nodes : this.tree;\r\n      return nodes.filter(function (obj) {\r\n          return obj.nodeId !== node.nodeId;\r\n        });\r\n    },\r\n\r\n    /**\r\n      Returns an array of selected nodes.\r\n      @returns {Array} nodes - Selected nodes\r\n    */\r\n    getSelected : function () {\r\n      return this.findNodes('true', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unselected nodes.\r\n      @returns {Array} nodes - Unselected nodes\r\n    */\r\n    getUnselected : function () {\r\n      return this.findNodes('false', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of expanded nodes.\r\n      @returns {Array} nodes - Expanded nodes\r\n    */\r\n    getExpanded : function () {\r\n      return this.findNodes('true', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of collapsed nodes.\r\n      @returns {Array} nodes - Collapsed nodes\r\n    */\r\n    getCollapsed : function () {\r\n      return this.findNodes('false', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of checked nodes.\r\n      @returns {Array} nodes - Checked nodes\r\n    */\r\n    getChecked : function () {\r\n      return this.findNodes('true', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unchecked nodes.\r\n      @returns {Array} nodes - Unchecked nodes\r\n    */\r\n    getUnchecked : function () {\r\n      return this.findNodes('false', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of disabled nodes.\r\n      @returns {Array} nodes - Disabled nodes\r\n    */\r\n    getDisabled : function () {\r\n      return this.findNodes('true', 'g', 'state.disabled');\r\n    },\r\n\r\n    /**\r\n      Returns an array of enabled nodes.\r\n      @returns {Array} nodes - Enabled nodes\r\n    */\r\n    getEnabled : function () {\r\n      return this.findNodes('false', 'g', 'state.disabled');\r\n    },\r\n\r\n\r\n    /**\r\n      Set a node state to selected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    selectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Set a node state to unselected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    unselectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a node selected state; selecting if unselected, unselecting if selected.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeSelected : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleSelectedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Collapse all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    collapseAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.expanded');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Collapse a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    collapseNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    expandAll : function (options) {\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      if (options && options.levels) {\r\n        this.expandLevels(this.tree, options.levels, options);\r\n      }\r\n      else {\r\n        var identifiers = this.findNodes('false', 'g', 'state.expanded');\r\n        this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n          this.setExpandedState(node, true, options);\r\n        }, this));\r\n      }\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    expandNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, true, options);\r\n        if (node.nodes && (options && options.levels)) {\r\n          this.expandLevels(node.nodes, options.levels-1, options);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    expandLevels : function (nodes, level, options) {\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      langx.each(nodes, langx.proxy(function (index, node) {\r\n        this.setExpandedState(node, (level > 0) ? true : false, options);\r\n        if (node.nodes) {\r\n          this.expandLevels(node.nodes, level-1, options);\r\n        }\r\n      }, this));\r\n    },\r\n\r\n    /**\r\n      Reveals a given tree node, expanding the tree from node to root.\r\n      @param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    revealNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        var parentNode = this.getParent(node);\r\n        while (parentNode) {\r\n          this.setExpandedState(parentNode, true, options);\r\n          parentNode = this.getParent(parentNode);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeExpanded : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleExpandedState(node, options);\r\n      }, this));\r\n      \r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Check all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    checkAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Check a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    checkNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    uncheckAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    uncheckNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes checked state; checking if unchecked, unchecking if checked.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeChecked : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleCheckedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Disable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    disableAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Disable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    disableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    enableAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    enableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes disabled state; disabling is enabled, enabling if disabled.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeDisabled : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, !node.state.disabled, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Common code for processing multiple identifiers\r\n    */\r\n    forEachIdentifier : function (identifiers, options, callback) {\r\n\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      if (!(identifiers instanceof Array)) {\r\n        identifiers = [identifiers];\r\n      }\r\n\r\n      langx.each(identifiers, langx.proxy(function (index, identifier) {\r\n        callback(this.identifyNode(identifier), options);\r\n      }, this));  \r\n    },\r\n\r\n    /*\r\n      Identifies a node from either a node id or object\r\n    */\r\n    identifyNode : function (identifier) {\r\n      return ((typeof identifier) === 'number') ?\r\n              this.nodes[identifier] :\r\n              identifier;\r\n    },\r\n\r\n    /**\r\n      Searches the tree for nodes (text) that match given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional Object} options - Search criteria options\r\n      @return {Array} nodes - Matching nodes\r\n    */\r\n    search : function (pattern, options) {\r\n      options = langx.extend({}, _default.searchOptions, options);\r\n\r\n      this.clearSearch({ render: false });\r\n\r\n      var results = [];\r\n      if (pattern && pattern.length > 0) {\r\n\r\n        if (options.exactMatch) {\r\n          pattern = '^' + pattern + '$';\r\n        }\r\n\r\n        var modifier = 'g';\r\n        if (options.ignoreCase) {\r\n          modifier += 'i';\r\n        }\r\n\r\n        results = this.findNodes(pattern, modifier);\r\n\r\n        // Add searchResult property to all matching nodes\r\n        // This will be used to apply custom styles\r\n        // and when identifying result to be cleared\r\n        langx.each(results, function (index, node) {\r\n          node.searchResult = true;\r\n        })\r\n      }\r\n\r\n      // If revealResults, then render is triggered from revealNode\r\n      // otherwise we just call render.\r\n      if (options.revealResults) {\r\n        this.revealNode(results);\r\n      }\r\n      else {\r\n        this.render();\r\n      }\r\n\r\n      this.$element.trigger('searchComplete', langx.extend(true, {}, results));\r\n\r\n      return results;\r\n    },\r\n\r\n    /**\r\n      Clears previous search results\r\n    */\r\n    clearSearch : function (options) {\r\n\r\n      options = langx.extend({}, { render: true }, options);\r\n\r\n      var results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\r\n        node.searchResult = false;\r\n      });\r\n\r\n      if (options.render) {\r\n        this.render();  \r\n      }\r\n      \r\n      this.$element.trigger('searchCleared', langx.extend(true, {}, results));\r\n    },\r\n\r\n    /**\r\n      Find nodes that match a given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional String} modifier - Valid RegEx modifiers\r\n      @param {optional String} attribute - Attribute to compare pattern against\r\n      @return {Array} nodes - Nodes that match your criteria\r\n    */\r\n    findNodes : function (pattern, modifier, attribute) {\r\n\r\n      modifier = modifier || 'g';\r\n      attribute = attribute || 'text';\r\n\r\n      var _this = this;\r\n      return langx.grep(this.nodes, function (node) {\r\n        var val = _this.getNodeValue(node, attribute);\r\n        if (typeof val === 'string') {\r\n          return val.match(new RegExp(pattern, modifier));\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n      Recursive find for retrieving nested attributes values\r\n      All values are return as strings, unless invalid\r\n      @param {Object} obj - Typically a node, could be any object\r\n      @param {String} attr - Identifies an object property using dot notation\r\n      @return {String} value - Matching attributes string representation\r\n    */\r\n    getNodeValue : function (obj, attr) {\r\n      var index = attr.indexOf('.');\r\n      if (index > 0) {\r\n        var _obj = obj[attr.substring(0, index)];\r\n        var _attr = attr.substring(index + 1, attr.length);\r\n        return this.getNodeValue(_obj, _attr);\r\n      }\r\n      else {\r\n        if (obj.hasOwnProperty(attr)) {\r\n          return obj[attr].toString();\r\n        }\r\n        else {\r\n          return undefined;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return Tree;\r\n});"]}
{"version":3,"sources":["Tabular.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","Tabular","inherit","klassName","pluginName","options","buttonClasses","append","removeLast","insert","remove","moveUp","moveDown","rowDrag","sectionClasses","caption","header","body","subPanel","footer","hideButtons","_showEmptyMessage","settings","skipWidthCalculation","tbWrap","this","_tbWrap","$emptyCell","text","_i18n","rowEmpty","attr","_finalColSpan","addClass","maxBodyHeight","autoColumnWidth","_calculateColumnWidth","width","$tbWhole","$scroller","data","tbHeadRow","tbColGp","_rowOrder","length","tbBodyRow","marginThreshold","fn","modal","colLimit","Math","min","childNodes","z","headCellWidth","clientWidth","bodyCellWidth","style","offsetWidth","_createGridButton","param","uiIcon","genButton","isFunction","nodeType","clone","icon","label","type","plugin","showLabel","_sortSequence","startIndex","tbWhole","_elm","hideRowNumColumn","idPrefix","_emptyGrid","empty","_uniqueIndex","_saveSetting","_gridRowDragged","isMoveUp","uniqueIndex","tbRowIndex","splice","afterRowDragged","val","join","_checkGridAndGetSettings","noMsg","$grid","alert","_systemMessages","notInit","getValueMultiGrid","_insertRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","ctrl","tbRow","tbCell","self","addedRows","parentIndex","hidden","tbBody","getElementsByTagName","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","_wrapperId","numOfRow","loadData","isArray","isNumeric","maintainScroll","height","scrollParent","scrollTop","maxRowsAllowed","useSubPanel","insertBefore","document","createElement","push","appendChild","id","_sectionClasses","className","rowSpan","y","columns","invisible","name","cellCss","css","ctrlName","ctrlId","nameFormatter","customBuilder","ctrlOptions","isPlainObject","lastGroupName","lastGroupElem","x","isEmpty","group","option","value","title","appendTo","Option","arrayOpt","split","eqIndex","indexOf","substring","selectmenu","uiOption","textAlign","search","err","datepicker","spinner","autocomplete","ctrlAttr","ctrlProp","prop","ctrlCss","ctrlClass","uiTooltip","tooltip","onClick","click","caller","callback","evt","appendGrid","onChange","change","getRowIndex","setCtrlValue","_hideLastColumn","_visibleCount","rowButtonsInFront","firstChild","display","button","customGridButtons","tabindex","rowUniqueIndex","insertRow","preventDefault","_buttonClasses","_removeRow","moveUpRow","moveDownRow","rowDragging","customRowButtons","buttonCfg","uiButton","atTheFront","prepend","makeCustomRowButton","colSpan","subPanelBuilder","_calculateWidth","scroll","scrollHeight","offsetHeight","afterRowInserted","afterRowAppended","maxNumRowsReached","newHeight","force","beforeRowRemove","removeChild","afterRowRemoved","pop","lastChild","_loadData","records","isInit","insertResult","r","c","rowDataLoaded","_isDataLoaded","initData","dataLoaded","_init","noColumnInfo","tbHead","tbFoot","tagName","elemNotTable","tbHeadCellRowNum","tbHeadCellRowButton","extend","_defaultInitOptions","_defaultCallbackContainer","i18n","_defaultTextResources","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","Date","getTime","insertAfter","prependTo","wrap","pendingSkipCol","columnOpt","_defaultColumnOptions","resizable","displayCss","headerSpan","displayTooltip","handles","childnodes","captionTooltip","customFooterButtons","makeCustomBottomButton","sortable","axis","containment","handle","helper","e","tr","org","children","each","index","eq","helperSelect","orgSelect","find","update","event","ui","item","lastIndexOf","originalPosition","top","position","appendRow","initRows","isReady","isDataLoaded","load","insertUniqueIndex","focus","removeRow","emptyGrid","target","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","findRowIndex","getElementById","html","removeClass","blur","afterRowSwapped","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","rowCountName","getCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","subPanelGetter","emptyCriteria","customGetter","customSetter","notSupportMethod","exButton","btnClass","btnCss","btnAttr","rowData","suffix","adtData","newData","key","columnName","checked","element","currentValue","defaultValue"],"mappings":"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","file":"../Tabular.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n        _showEmptyMessage : function (settings, skipWidthCalculation) {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n            $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n            if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n                // Check scrolling enabled\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    // Set the width of empty message cell to the thead width\r\n                    $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n                }\r\n            }\r\n        },  \r\n\r\n        _calculateColumnWidth : function () {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $tbWhole = $('table.body', tbWrap);\r\n            var $scroller = $('div.scroller', tbWrap);\r\n            var settings = $tbWhole.data('appendGrid');\r\n            var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n            var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n            // Check any rows within the grid\r\n            if (settings._rowOrder.length > 0) {\r\n                // Reset the table/column width\r\n                $('td', tbHeadRow).width('auto');\r\n                $('col', tbColGp).width('auto');\r\n                $tbWhole.width('auto');\r\n                $scroller.width('auto');\r\n                // Check the total number of columns\r\n                var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n                var marginThreshold = -2;\r\n                if ($.fn.modal) {\r\n                    // If bootstrap is loaded, cell margin was reset\r\n                    marginThreshold = 1;\r\n                }\r\n                var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n                for (var z = 0; z < colLimit; z++) {\r\n                    var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                    var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                    if (bodyCellWidth > headCellWidth) {\r\n                        tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                    } else {\r\n                        tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n            }\r\n            // Set the width of footer row\r\n            $('table.foot', tbWrap).width($tbWhole.width());\r\n            // Check the scroll panel width\r\n            $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n        },\r\n\r\n\r\n        _createGridButton : function (param, uiIcon) {\r\n            // Generate the standard grid action button based on its parameter.\r\n            var genButton = null;\r\n            if (param) {\r\n                if (langx.isFunction(param)) {\r\n                    // Generate button if it is a function.\r\n                    genButton = $(param());\r\n                } else if (param.nodeType) {\r\n                    // Clone the button if it is a DOM element.\r\n                    genButton = $(param).clone();\r\n                } else if (param.icon || param.label) {\r\n                    // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                    genButton = $('<button/>').attr({ type: 'button' });\r\n                    genButton.plugin(\"lark.button\",param);\r\n                }\r\n            }\r\n            if (!genButton) {\r\n                // Use default setting (jQuery UI Button) if button is not created.\r\n                genButton = $('<button/>').attr({ type: 'button' });\r\n                genButton.plugin(\"lark.button\",{ icon: uiIcon, showLabel: false });\r\n            }\r\n            return genButton;\r\n        },\r\n\r\n        _sortSequence : function (startIndex) {\r\n            var tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (!settings.hideRowNumColumn) {\r\n                for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                    $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        _emptyGrid : function () {\r\n            var tbWhole = this._elm;\r\n\r\n            // Load settings\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Remove rows\r\n            $('tbody', tbWhole).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Add empty row\r\n            this._showEmptyMessage(settings);\r\n        },        \r\n\r\n        _gridRowDragged : function (isMoveUp, uniqueIndex, tbRowIndex) {\r\n            var tbWhole = this._elm;\r\n\r\n            // Get setting\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Find the start sorting index\r\n            var startIndex = -1;\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    if (isMoveUp) {\r\n                        startIndex = tbRowIndex;\r\n                        settings._rowOrder.splice(z, 1);\r\n                        settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                    } else {\r\n                        startIndex = z;\r\n                        settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                        settings._rowOrder.splice(z, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // Do re-order\r\n            this._sortSequence( startIndex);\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n\r\n            // Trigger event\r\n            if (langx.isFunction(settings.afterRowDragged)) {\r\n                settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n            }\r\n        },\r\n\r\n       _saveSetting : function (settings) {\r\n            var tbWhole = this._elm;\r\n\r\n            $(tbWhole).data('appendGrid', settings);\r\n            $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n        },\r\n\r\n\r\n        _checkGridAndGetSettings : function (noMsg) {\r\n            // Check the jQuery grid object is initialized and return its settings\r\n\r\n            var settings = null,\r\n                $grid = $(this._elm);\r\n\r\n            if ($grid.length == 1) {\r\n                settings = $grid.data('appendGrid');\r\n                if (!settings && !noMsg) {\r\n                    alert(_systemMessages.notInit);\r\n                }\r\n            } else if (!noMsg) {\r\n                alert(_systemMessages.getValueMultiGrid);\r\n            }\r\n            return settings;\r\n        },\r\n\r\n        _insertRow : function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            // Define variables\r\n            var self = this,\r\n                tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n            var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maxBodyHeight > 0) {\r\n                tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n            }\r\n            // Check number of row to be inserted\r\n            var numOfRow = numOfRowOrRowArray, loadData = false;\r\n            if (langx.isArray(numOfRowOrRowArray)) {\r\n                numOfRow = numOfRowOrRowArray.length;\r\n                loadData = true;\r\n            }\r\n            // Check parent row\r\n            if (langx.isNumeric(callerUniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                        rowIndex = z;\r\n                        if (z != 0) parentIndex = z - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (langx.isNumeric(rowIndex)) {\r\n                if (rowIndex >= settings._rowOrder.length) {\r\n                    rowIndex = null;\r\n                } else {\r\n                    parentIndex = rowIndex - 1;\r\n                }\r\n            }\r\n            else if (settings._rowOrder.length != 0) {\r\n                rowIndex = null;\r\n                parentIndex = settings._rowOrder.length - 1;\r\n            }\r\n            // Store old grid height\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                $('tr.empty', tbWhole).remove();\r\n                calColWidth = true;\r\n            }\r\n            // Add total number of row\r\n            for (var z = 0; z < numOfRow; z++) {\r\n                // Check maximum number of rows\r\n                if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                    reachMaxRow = true;\r\n                    break;\r\n                }\r\n                // Update variables\r\n                settings._uniqueIndex++;\r\n                uniqueIndex = settings._uniqueIndex;\r\n                hidden.length = 0;\r\n                // Check row insert index\r\n                if (langx.isNumeric(rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    addedRows.push(rowIndex);\r\n                }\r\n                else {\r\n                    settings._rowOrder.push(uniqueIndex);\r\n                    tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                    }\r\n                    addedRows.push(settings._rowOrder.length - 1);\r\n                }\r\n                tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n                if (settings._sectionClasses.body) {\r\n                    tbRow.className = settings._sectionClasses.body;\r\n                }\r\n                $(tbRow).data('appendGrid', uniqueIndex);\r\n                // Config on the sub panel row\r\n                if (tbSubRow != null) {\r\n                    tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                    $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                    if (settings._sectionClasses.subPanel) {\r\n                        tbSubRow.className = settings._sectionClasses.subPanel;\r\n                    }\r\n                }\r\n                // Add row number\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                    if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n                }\r\n                // Process on each columns\r\n                for (var y = 0; y < settings.columns.length; y++) {\r\n                    // Skip hidden\r\n                    if (settings.columns[y].type == 'hidden') {\r\n                        hidden.push(y);\r\n                        continue;\r\n                    }\r\n                    // Check column invisble\r\n                    var className = 'ui-widget-content';\r\n                    if (settings.columns[y].invisible) className += ' invisible';\r\n                    // Insert cell\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                    tbCell.className = className;\r\n                    if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                    // Prepare control id and name\r\n                    var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrlName = ctrlId;\r\n                    }\r\n                    // Check control type\r\n                    ctrl = null;\r\n                    if (settings.columns[y].type == 'custom') {\r\n                        if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                            ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        }\r\n                    } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                        ctrl = document.createElement('select');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        // Build option list\r\n                        if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                            // For array type option list\r\n                            if (settings.columns[y].ctrlOptions.length > 0) {\r\n                                if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                    // Check to generate optGroup or not\r\n                                    var lastGroupName = null, lastGroupElem = null;\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                            if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                                lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                                lastGroupElem = document.createElement('optgroup');\r\n                                                lastGroupElem.label = lastGroupName;\r\n                                                ctrl.appendChild(lastGroupElem);\r\n                                            }\r\n                                        } else {\r\n                                            lastGroupElem = null;\r\n                                        }\r\n                                        var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                            option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                        }\r\n                                        if (null == lastGroupElem) {\r\n                                            option.appendTo(ctrl);\r\n                                        }\r\n                                        else {\r\n                                            option.appendTo(lastGroupElem);\r\n                                        }\r\n                                        // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                            // For plain object type option list\r\n                            for (var x in settings.columns[y].ctrlOptions) {\r\n                                ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                            }\r\n                        } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                            // For string type option list\r\n                            var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                            for (var x = 0; x < arrayOpt.length; x++) {\r\n                                var eqIndex = arrayOpt[x].indexOf(':');\r\n                                if (-1 == eqIndex) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                                } else {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                                }\r\n                            }\r\n                        } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                            settings.columns[y].ctrlOptions(ctrl);\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-selectmenu') {\r\n                            $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    else if (settings.columns[y].type == 'checkbox') {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'checkbox';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        ctrl.value = 1;\r\n                        tbCell.appendChild(ctrl);\r\n                        tbCell.style.textAlign = 'center';\r\n                    }\r\n                    else if (settings.columns[y].type == 'textarea') {\r\n                        ctrl = document.createElement('textarea');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                        ctrl = document.createElement('input');\r\n                        try {\r\n                            ctrl.type = settings.columns[y].type;\r\n                        }\r\n                        catch (err) { /* Not supported type */ }\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else {\r\n                        // Generate text input\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'text';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-datepicker') {\r\n                            $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-spinner') {\r\n                            $(ctrl).spinner(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                            $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    // Add extra control properties\r\n                    if (settings.columns[y].type != 'custom') {\r\n                        // Add control attributes as needed\r\n                        if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                        // Add control properties as needed\r\n                        if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                        // Add control CSS as needed\r\n                        if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                        // Add control class as needed\r\n                        if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                        // Add jQuery UI tooltip as needed\r\n                        if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                        // Add control events as needed\r\n                        if (langx.isFunction(settings.columns[y].onClick)) {\r\n                            $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                        if (langx.isFunction(settings.columns[y].onChange)) {\r\n                            $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).plugin(\"lark.tabular\").getRowIndex(evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                    } else if (!isEmpty(settings.columns[y].value)) {\r\n                        // Set default value\r\n                        setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                    }\r\n                }\r\n                // Add button cell if needed\r\n                if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                    if (!settings.rowButtonsInFront) {\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    } else if (!settings.hideRowNumColumn) {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                    } else {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                    }\r\n                    tbCell.className = 'ui-widget-content last';\r\n                    tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                    if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                    // Add standard buttons\r\n                    if (!settings.hideButtons.insert) {\r\n                        var button = this._createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n                            .attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n                            .addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").insertRow(1, null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                    }\r\n                    if (!settings.hideButtons.remove) {\r\n                        var button = this._createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n                            .attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n                            .addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                self._removeRow( null, rowUniqueIndex, false);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                    }\r\n                    if (!settings.hideButtons.moveUp) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n                            .attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n                            .addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveUpRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                    }\r\n                    if (!settings.hideButtons.moveDown) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n                            .attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n                            .addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveDownRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                    }\r\n                    // Handle row dragging\r\n                    if (settings.rowDragging) {\r\n                        var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                            .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                            .appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                    }\r\n                    // Add hidden\r\n                    for (var y = 0; y < hidden.length; y++) {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                        if (langx.isFunction(settings.nameFormatter)) {\r\n                            ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        } else {\r\n                            ctrl.name = ctrl.id;\r\n                        }\r\n                        ctrl.type = 'hidden';\r\n\r\n                        if (loadData) {\r\n                            // Load data if needed\r\n                            ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                        } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                            // Set default value\r\n                            ctrl.value = settings.columns[hidden[y]].value;\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    // Add extra buttons\r\n                    if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Create sub panel\r\n                if (settings.useSubPanel) {\r\n                    tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.className = 'ui-widget-content';\r\n                    tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                    if (langx.isFunction(settings.subPanelBuilder)) {\r\n                        settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            // Check if re-calculate column width is required\r\n            if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n                var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n                if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                    calColWidth = true;\r\n                    settings._calculateWidth = false;\r\n                }\r\n            }\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Calculate column width\r\n            if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n                this._calculateColumnWidth();\r\n            }\r\n            // Trigger events\r\n            if (langx.isNumeric(rowIndex)) {\r\n                if (langx.isFunction(settings.afterRowInserted)) {\r\n                    settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            else {\r\n                if (langx.isFunction(settings.afterRowAppended)) {\r\n                    settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n                settings.maxNumRowsReached();\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n            // Return added rows' uniqueIndex\r\n            return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n        },\r\n\r\n        _removeRow : function (rowIndex, uniqueIndex, force) {\r\n            var tbWhole = this._elm;\r\n\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            if (langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        rowIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (langx.isNumeric(rowIndex)) {\r\n                // Remove middle row\r\n                if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 1);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Sort sequence\r\n                    this._sortSequence( rowIndex);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, rowIndex);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Store old window scroll value\r\n                var oldHeight = 0, oldScroll = 0;\r\n                if (settings.maintainScroll) {\r\n                    oldHeight = $(tbWhole).height();\r\n                    oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n                }\r\n                // Remove last row\r\n                if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                    uniqueIndex = settings._rowOrder.pop();\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.lastChild);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, null);\r\n                    }\r\n                }\r\n                // Scroll the page when append row\r\n                if (settings.maintainScroll) {\r\n                    // Try to maintain the height so that user no need to scroll every time when row added\r\n                    var newHeight = $(tbWhole).height();\r\n                    $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n                }\r\n            }\r\n            // Add empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings);\r\n            }\r\n        },\r\n\r\n        _loadData : function (records, isInit) {\r\n            var tbWhole = this._elm;\r\n            var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (settings) {\r\n                // Clear existing content\r\n                tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                $(tbBody).empty();\r\n                settings._rowOrder.length = 0;\r\n                settings._uniqueIndex = 0;\r\n                // Check any records\r\n                if (records != null && records.length) {\r\n                    // Add rows\r\n                    insertResult = this._insertRow(records.length, null, null);\r\n                    // Set data\r\n                    for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                        for (var c = 0; c < settings.columns.length; c++) {\r\n                            setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                        }\r\n                        if (langx.isFunction(settings.rowDataLoaded)) {\r\n                            settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                        }\r\n                    }\r\n                }\r\n                // Save setting\r\n                settings._isDataLoaded = true;\r\n                if (isInit) settings.initData = null;\r\n                $(tbWhole).data('appendGrid', settings);\r\n                // Trigger data loaded event\r\n                if (langx.isFunction(settings.dataLoaded)) {\r\n                    settings.dataLoaded(tbWhole, records);\r\n                }\r\n            }\r\n        },\r\n\r\n        _init: function () {\r\n            var options = this.options,\r\n                self = this;\r\n            // Check mandatory paramters included\r\n            if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                alert(_systemMessages.noColumnInfo);\r\n            }\r\n            // Check target element is table or not\r\n            var tbWhole = this._elm, tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n            if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                alert(_systemMessages.elemNotTable);\r\n            }\r\n            // Generate settings\r\n            var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n            // Add internal settings\r\n            langx.extend(settings, {\r\n                // The UniqueIndex accumulate counter\r\n                _uniqueIndex: 0,\r\n                // The row order array\r\n                _rowOrder: [],\r\n                // Indicate data is loaded or not\r\n                _isDataLoaded: false,\r\n                // Visible column count for internal calculation\r\n                _visibleCount: 0,\r\n                // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                _finalColSpan: 0,\r\n                // Indicate to hide last column or not\r\n                _hideLastColumn: false,\r\n                // The element ID of the `appendGrid` wrapper\r\n                _wrapperId: null,\r\n                // \r\n                _calculateWidth: true\r\n            });\r\n            // Labels or messages used in grid\r\n            if (langx.isPlainObject(options.i18n))\r\n                settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n            else\r\n                settings._i18n = langx.extend({}, _defaultTextResources);\r\n            // The extra class names for buttons\r\n            if (langx.isPlainObject(options.buttonClasses))\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n            else\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n            // The extra class names for sections\r\n            if (langx.isPlainObject(options.sectionClasses))\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n            else\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n            // Make sure the `hideButtons` setting defined\r\n            if (langx.isPlainObject(options.hideButtons))\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n            else\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n            // Check `idPrefix` is defined\r\n            if (isEmpty(settings.idPrefix)) {\r\n                // Check table ID defined\r\n                if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                    // Generate an ID using current time\r\n                    settings.idPrefix = 'ag' + new Date().getTime();\r\n                }\r\n                else {\r\n                    settings.idPrefix = tbWhole.id;\r\n                }\r\n            }\r\n            // Check custom grid button parameters\r\n            if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                settings.customGridButtons = {};\r\n            }\r\n            // Check rowDragging and useSubPanel option\r\n            if (settings.useSubPanel && settings.rowDragging) {\r\n                settings.rowDragging = false;\r\n            }\r\n            // Create thead and tbody\r\n            tbHead = document.createElement('thead');\r\n            tbHead.className = 'ui-widget-header';\r\n            tbBody = document.createElement('tbody');\r\n            tbBody.className = 'ui-widget-content';\r\n            tbFoot = document.createElement('tfoot');\r\n            tbFoot.className = 'ui-widget-header';\r\n            tbColGp = document.createElement('colgroup');\r\n            // Prepare the table element\r\n            settings._wrapperId = settings.idPrefix + '-wrapper';\r\n            tbWrap = this._tbWrap = document.createElement('div');\r\n            $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n            $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n            // Check if content scrolling is enabled\r\n            if (settings.maxBodyHeight > 0) {\r\n                // Seperate the thead and tfoot from source table\r\n                $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n            } else {\r\n                // Add thead, tbody and tfoot to the same table\r\n                $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n            }\r\n            // Handle header row\r\n            var tbHeadCellRowNum, tbHeadCellRowButton;\r\n            tbHead.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.header) {\r\n                tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n            } else {\r\n                tbRow.className = 'columnHead';\r\n            }\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Prepare column information and add column header\r\n            var pendingSkipCol = 0;\r\n            for (var z = 0; z < settings.columns.length; z++) {\r\n                // Assign default setting\r\n                var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                settings.columns[z] = columnOpt;\r\n                // Skip hidden\r\n                if (settings.columns[z].type != 'hidden') {\r\n                    // Check column is invisible\r\n                    if (!settings.columns[z].invisible) {\r\n                        settings._visibleCount++;\r\n                    }\r\n                    // Check skip header colSpan\r\n                    if (pendingSkipCol == 0) {\r\n                        var className = 'ui-widget-header';\r\n                        if (settings.columns[z].invisible) className += ' invisible';\r\n                        if (settings.columns[z].resizable) className += ' resizable';\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                        tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                        tbCell.className = className;\r\n                        if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                        if (settings.columns[z].headerSpan > 1) {\r\n                            $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                            pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                        }\r\n                        // Add tooltip\r\n                        if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                        }\r\n                        else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                        }\r\n                        // Check to set display text or generate by function\r\n                        if (langx.isFunction(settings.columns[z].display)) {\r\n                            settings.columns[z].display(tbCell);\r\n                        } else if (!isEmpty(settings.columns[z].display)) {\r\n                            $(tbCell).text(settings.columns[z].display);\r\n                        }\r\n                        // Add column group for scrolling\r\n                        tbColGp.appendChild(document.createElement('col'));\r\n                    } else {\r\n                        pendingSkipCol--;\r\n                    }\r\n                }\r\n            }\r\n            // Enable columns resizable\r\n            if ($.fn.resizable ) {\r\n                $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n            }\r\n            // Check to hide last column or not\r\n            if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                    && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                    && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                settings._hideLastColumn = true;\r\n            }\r\n            // Calculate the `_finalColSpan` value\r\n            settings._finalColSpan = settings._visibleCount;\r\n            if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n            if (!settings._hideLastColumn) settings._finalColSpan++;\r\n            // Generate last column header if needed\r\n            if (!settings._hideLastColumn) {\r\n                if (settings.rowButtonsInFront) {\r\n                    if (settings.hideRowNumColumn) {\r\n                        // Insert a cell at the front\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                    } else {\r\n                        // Span the first cell that across row number and row button cells\r\n                        // tbHeadCellRowNum.colSpan = 2;\r\n                        // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                        // Insert a cell as the second column\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                    }\r\n                } else {\r\n                    tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                }\r\n                tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Add caption when defined\r\n            if (settings.caption) {\r\n                tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                if (settings._sectionClasses.caption) {\r\n                    tbRow.className = settings._sectionClasses.caption;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_caption_td';\r\n                tbCell.className = 'ui-state-active caption';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                // Add tooltip\r\n                if (langx.isPlainObject(settings.captionTooltip)) {\r\n                    $(tbCell).tooltip(settings.captionTooltip);\r\n                } else if (!isEmpty(settings.captionTooltip)) {\r\n                    $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                }\r\n                // Check to set display text or generate by function\r\n                if (langx.isFunction(settings.caption)) {\r\n                    settings.caption(tbCell);\r\n                } else {\r\n                    $(tbCell).text(settings.caption);\r\n                }\r\n            }\r\n            // Handle footer row\r\n            tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.footer) {\r\n                tbRow.className = settings._sectionClasses.footer;\r\n            }\r\n            tbRow.appendChild(tbCell = document.createElement('td'));\r\n            tbCell.id = settings.idPrefix + '_footer_td';\r\n            tbCell.colSpan = settings._finalColSpan;\r\n            $('<input/>').attr({\r\n                type: 'hidden',\r\n                id: settings.idPrefix + '_rowOrder',\r\n                name: settings.idPrefix + '_rowOrder'\r\n            }).appendTo(tbCell);\r\n            // Make row invisible if all buttons are hidden\r\n            if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                    && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                tbRow.style.display = 'none';\r\n            } else {\r\n                if (!settings.hideButtons.append) {\r\n                    var button = this._createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n                    .attr({ title: settings._i18n.append }).addClass('append')\r\n                    .click(function (evt) {\r\n                        self._insertRow(1, null, null);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                }\r\n                if (!settings.hideButtons.removeLast) {\r\n                    var button = this._createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n                    .attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n                    .click(function (evt) {\r\n                        self._removeRow( null, this.value, false);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                }\r\n                if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Enable dragging\r\n            if (settings.rowDragging) {\r\n                $(tbBody).sortable({\r\n                    axis: 'y',\r\n                    containment: tbWhole,\r\n                    handle: '.rowDrag',\r\n                    helper: function (e, tr) {\r\n                        var org = tr.children();\r\n                        var helper = tr.clone();\r\n                        // Fix the cell width of cloned table cell\r\n                        helper.children().each(function (index) {\r\n                            $(this).width(org.eq(index).width());\r\n                            // Set the value of drop down list when drag (Issue #18)\r\n                            var helperSelect = $('select', this);\r\n                            if (helperSelect.length > 0) {\r\n                                for (var y = 0; y < helperSelect.length; y++) {\r\n                                    var orgSelect = org.eq(index).find('select');\r\n                                    if (orgSelect.length > y) {\r\n                                        helperSelect[y].value = orgSelect[y].value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        return helper;\r\n                    },\r\n                    update: function (event, ui) {\r\n                        var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                        var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                        self._gridRowDragged(ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            // Save options\r\n            $(tbWhole).data('appendGrid', settings);\r\n            if (langx.isArray(options.initData)) {\r\n                // Load data if initData is array\r\n                this._loadData(options.initData, true);\r\n            } else {\r\n                // Add empty rows\r\n                //$(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                this.appendRow(settings.initRows);\r\n            }\r\n            // Show no rows in grid\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings, true);\r\n            }\r\n            // Calculate column width\r\n            if (settings.maxBodyHeight > 0) {\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    $('table.foot', tbWrap).width($(tbWhole).width());\r\n                }\r\n            }\r\n        },\r\n\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = this._checkGridAndGetSettings( true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        load: function (records) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    this._loadData(records, false);\r\n                } else {\r\n                    this._emptyGrid();\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.insertRow(numOfRowOrRowArray);\r\n        },\r\n\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = this._insertRow(numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        this._sortSequence( insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                this._removeRow(rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                this._emptyGrid();\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        this._removeRow( null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n\r\n\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).plugin(\"lark.tabular\").getRowValue(null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n\r\n\r\n\r\n\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n    */\r\n\r\n    return Tabular ;\r\n});\r\n"]}
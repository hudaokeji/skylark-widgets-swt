{"version":3,"sources":["skylark-widgets-swt.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","ui","sbswt","CONST","BACKSPACE_KEYCODE","COMMA_KEYCODE","DELETE_KEYCODE","DOWN_ARROW_KEYCODE","ENTER_KEYCODE","TAB_KEYCODE","UP_ARROW_KEYCODE","isKey","keyCode","e","isBackspaceKey","isDeleteKey","isTabKey","isUpArrow","isDownArrow","ENCODED_REGEX","mixin","cleanInput","questionableMarkup","test","html","text","isShiftHeld","shiftKey","Widget","collapse","swt","Panel","inherit","klassName","pluginName","options","toggler","selector","body","_init","self","this","$toggle","_velm","find","$body","on","$this","collpasePlugin","toggle","data","expand","toogle","full","unfull","toogleFull","close","panel_dom","dom","id","minimize","promise","then","fadeOut","Accordion","panel","template","panels","forEach","panelEl","push","_panels","_post","_refresh","updates","get","addPanel","$newPanel","$template","clone","removeClass","attr","hash","addClass","append","fadeIn","remove","expandAll","collapseAll","overrided","_elm","overided","Button","btnSize","btnType","leftIcon","rightIcon","topIcon","bottomIcon","state","String","[object Object]","elm","$el","hasClass","href","target","$fa_icon_left","length","$fa_icon_right","super","velm","value","left","prepend","iconleft","iconright","register","Carousel","items","indicatorTemplate","slideTemplate","templates","container","indicators","item","slides","_bs_carousel","carousel","slideIndex","to","slideAction","prev","next","preventDefault","pos","pause","cycle","add","createIndicator","obj","thumbnailUrl","thumbnail","gallery","indicator","indicatorPrototype","cloneNode","title","getItemTitle","thumbnailProperty","thumbnailIndicators","Gallery","getItemProperty","undefined","getElementsByTagName","src","style","backgroundImage","addIndicator","index","indicatorContainer","list","setAttribute","appendChild","setActiveIndicator","activeIndicator","activeIndicatorClass","initSlides","reload","document","createElement","children","addSlide","resetSlides","empty","_Toggler","checked","isChecked","uncheck","check","set","CheckBox","selectors","chk","lbl","label","_parse","chkSelector","lblSelector","$chk","prop","disabled","_create","$lbl","_startup","evt","changed","$containerToggle","$label","$toggleContainer","setDisabledState","ComboBox","widgetClass","autoResizeMenu","filterOnKeypress","showOptionsOnKeypress","filter","predicate","visible","$dropMenu","each","i","$li","trim","substr","$element","$input","$button","dropdown","$inputGroupBtn","proxy","itemclicked","inputchanged","menuShown","keypress","setDefaultSelection","val","_destroy","outerHTML","doSelect","$item","$selectedItem","clearSelection","resizeMenu","width","outerWidth","selectedItem","txt","notFound","selectByText","textContent","innerText","toLowerCase","selectByValue","selectBySelector","selectByIndex","removeData","removeAttr","enable","disable","parent","trigger","synthetic","focus","IS_NAVIGATIONAL","which","selected","$selected","previousKeyPress","extra","prototype","getValue","TextBox","multiline","is","tagName","attrs","name","subtype","type","_dom","_sync","Listing","multiSelect","multiTier","mode","levels","hasChildren","classes","expandIcon","collapseIcon","tree","itemGroup","active","Object","itemSelector","_$items","veItem","_elmx","multiTierMode","query","has","not","closest","toggleClass","siblings","findItem","valueOrIdx","isNumber","eq","oldValue","selectOneItem","Pagination","css","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","Number","$first","$prev","$last","$next","$numeric","checkCanAction","$elm","click","ret","numeric","pageNo","parseInt","totalPageNoBtns","Math","min","begin","end","count","size","visibles","$btn","show","hide","changePageNoBtns","changeLabeldBtns","Progress","bar","max","_vbar","start","slideDown","increase","tick","finish","slideUp","Radio","$radio","element","domNode","$container","ignoreVisibilityCheck","match","logError","containerSelector","setInitialState","resetGroup","setCheckedState","$radios","groupName","SearchBox","clearOnEmpty","searchOnKeyPress","allowCancel","$repeater","$icon","buttonclicked","clearPending","activeSearch","destroy","search","searchText","clear","action","currentTarget","SelectList","emptyLabelHTML","$hiddenField","$dropdownMenu","itemClicked","resize","key","fromCharCode","idx","charAt","off","itemChanged","newWidth","sizer","Boolean","Tabular","buttonClasses","removeLast","insert","moveUp","moveDown","rowDrag","sectionClasses","caption","header","subPanel","footer","hideButtons","_showEmptyMessage","settings","skipWidthCalculation","tbWrap","_tbWrap","$emptyCell","_i18n","rowEmpty","_finalColSpan","maxBodyHeight","autoColumnWidth","_calculateColumnWidth","$tbWhole","$scroller","tbHeadRow","tbColGp","_rowOrder","tbBodyRow","marginThreshold","fn","modal","colLimit","childNodes","z","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","_createGridButton","param","uiIcon","genButton","isFunction","nodeType","icon","plugin","showLabel","_sortSequence","startIndex","tbWhole","hideRowNumColumn","idPrefix","_emptyGrid","_uniqueIndex","_saveSetting","_gridRowDragged","isMoveUp","uniqueIndex","tbRowIndex","splice","afterRowDragged","join","_checkGridAndGetSettings","noMsg","$grid","alert","_systemMessages","notInit","getValueMultiGrid","_insertRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","ctrl","tbRow","tbCell","addedRows","parentIndex","hidden","tbBody","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","_wrapperId","numOfRow","loadData","isArray","isNumeric","maintainScroll","height","scrollParent","scrollTop","maxRowsAllowed","useSubPanel","insertBefore","_sectionClasses","className","rowSpan","y","columns","invisible","cellCss","ctrlName","ctrlId","nameFormatter","customBuilder","ctrlOptions","isPlainObject","lastGroupName","lastGroupElem","x","isEmpty","group","option","appendTo","Option","arrayOpt","split","eqIndex","indexOf","substring","selectmenu","uiOption","textAlign","err","datepicker","spinner","autocomplete","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","uiTooltip","tooltip","onClick","caller","callback","appendGrid","onChange","change","getRowIndex","setCtrlValue","_hideLastColumn","_visibleCount","rowButtonsInFront","firstChild","display","button","customGridButtons","tabindex","rowUniqueIndex","insertRow","_buttonClasses","_removeRow","moveUpRow","moveDownRow","rowDragging","customRowButtons","buttonCfg","uiButton","atTheFront","makeCustomRowButton","colSpan","subPanelBuilder","_calculateWidth","scroll","scrollHeight","offsetHeight","afterRowInserted","afterRowAppended","maxNumRowsReached","newHeight","force","beforeRowRemove","removeChild","afterRowRemoved","pop","lastChild","_loadData","records","isInit","insertResult","r","c","rowDataLoaded","_isDataLoaded","initData","dataLoaded","noColumnInfo","tbHead","tbFoot","elemNotTable","tbHeadCellRowNum","tbHeadCellRowButton","extend","_defaultInitOptions","_defaultCallbackContainer","i18n","_defaultTextResources","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","Date","getTime","insertAfter","prependTo","wrap","pendingSkipCol","columnOpt","_defaultColumnOptions","resizable","displayCss","headerSpan","displayTooltip","handles","childnodes","captionTooltip","customFooterButtons","makeCustomBottomButton","sortable","axis","containment","handle","helper","tr","org","helperSelect","orgSelect","update","event","lastIndexOf","originalPosition","top","position","appendRow","initRows","isReady","isDataLoaded","load","insertUniqueIndex","removeRow","emptyGrid","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","findRowIndex","getElementById","blur","afterRowSwapped","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","rowCountName","getCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","subPanelGetter","emptyCriteria","customGetter","customSetter","notSupportMethod","exButton","btnClass","btnCss","btnAttr","rowData","keyName","suffix","adtData","newData","columnName","currentValue","defaultValue","TabStrip","tab","content","tabpane","$header","$tabs","$content","$tabpanes","tabEl","Toolbar","toolbarFloat","toolbarHidden","toolbarFloatOffset","separator","toolbarHeight","_this","opts","wrapper","editor","editable","util","reflow","os","mobile","offset","outerHeight","placeholderEl","addToolItem","itemWidget","addSeparator","main"],"mappings":"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","file":"../skylark-widgets-swt.js","sourcesContent":["define('skylark-widgets-swt/swt',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\tvar ui = skylark.ui = skylark.ui || {};\r\n\t\tsbswt = ui.sbswt = {};\r\n\r\n\tvar CONST = {\r\n\t\tBACKSPACE_KEYCODE: 8,\r\n\t\tCOMMA_KEYCODE: 188, // `,` & `<`\r\n\t\tDELETE_KEYCODE: 46,\r\n\t\tDOWN_ARROW_KEYCODE: 40,\r\n\t\tENTER_KEYCODE: 13,\r\n\t\tTAB_KEYCODE: 9,\r\n\t\tUP_ARROW_KEYCODE: 38\r\n\t};\r\n\r\n\tvar isShiftHeld = function isShiftHeld (e) { return e.shiftKey === true; };\r\n\r\n\tvar isKey = function isKey (keyCode) {\r\n\t\treturn function compareKeycodes (e) {\r\n\t\t\treturn e.keyCode === keyCode;\r\n\t\t};\r\n\t};\r\n\r\n\tvar isBackspaceKey = isKey(CONST.BACKSPACE_KEYCODE);\r\n\tvar isDeleteKey = isKey(CONST.DELETE_KEYCODE);\r\n\tvar isTabKey = isKey(CONST.TAB_KEYCODE);\r\n\tvar isUpArrow = isKey(CONST.UP_ARROW_KEYCODE);\r\n\tvar isDownArrow = isKey(CONST.DOWN_ARROW_KEYCODE);\r\n\r\n\tvar ENCODED_REGEX = /&[^\\s]*;/;\r\n\t/*\r\n\t * to prevent double encoding decodes content in loop until content is encoding free\r\n\t */\r\n\tvar cleanInput = function cleanInput (questionableMarkup) {\r\n\t\t// check for encoding and decode\r\n\t\twhile (ENCODED_REGEX.test(questionableMarkup)) {\r\n\t\t\tquestionableMarkup = $('<i>').html(questionableMarkup).text();\r\n\t\t}\r\n\r\n\t\t// string completely decoded now encode it\r\n\t\treturn $('<i>').text(questionableMarkup).html();\r\n\t};\r\n\r\n\tlangx.mixin(ui, {\r\n\t\tCONST: CONST,\r\n\t\tcleanInput: cleanInput,\r\n\t\tisBackspaceKey: isBackspaceKey,\r\n\t\tisDeleteKey: isDeleteKey,\r\n\t\tisShiftHeld: isShiftHeld,\r\n\t\tisTabKey: isTabKey,\r\n\t\tisUpArrow: isUpArrow,\r\n\t\tisDownArrow: isDownArrow\r\n\t});\r\n\r\n\treturn ui;\r\n\r\n});\r\n\ndefine('skylark-widgets-swt/Widget',[\r\n  \"skylark-widgets-base/Widget\"\r\n],function(Widget){\r\n  return Widget;\r\n});\r\n\ndefine('skylark-widgets-swt/Panel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget){\r\n\r\n  var Panel = Widget.inherit({\r\n    klassName : \"Panel\",\r\n\r\n    pluginName : \"lark.panel\",\r\n\r\n    options : {\r\n      toggler : {\r\n        selector : \".panel-heading [data-toggle=\\\"collapse\\\"]\"\r\n      },\r\n\r\n      body : {\r\n        selector : \".panel-collapse\"\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var self = this;\r\n      this.$toggle = this._velm.find(this.options.toggler.selector);\r\n      this.$body = this._velm.find(this.options.body.selector);\r\n      this.$toggle.on('click.lark',function (e) {\r\n        var $this   = $(this);\r\n        var collpasePlugin    = self.$body.collapse('instance');\r\n        if (collpasePlugin) {\r\n          collpasePlugin.toggle();\r\n        } else {\r\n          self.$body.collapse($this.data());\r\n        }\r\n      });\r\n\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      this.$body.collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      this.$body.collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     this.body.collapse(\"toogle\");\r\n    },\r\n\r\n    full : function() {\r\n\r\n    },\r\n\r\n    unfull : function() {\r\n\r\n    },\r\n\r\n    toogleFull : function() {\r\n\r\n    },\r\n    \r\n    close: function () {\r\n      var panel_dom = this.dom(id);\r\n      this.minimize(id, true).promise().then(function () {\r\n        panel_dom.fadeOut();\r\n      });\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  return Panel;\r\n\r\n});\ndefine('skylark-widgets-swt/Accordion',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"./Panel\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget, Panel){\r\n\r\n  var Accordion = Widget.inherit({\r\n    klassName : \"Accordion\",\r\n\r\n    pluginName : \"lark.accordion\",\r\n\r\n    options : {\r\n      panel: {\r\n        selector : \"> .panel\",\r\n        template : null,\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var panels = [];\r\n      this._velm.$(this.options.panel.selector).forEach(function(panelEl){\r\n        var panel = new Accordion.Panel(panelEl,{\r\n\r\n        });\r\n        panels.push(panel);\r\n      });\r\n      this._panels = panels;\r\n    },\r\n\r\n    _post : function() {\r\n      // handle internal events\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n    },\r\n\r\n    panels : {\r\n      get : function() {\r\n\r\n      }\r\n    },\r\n\r\n\r\n    addPanel : function() {\r\n      var $newPanel = $template.clone();\r\n      $newPanel.find(\".collapse\").removeClass(\"in\");\r\n      $newPanel.find(\".accordion-toggle\").attr(\"href\",  \"#\" + (++hash))\r\n               .text(\"Dynamic panel #\" + hash);\r\n      $newPanel.find(\".panel-collapse\").attr(\"id\", hash).addClass(\"collapse\").removeClass(\"in\");\r\n      $(\"#accordion\").append($newPanel.fadeIn());\r\n\r\n    },\r\n\r\n    /**\r\n     * Removes a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    remove : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expand : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands all accordion panes.\r\n     *\r\n     * @method expandAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expandAll : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapse a accordion pane.\r\n     *\r\n     * @method collapse\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapse : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapses all accordion pane.\r\n     *\r\n     * @method collapseAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapseAll : function() {\r\n\r\n    }\r\n  });\r\n\r\n  Accordion.Panel = Panel.inherit({\r\n    klassName : \"AccordionPanel\",\r\n\r\n    _init : function() {\r\n      //this._velm.collapse();\r\n      this.overrided();\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      $(this._elm).collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      $(this._elm).collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     $(this._elm).collapse(\"toogle\");\r\n    },\r\n\r\n    remove : function() {\r\n      this.overided();\r\n    }\r\n  });\r\n\r\n  return swt.Accordion = Accordion;\r\n});\r\n\ndefine('skylark-widgets-swt/Button',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n\tclass Button extends Widget {\r\n\t\tget klassName() {\r\n      return \"Button\";\r\n    } \r\n\r\n    get pluginName(){\r\n      return \"lark.button\";\r\n    } \r\n\r\n\t\tget options () {\r\n      return {\r\n        btnSize : \"lg\",\r\n        btnType : \"default\",\r\n        leftIcon : null,\r\n        rightIcon : null,\r\n        topIcon : null, // TODO\r\n        bottomIcon : null //TODO        \r\n      }\r\n\t\t}\r\n\r\n    get state() {\r\n      return {\r\n        \"text\" : String\r\n      }\r\n    }\r\n\r\n    _parse (elm,options) {\r\n      var $el = $(elm),\r\n          options = langx.mixin({},options);\r\n\r\n      if (!options.btnType) {\r\n        if ($el.hasClass(\"btn-link\")) {\r\n          options.btnType = \"link\";\r\n        } else if ($el.hasClass(\"btn-default\")) {\r\n          options.btnType = \"default\";\r\n        } else if ($el.hasClass(\"btn-primary\")) {\r\n          options.btnType = \"primary\";\r\n        } else if ($el.hasClass(\"btn-info\")) {\r\n          options.btnType = \"info\";\r\n        } else if ($el.hasClass(\"btn-success\")) {\r\n          options.btnType = \"success\";\r\n        } else if ($el.hasClass(\"btn-warning\")) {\r\n          options.btnType = \"warning\";\r\n        } else if ($el.hasClass(\"btn-danger\")) {\r\n          options.btnType = \"danger\";\r\n        }        \r\n      }\r\n\r\n      if (!options.btnSize) {\r\n        if ($el.hasClass(\"btn-xs\")) {\r\n          options.btnSize = \"xs\";\r\n        } else if ($el.hasClass(\"btn-sm\")) {\r\n          options.btnSize = \"sm\";\r\n        } else if ($el.hasClass(\"btn-lg\")) {\r\n          options.btnSize = \"lg\";\r\n        }        \r\n      }\r\n\r\n      if (!options.href) {\r\n        options.href = $el.attr('href');\r\n\r\n        options.target = $el.attr('target');\r\n      }\r\n\r\n      if (!options.text) {\r\n        options.text = $el.find('.text').text();\r\n      }\r\n\r\n      if (!options.leftIcon) {\r\n        var $fa_icon_left = $el.find('.fa-icon-left');\r\n        if ($fa_icon_left.length > 0) {\r\n          $fa_icon_left.removeClass('fa-icon-left').removeClass('fa');\r\n          options.leftIcon = $fa_icon_left.attr('class');\r\n          $fa_icon_left.addClass('fa-icon-left').addClass('fa');\r\n        }\r\n      }\r\n\r\n      if (!options.rightIcon) {\r\n        var $fa_icon_right = $el.find('.fa-icon-right');\r\n\r\n        if ($fa_icon_right.length > 0) {\r\n          $fa_icon_right.removeClass('fa-icon-right').removeClass('fa');\r\n          options.rightIcon = $fa_icon_right.attr('class');\r\n          $fa_icon_right.addClass('fa-icon-right').addClass('fa');\r\n        }        \r\n      }\r\n    }\r\n\r\n    _refresh (updates) {\r\n      //this.overrided(updates);\r\n      super._refresh(updates);\r\n\r\n      var velm = this._velm;\r\n\r\n      if (updates.btnType) {\r\n          velm.removeClass('btn-link btn-default btn-primary btn-info btn-success btn-warning btn-danger').addClass(\"btn-\" + updates.btnType.value);\r\n      }\r\n\r\n      if (updates.btnSize) {\r\n        velm.removeClass('btn-xs btn-sm btn-lg').addClass(\"btn-\" + updates.btnSize.value);\r\n      }\r\n\r\n      if (updates.text) {\r\n        velm.$('.text').text(updates.text.value);\r\n      }\r\n\r\n      if (updates.left) {\r\n          velm.$('.fa-icon-left').remove();\r\n          velm.prepend('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-left fa-' + updates.iconleft.value + '\">&nbsp;</i>\\n');\r\n      }\r\n\r\n      if (updates.iconright) {\r\n          velm.$('.fa-icon-right').remove();\r\n          if (updates.iconright.value) {\r\n              velm.append('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-right fa-' + updates.iconright.value + '\">&nbsp;</i>\\n');\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  Widget.register(Button);\r\n//  class Buttonx extends Button {\r\n//\r\n//  }\r\n\r\n//  Widget.register(Buttonx,\"lark.button\");\r\n  return swt.Button = Button;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Carousel',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/carousel\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var Carousel =  Widget.inherit({\r\n        klassName : \"Carousel\",\r\n        pluginName : \"lark.carousel\",\r\n\r\n        options : {\r\n\r\n            items : [],\r\n\r\n            indicatorTemplate : \"\",\r\n            slideTemplate : \"\",\r\n\r\n            templates : {\r\n              container : \"<div class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\">\" +\r\n                          \"/div\",\r\n              indicators : {\r\n                  container : \"<ol class=\\\"carousel-indicators\\\">\" +\r\n                              \"</ol>\",\r\n                  item :  \"<li></li>\"\r\n              },\r\n\r\n              slides : {\r\n                  container : \"<div class=\\\"carousel-inner\\\">\" +\r\n                              \"/div\",\r\n                  item :  \"<div class=\\\"item carousel-item\\\">\" +\r\n                            \"<img alt=\\\"First slide\\\"  src=\\\"{{url}}\\\">\" +\r\n                          \"</div>\"\r\n              }\r\n            }\r\n        },\r\n\r\n        _init : function() {\r\n          this._bs_carousel = this._velm.carousel(this.options);\r\n          var self = this;          \r\n          this._velm.on(\"click.lark\", \"[data-slide],[data-slide-to]\", function(e) {\r\n            var $this = $(this)\r\n            var slideIndex = $this.attr('data-slide-to');\r\n            if (slideIndex) {\r\n                self.to(slideIndex);\r\n            } else {\r\n              var slideAction = $this.attr('data-slide');\r\n              if (slideAction == \"prev\") {\r\n                self.prev();\r\n              } else {\r\n                self.next();\r\n              }\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n        });\r\n        },\r\n\r\n        to : function(pos) {\r\n          return this._bs_carousel.to(pos);\r\n        },\r\n\r\n        pause : function(e) {\r\n          this._bs_carousel.pause(e);\r\n          return this;\r\n        },\r\n\r\n        cycle : function(e) {\r\n          return this._bs_carousel.cycle(e);\r\n        },\r\n\r\n        next : function() {\r\n          return this._bs_carousel.next();\r\n        },\r\n\r\n        prev : function() {\r\n          return this._bs_carousel.prev();\r\n        },\r\n\r\n        add : function() {\r\n            \r\n        },\r\n\r\n        createIndicator: function (obj) {\r\n          var gallery = this.gallery,\r\n            indicator = this.indicatorPrototype.cloneNode(false)\r\n          var title = gallery.getItemTitle(obj)\r\n          var thumbnailProperty = this.options.thumbnailProperty\r\n          var thumbnailUrl\r\n          var thumbnail\r\n          if (this.options.thumbnailIndicators) {\r\n            if (thumbnailProperty) {\r\n              thumbnailUrl = Gallery.getItemProperty(obj, thumbnailProperty)\r\n            }\r\n            if (thumbnailUrl === undefined) {\r\n              thumbnail = obj.getElementsByTagName && $(obj).find('img')[0]\r\n              if (thumbnail) {\r\n                thumbnailUrl = thumbnail.src\r\n              }\r\n            }\r\n            if (thumbnailUrl) {\r\n              indicator.style.backgroundImage = 'url(\"' + thumbnailUrl + '\")'\r\n            }\r\n          }\r\n          if (title) {\r\n            indicator.title = title;\r\n          }\r\n          return indicator;\r\n      },\r\n\r\n      addIndicator: function (index) {\r\n        if (this.indicatorContainer.length) {\r\n          var indicator = this.createIndicator(this.list[index])\r\n          indicator.setAttribute('data-slide-to', index)\r\n          this.indicatorContainer[0].appendChild(indicator)\r\n          this.indicators.push(indicator)\r\n        }\r\n      },\r\n\r\n      setActiveIndicator: function (index) {\r\n        if (this.indicators) {\r\n          if (this.activeIndicator) {\r\n            this.activeIndicator.removeClass(this.options.activeIndicatorClass)\r\n          }\r\n          this.activeIndicator = $(this.indicators[index])\r\n          this.activeIndicator.addClass(this.options.activeIndicatorClass)\r\n        }\r\n      },\r\n\r\n      initSlides: function (reload) {\r\n        if (!reload) {\r\n          this.indicatorContainer = this.container.find(\r\n            this.options.indicatorContainer\r\n          )\r\n          if (this.indicatorContainer.length) {\r\n            this.indicatorPrototype = document.createElement('li')\r\n            this.indicators = this.indicatorContainer[0].children\r\n          }\r\n        }\r\n        this.overrided(reload);\r\n      },\r\n\r\n      addSlide: function (index) {\r\n        this.overrided(index);\r\n        this.addIndicator(index)\r\n      },\r\n\r\n      resetSlides: function () {\r\n        this.overrided();\r\n        this.indicatorContainer.empty();\r\n        this.indicators = [];\r\n      },\r\n\r\n    });\r\n\r\n    return swt.Carousel = Carousel;\r\n\r\n});\ndefine('skylark-widgets-swt/_Toggler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var _Toggler = swt._Toggler = Widget.inherit({\r\n    klassName: \"_Toggler\",\r\n\r\n    toggle: function () {\r\n      var checked = this.isChecked();\r\n\r\n      if (checked) {\r\n        this.uncheck();\r\n      } else {\r\n        this.check();\r\n      }\r\n    },\r\n\r\n    check: function  () {\r\n      this.state.set('checked',true);\r\n      return this;\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.state.set('checked',false);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Getter function for the checked state.\r\n     *\r\n     * @method isChecked\r\n     * @return {Boolean} True/false \r\n     */\r\n    isChecked: function () {\r\n      return this.state.get('checked');\r\n    }\r\n  });\r\n\r\n\treturn _Toggler;\r\n});\r\n\ndefine('skylark-widgets-swt/CheckBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var CheckBox =  _Toggler.inherit({\r\n    klassName: \"CheckBox\",\r\n\r\n    pluginName : \"lark.checkbox\",\r\n\r\n    options : {\r\n      selectors : {\r\n        chk : \"input[type=checkbox]\",\r\n        lbl : \"checkbox-label\"\r\n      },\r\n      template : undefined,\r\n      checked : undefined,\r\n      label : undefined,\r\n      value : undefined\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _parse : function(elm,options) {\r\n      options = this.overrided(elm,options);\r\n      var $el = $(elm),\r\n          chkSelector = options.selectors && options.selectors.chk,\r\n          lblSelector = options.selectors && options.selectors.lbl;\r\n\r\n      if (!chkSelector) {\r\n        chkSelector = this.options.selectors.chk;\r\n      }\r\n      if (!lblSelector) {\r\n        lblSelector = this.options.selectors.lbl;\r\n      }\r\n\r\n      var $chk = $el.find(chkSelector),\r\n          $lbl = $el.find(lblSelector);\r\n\r\n      if (options.checked == undefined) {\r\n        options.checked = $chk.prop('checked')\r\n      } else {\r\n        $chk.prop('checked',options.checked);\r\n      }\r\n\r\n      if (options.disabled == undefined) {\r\n        options.disabled = $chk.prop('disabled')\r\n      } else {\r\n        $chk.prop('disabled',options.disabled);\r\n      }\r\n\r\n      return options;\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _create : function() {\r\n      //TODO\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _init : function() {\r\n      var elm = this._elm;\r\n\r\n      // cache elements\r\n      this.$lbl = this._velm.$(this.options.selectors.lbl);\r\n      this.$chk = this._velm.$(this.options.selectors.chk);\r\n    },\r\n\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _startup : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$chk.on('change', function(evt) {\r\n        //var $chk = $(evt.target);\r\n        var checked = self.$chk.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            $chk.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $chk.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $chk.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $chk.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    }\r\n  });\r\n\r\n\treturn swt.CheckBox = CheckBox;\r\n});\r\n\ndefine('skylark-widgets-swt/ComboBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"skylark-bootstrap3/dropdown\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n\r\n\t// COMBOBOX CONSTRUCTOR AND PROTOTYPE\r\n\r\n\tvar ComboBox = Widget.inherit({\r\n\t\tklassName: \"ComboBox\",\r\n\r\n\t\tpluginName : \"lark.combobox\",\r\n\r\n\t\twidgetClass : \"lark-combobox\",\r\n\r\n\t\toptions : {\r\n\r\n\t\t\tautoResizeMenu: true,\r\n\t\t\tfilterOnKeypress: false,\r\n\t\t\tshowOptionsOnKeypress: false,\r\n\t\t\tfilter: function filter (list, predicate, self) {\r\n\t\t\t\tvar visible = 0;\r\n\t\t\t\tself.$dropMenu.find('.empty-indicator').remove();\r\n\r\n\t\t\t\tlist.each(function (i) {\r\n\t\t\t\t\tvar $li = $(this);\r\n\t\t\t\t\tvar text = $(this).text().trim();\r\n\r\n\t\t\t\t\t$li.removeClass();\r\n\r\n\t\t\t\t\tif (text === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-success');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else if (text.substr(0, predicate.length) === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-info');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$li.addClass('hidden');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (visible === 0) {\r\n\t\t\t\t\tself.$dropMenu.append('<li class=\"empty-indicator text-muted\"><em>No Matches</em></li>');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis.$element = $(this._elm);\r\n\r\n\t\t\tthis.$dropMenu = this.$element.find('.dropdown-menu');\r\n\t\t\tthis.$input = this.$element.find('input');\r\n\t\t\tthis.$button = this.$element.find('.btn');\r\n\t\t\tthis.$button.dropdown();\r\n\t\t\tthis.$inputGroupBtn = this.$element.find('.input-group-btn');\r\n\r\n\t\t\tthis.$element.on('click.lark', 'a', langx.proxy(this.itemclicked, this));\r\n\t\t\tthis.$element.on('change.lark', 'input', langx.proxy(this.inputchanged, this));\r\n\t\t\tthis.$element.on('shown.bs.dropdown', langx.proxy(this.menuShown, this));\r\n\t\t\tthis.$input.on('keyup.lark', langx.proxy(this.keypress, this));\r\n\r\n\t\t\t// set default selection\r\n\t\t\tthis.setDefaultSelection();\r\n\r\n\t\t\t// if dropdown is empty, disable it\r\n\t\t\tvar items = this.$dropMenu.children('li');\r\n\t\t\tif( items.length === 0) {\r\n\t\t\t\tthis.$button.addClass('disabled');\r\n\t\t\t}\r\n\r\n\t\t\t// filter on load in case the first thing they do is press navigational key to pop open the menu\r\n\t\t\tif (this.options.filterOnKeypress) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_destroy: function () {\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// remove any external bindings\r\n\t\t\t// [none]\r\n\r\n\t\t\t// set input value attrbute in markup\r\n\t\t\tthis.$element.find('input').each(function () {\r\n\t\t\t\t$(this).attr('value', $(this).val());\r\n\t\t\t});\r\n\r\n\t\t\t// empty elements to return to original markup\r\n\t\t\t// [none]\r\n\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\tdoSelect: function ($item) {\r\n\r\n\t\t\tif (typeof $item[0] !== 'undefined') {\r\n\t\t\t\t// remove selection from old item, may result in remove and\r\n\t\t\t\t// re-addition of class if item is the same\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\r\n\t\t\t\t// add selection to new item\r\n\t\t\t\tthis.$selectedItem = $item;\r\n\t\t\t\tthis.$selectedItem.addClass('selected');\r\n\r\n\t\t\t\t// update input\r\n\t\t\t\tthis.$input.val(this.$selectedItem.text().trim());\r\n\t\t\t} else {\r\n\t\t\t\t// this is a custom input, not in the menu\r\n\t\t\t\tthis.$selectedItem = null;\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclearSelection: function () {\r\n\t\t\tthis.$selectedItem = null;\r\n\t\t\tthis.$input.val('');\r\n\t\t\tthis.$dropMenu.find('li').removeClass('selected');\r\n\t\t},\r\n\r\n\t\tmenuShown: function () {\r\n\t\t\tif (this.options.autoResizeMenu) {\r\n\t\t\t\tthis.resizeMenu();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresizeMenu: function () {\r\n\t\t\tvar width = this.$element.outerWidth();\r\n\t\t\tthis.$dropMenu.outerWidth(width);\r\n\t\t},\r\n\r\n\t\tselectedItem: function () {\r\n\t\t\tvar item = this.$selectedItem;\r\n\t\t\tvar data = {};\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\tvar txt = this.$selectedItem.text().trim();\r\n\t\t\t\tdata = langx.mixin({\r\n\t\t\t\t\ttext: txt\r\n\t\t\t\t}, this.$selectedItem.data());\r\n\t\t\t} else {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: this.$input.val().trim(),\r\n\t\t\t\t\tnotFound: true\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t},\r\n\r\n\t\tselectByText: function (text) {\r\n\t\t\tvar $item = $([]);\r\n\t\t\tthis.$element.find('li').each(function () {\r\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').trim().toLowerCase() === (text || '').trim().toLowerCase()) {\r\n\t\t\t\t\t$item = $(this);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tselectByValue: function (value) {\r\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectByIndex: function (index) {\r\n\t\t\t// zero-based index\r\n\t\t\tvar selector = 'li:eq(' + index + ')';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectBySelector: function (selector) {\r\n\t\t\tvar $item = this.$element.find(selector);\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tsetDefaultSelection: function () {\r\n\t\t\tvar selector = 'li[data-selected=true]:first';\r\n\t\t\tvar item = this.$element.find(selector);\r\n\r\n\t\t\tif (item.length > 0) {\r\n\t\t\t\t// select by data-attribute\r\n\t\t\t\tthis.selectBySelector(selector);\r\n\t\t\t\titem.removeData('selected');\r\n\t\t\t\titem.removeAttr('data-selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenable: function () {\r\n\t\t\tthis.$element.removeClass('disabled');\r\n\t\t\tthis.$input.removeAttr('disabled');\r\n\t\t\tthis.$button.removeClass('disabled');\r\n\t\t},\r\n\r\n\t\tdisable: function () {\r\n\t\t\tthis.$element.addClass('disabled');\r\n\t\t\tthis.$input.attr('disabled', true);\r\n\t\t\tthis.$button.addClass('disabled');\r\n\t\t},\r\n\r\n\t\titemclicked: function (e) {\r\n\t\t\tthis.$selectedItem = $(e.target).parent();\r\n\r\n\t\t\t// set input text and trigger input change event marked as synthetic\r\n\t\t\tthis.$input.val(this.$selectedItem.text().trim()).trigger('change', {\r\n\t\t\t\tsynthetic: true\r\n\t\t\t});\r\n\r\n\t\t\t// pass object including text and any data-attributes\r\n\t\t\t// to onchange event\r\n\t\t\tvar data = this.selectedItem();\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\t// return focus to control after selecting an option\r\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\r\n\t\t},\r\n\r\n\t\tkeypress: function (e) {\r\n\t\t\tvar ENTER = 13;\r\n\t\t\t//var TAB = 9;\r\n\t\t\tvar ESC = 27;\r\n\t\t\tvar LEFT = 37;\r\n\t\t\tvar UP = 38;\r\n\t\t\tvar RIGHT = 39;\r\n\t\t\tvar DOWN = 40;\r\n\r\n\t\t\tvar IS_NAVIGATIONAL = (\r\n\t\t\t\te.which === UP ||\r\n\t\t\t\te.which === DOWN ||\r\n\t\t\t\te.which === LEFT ||\r\n\t\t\t\te.which === RIGHT\r\n\t\t\t);\r\n\r\n\t\t\tif(this.options.showOptionsOnKeypress && !this.$inputGroupBtn.hasClass('open')){\r\n\t\t\t\tthis.$button.dropdown('toggle');\r\n\t\t\t\tthis.$input.focus();\r\n\t\t\t}\r\n\r\n\t\t\tif (e.which === ENTER) {\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar selected = this.$dropMenu.find('li.selected').text().trim();\r\n\t\t\t\tif(selected.length > 0){\r\n\t\t\t\t\tthis.selectByText(selected);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.selectByText(this.$input.val());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (e.which === ESC) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.clearSelection();\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (this.options.showOptionsOnKeypress) {\r\n\t\t\t\tif (e.which === DOWN || e.which === UP) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar $selected = this.$dropMenu.find('li.selected');\r\n\t\t\t\t\tif ($selected.length > 0) {\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = $selected.next(':not(.hidden)');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = $selected.prev(':not(.hidden)');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($selected.length === 0){\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):first');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):last');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.doSelect($selected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid filtering on navigation key presses\r\n\t\t\tif (this.options.filterOnKeypress && !IS_NAVIGATIONAL) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.previousKeyPress = e.which;\r\n\t\t},\r\n\r\n\t\tinputchanged: function (e, extra) {\r\n\t\t\tvar val = $(e.target).val();\r\n\t\t\t// skip processing for internally-generated synthetic event\r\n\t\t\t// to avoid double processing\r\n\t\t\tif (extra && extra.synthetic) {\r\n\t\t\t\tthis.selectByText(val);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.selectByText(val);\r\n\r\n\t\t\t// find match based on input\r\n\t\t\t// if no match, pass the input value\r\n\t\t\tvar data = this.selectedItem();\r\n\t\t\tif (data.text.length === 0) {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: val\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\tComboBox.prototype.getValue = ComboBox.prototype.selectedItem;\r\n\r\n\r\n\r\n\treturn swt.ComboBox = ComboBox;\r\n});\r\n\ndefine('skylark-widgets-swt/TextBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var SyncAttrs = [\r\n    'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n    'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n  ];\r\n\r\n\tvar TextBox =  swt.TextBox = Widget.inherit({\r\n\t\tklassName: \"TextBox\",\r\n\r\n    pluginName: \"lark.textbox\",\r\n\r\n    /*\r\n     * Parse options from attached dom element.\r\n     * @override\r\n     */\r\n    _parse : function() {\r\n      var  velm = this._velm;\r\n\r\n      // get multiline option\r\n      this.options.multiline = velm.is(\"textarea\");\r\n      \r\n      // get current state of input\r\n      var value = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n      this.state.set(\"value\",value);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    /*\r\n     * Create a new  dom element for this widget\r\n     * @override\r\n     */\r\n    _create : function() {\r\n      var tagName = \"input\",attrs = {},\r\n          options = this.options;\r\n\r\n      langx.each([\r\n        'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n        'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n      ], function (name) {\r\n        attrs[name] = options[name];\r\n      });\r\n\r\n      if (options.multiline) {\r\n        tagName = \"textarea\"\r\n      } \r\n      if (options.subtype) {\r\n        attrs.type = options.subtype;\r\n      }\r\n      this._elm = this._dom.noder.createElement(tagName,attrs);\r\n    },\r\n\r\n    /*\r\n     * Init this widget\r\n     * @override\r\n     */\r\n    _init : function() {\r\n    },\r\n\r\n    /*\r\n     * Sync dom element to widget state \r\n     * @override\r\n     */\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this._velm.on('change', function(evt) {\r\n        var value = self._velm.prop('value');\r\n        self.state.set(\"value\",value);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n        var self  = this;\r\n\r\n        if (updates[\"value\"] !== undefined) {\r\n          if (self._velm.value() !== e.value) {\r\n            self._velm.value(updates.value);\r\n          }\r\n        }\r\n        if (updates[\"disabled\"] !== undefined) {\r\n          self._velm.disable(updates[\"disabled\"]);\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n    },\r\n\r\n  });\r\n\r\n\treturn TextBox;\r\n});\r\n\r\n\n define('skylark-widgets-swt/Listing',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n    var Listing = Widget.inherit({\r\n        klassName : \"Listing\",\r\n\r\n        pluginName : \"lark.listing\",\r\n\r\n        options : {\r\n        \tmultiSelect: false,\r\n        \t//multiTier : false,\r\n\r\n          multiTier : {\r\n            mode   : \"\",  // \"tree\" or \"accordion\" or \"popup\"\r\n            levels : 2,\r\n            selectors :  {\r\n              children : \"> ul\",  // \"> .list-group\"\r\n              hasChildren : \":has(ul)\"\r\n            },\r\n            classes : {\r\n              expandIcon: 'glyphicon glyphicon-plus',    // \"glyphicon-chevron-down\"\r\n              collapseIcon: 'glyphicon glyphicon-minus', // \"glyphicon-chevron-right\"\r\n              children : \"\"                              // \"list-group children\"\r\n            },\r\n            templates : {\r\n              tree : {\r\n                item : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n                itemGroup: \"\"\r\n\r\n              }\r\n                            \r\n            }\r\n          },\r\n\r\n        \ttoggle : false,\r\n        \tclasses : {\r\n          \tactive : \"active\"\r\n        \t},\r\n        \tselectors : {\r\n          \titem : \"li\"                   // \".list-group-item\"\r\n        \t},\r\n        \tselected : 0\r\n        },\r\n\r\n        state : {\r\n          selected : Object\r\n        },\r\n\r\n        _init : function() {\r\n            this.overrided();\r\n            var self = this,\r\n                velm = this._velm,\r\n                itemSelector = this.options.selectors.item;\r\n\r\n            this._$items = velm.$(itemSelector);\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = self._elmx(this);\r\n\r\n                if (!veItem.hasClass('disabled')) {\r\n                  var value = veItem.data(\"value\");\r\n                  if (value === undefined) {\r\n                    value = self._$items.index(this);\r\n                  }\r\n                  self.state.set(\"selected\",value);\r\n                }\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n            this.state.set(\"selected\",this.options.selected);\r\n\r\n            var $this = velm,\r\n                $toggle = this.options.toggle,\r\n                multiTierMode = this.options.multiTier.mode,\r\n                obj = this;\r\n\r\n            if (multiTierMode == \"tree\") {\r\n                 $this.query(this.options.selectors.item).each(function(){\r\n                   if($(this).is(self.options.multiTier.selectors.hasChildren)) {\r\n                      var children = $(this).find(' > ul');\r\n                      $(children).remove();\r\n                      text = $(this).text().trim();\r\n                      $(this).html(self.options.multiTier.templates.tree.item);\r\n                      $(this).find(' > span > i').addClass('glyphicon-folder-open');\r\n                      $(this).find(' > span > a').text(text);\r\n                      $(this).append(children);\r\n                    }  else {\r\n                      text = $(this).text().trim();\r\n                      $(this).html(self.options.multiTier.templates.tree.item);\r\n                      $(this).find(' > span > i').addClass('glyphicon-file');\r\n                      $(this).find(' > span > a').text(text);\r\n                  }\r\n\r\n                 });\r\n            }\r\n\r\n            //if (this.isIE() <= 9) {\r\n            //    $this.find(\"li.active\").has(\"ul\").children(\"ul\").collapse(\"show\");\r\n            //    $this.find(\"li\").not(\".active\").has(\"ul\").children(\"ul\").collapse(\"hide\");\r\n            //} else {\r\n                $this.query(\"li.active\").has(\"ul\").children(\"ul\").addClass(\"collapse in\");\r\n                $this.query(\"li\").not(\".active\").has(\"ul\").children(\"ul\").addClass(\"collapse\");\r\n            //}\r\n\r\n\r\n\r\n\r\n            $this.query(\"li\").has(\"ul\").find(\"a\").on(\"click\" + \".\" + this.pluginName, function(e) {\r\n                e.preventDefault();\r\n\r\n                $(this).closest(\"li\").toggleClass(\"active\").children(\"ul\").collapse(\"toggle\");\r\n\r\n                if ($toggle) {\r\n                    $(this).closest(\"li\").siblings().removeClass(\"active\").children(\"ul.in\").collapse(\"hide\");\r\n                }\r\n\r\n            });\r\n\r\n\r\n        },\r\n\r\n        _refresh : function(updates) {\r\n          this.overrided(updates);\r\n          var self  = this;\r\n\r\n          function findItem(valueOrIdx) {\r\n            var $item;\r\n            if (langx.isNumber(valueOrIdx)) {\r\n              $item = self._$items.eq(valueOrIdx);\r\n            } else {\r\n              $item = self._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n            }\r\n            return $item;\r\n          } \r\n                 \r\n          function selectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).addClass(self.options.classes.active);\r\n          }\r\n\r\n          function unselectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).removeClass(self.options.classes.active);\r\n          }\r\n\r\n          if (updates[\"selected\"]) {\r\n            if (this.options.multiSelect) {\r\n            } else {\r\n              unselectOneItem(updates[\"selected\"].oldValue);\r\n              selectOneItem(updates[\"selected\"].value);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n  });\r\n\r\n  return swt.Listing = Listing;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Pagination',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n    var Pagination = swt.Pagination = Widget.inherit({\r\n        klassName : \"Pagination\",\r\n\r\n        pluginName : \"lark.pagination\",\r\n\r\n        options : {\r\n            tagName : \"ul\",\r\n            css : \"\",\r\n            selectors : {\r\n                firstNavi : \"li[aria-label='first']\",\r\n                prevNavi : \"li[aria-label='prev']\",\r\n                nextNavi : \"li[aria-label='next']\",\r\n                lastNavi : \"li[aria-label='last']\",\r\n                numericNavi : \"li:not([aria-label])\",\r\n                numericTxt  : \"a\"\r\n            },\r\n            totalPages: 7,\r\n            maxButtonsVisible: 5,\r\n            currentPage: 1     \r\n        },\r\n\r\n        state : {\r\n            totalPages : Number,\r\n            currentPage : Number\r\n        },\r\n\r\n        _parse : function(elm,options) {\r\n\r\n        },\r\n        \r\n        _create : function(self) {\r\n        },\r\n\r\n        _init : function() {\r\n          this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n          this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n          this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n          this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n          this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n          var self = this;\r\n\r\n          function checkCanAction(elm) {\r\n            var $elm = $(elm);\r\n            if ($elm.is(\".disabled,.active\")) {\r\n              return false;\r\n            } else {\r\n              return $elm;\r\n            }\r\n          }\r\n\r\n          this.$first.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(1);\r\n          });\r\n\r\n          this.$prev.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()-1);\r\n          });\r\n\r\n          this.$last.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.totalPages());\r\n          });\r\n\r\n          this.$next.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()+1);\r\n          });\r\n\r\n          this.$numeric.click(function(){\r\n            var ret = checkCanAction(this)\r\n            if (!ret) {\r\n              return;\r\n            }\r\n            var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n                pageNo = parseInt(numeric);\r\n            self.currentPage(pageNo);\r\n\r\n          });\r\n\r\n          this.state.set(\"currentPage\",this.options.currentPage);\r\n          this.state.set(\"totalPages\",this.options.totalPages);\r\n\r\n          this.overrided();\r\n        },\r\n\r\n        _refresh: function (updates) {\r\n          this.overrided(updates);\r\n          var self = this;\r\n\r\n          function changePageNoBtns(currentPage,totalPages) {\r\n\r\n            // Create the numeric buttons.\r\n            // Variable of number control in the buttons.\r\n            var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n            var begin = 1;\r\n            var end = begin + totalPageNoBtns - 1;\r\n\r\n            /*\r\n             * Align the values in the begin and end variables if the user has the\r\n             * possibility that select a page that doens't appear in the paginador.\r\n             * e.g currentPage = 1, and user go to the 20 page.\r\n             */\r\n            while ((currentPage < begin) || (currentPage > end)) {\r\n              if (currentPage > end) {\r\n                 begin += totalPageNoBtns;\r\n                 end += totalPageNoBtns;\r\n\r\n                 if (end > totalPages) {\r\n                   begin = begin - (end - totalPages);\r\n                   end = totalPages;\r\n                 }\r\n               } else {\r\n                 begin -= totalPageNoBtns;\r\n                 end -= totalPageNoBtns;\r\n\r\n                 if (begin < 0) {\r\n                   end = end + (begin + totalPageNoBtns);\r\n                   begin = 1;\r\n                 }\r\n               }\r\n            }\r\n           /*\r\n            * Verify if the user clicks in the last page show by paginator.\r\n            * If yes, the paginator advances.\r\n            */\r\n            if ((currentPage === end) && (totalPages != 1)) {\r\n              begin = currentPage - 1;\r\n              end = begin + totalPageNoBtns - 1;\r\n\r\n              if (end >= totalPages) {\r\n                begin = begin - (end - (totalPages));\r\n                end = totalPages;\r\n              }\r\n            }\r\n\r\n            /*\r\n             * Verify it the user clicks in the first page show by paginator.\r\n             * If yes, the paginator retrogress\r\n             */\r\n             if ((begin === currentPage) && (totalPages != 1)) {\r\n               if (currentPage != 1) {\r\n                 end = currentPage + 1;\r\n                 begin = end - (totalPageNoBtns - 1);\r\n               }\r\n             }\r\n\r\n             var count = self.$numeric.size(),\r\n                 visibles = end-begin + 1,\r\n                 i = 0;\r\n\r\n             self.$numeric.filter(\".active\").removeClass(\"active\");\r\n             while (i<visibles) {\r\n               var pageNo = i + begin,\r\n                   $btn = self.$numeric.eq(i);\r\n               $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n               if (pageNo == currentPage) {\r\n                $btn.addClass(\"active\");\r\n               }\r\n               i++;\r\n             }\r\n             while (i<count) {\r\n               self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n               i++;\r\n             }\r\n\r\n\r\n          }\r\n\r\n          function changeLabeldBtns(currentPage,totalPages) {\r\n            if (currentPage < 1) {\r\n              throw('Page can\\'t be less than 1');\r\n            } else if (currentPage > totalPages) {\r\n              throw('Page is bigger than total pages');\r\n            }\r\n\r\n            if (totalPages < 1) {\r\n              throw('Total Pages can\\'t be less than 1');\r\n            }\r\n\r\n            if (currentPage == 1 ) {\r\n              self.$first.addClass(\"disabled\");\r\n              self.$prev.addClass(\"disabled\");\r\n            } else {\r\n              self.$first.removeClass(\"disabled\");\r\n              self.$prev.removeClass(\"disabled\");\r\n            }\r\n\r\n            if (currentPage == totalPages ) {\r\n              self.$last.addClass(\"disabled\");\r\n              self.$next.addClass(\"disabled\");\r\n            } else {\r\n              self.$last.removeClass(\"disabled\");\r\n              self.$next.removeClass(\"disabled\");\r\n            }\r\n          }\r\n\r\n          if (updates.currentPage || updates.totalPages) {\r\n            var currentPage = self.currentPage(),\r\n                totalPages = self.totalPages();\r\n\r\n            changePageNoBtns(currentPage,totalPages);\r\n            changeLabeldBtns(currentPage,totalPages);\r\n          }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return Pagination;\r\n});\ndefine('skylark-widgets-swt/Progress',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n     var Progress = swt.Progress = Widget.inherit({\r\n     \tklassName : \"Progress\",\r\n\r\n     \tpluginName : \"lark.progress\",\r\n\r\n     \toptions : {\r\n     \t\tselectors : {\r\n     \t\t\tbar : \"progress-bar\"\r\n     \t\t},\r\n     \t\tmin : 0,\r\n     \t\tmax : 100\r\n     \t},\r\n\r\n     \tstate : {\r\n     \t\tvalue : Number\r\n     \t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis._vbar = this._velm.find(this.options.selectors.bar);\r\n\t\t\tthis.value(this.options.min);\r\n\t\t},\r\n\r\n\t\t_refresh : function() {\r\n\t        this.overrided(changed);\r\n\t        var self  = this;\r\n\r\n\t        if (updates[\"value\"] !== undefined) {\r\n\t        \tvar value = updates[\"value\"],\r\n\t        \t\tmin = this.options.min,\r\n\t        \t\tmax = this.options.max;\r\n\r\n\t\t\t\tthis._vbar.css(\"width\",(value-min)/(max-min)*100+\"%\");\r\n\t        }\r\n\t\t},\r\n\r\n\t\tstart : function(max){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideDown();\r\n\t\t},\r\n\r\n\t\tincrease : function(tick){\r\n\t\t\tvar value = this.value();\r\n\t\t\tthis.value(value += tick*1.0);\r\n\t\t},\r\n\r\n\t\tfinish : function(){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideUp();\r\n\t\t}     \t\r\n     });\r\n\r\n\treturn Progress;\r\n\t\r\n });\ndefine('skylark-widgets-swt/Radio',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var Radio = swt.Radio = _Toggler.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"lark.radio\",\r\n\r\n    _parse : function() {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      this.state.set(\"checked\",checked);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    _init : function() {\r\n      //this.options = langx.mixin({}, $.fn.checkbox.defaults, options);\r\n      var element = this.domNode;\r\n      var $element = $(element);\r\n\r\n      if (element.tagName.toLowerCase() !== 'label') {\r\n        logError('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$radio = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        logError('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$radio.on('change', function(evt) {\r\n        //var $radio = $(evt.target);\r\n        var checked = self.$radio.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            // reset all items in group\r\n            this.resetGroup();\r\n\r\n            $radio.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $radio.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $radio.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $radio.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    },\r\n\r\n    resetGroup: function resetGroup () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    }\r\n  });\r\n\r\n  return Radio;\r\n});\r\n\r\n\ndefine('skylark-widgets-swt/SearchBox',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-dom/browser\",\n  \"skylark-utils-dom/eventer\",\n  \"skylark-utils-dom/noder\",\n  \"skylark-utils-dom/geom\",\n  \"skylark-utils-dom/query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SEARCH CONSTRUCTOR AND PROTOTYPE\n\n\tvar SearchBox = Widget.inherit({\n\t\tklassName: \"SearchBox\",\n\n\t\tpluginName: \"lark.searchbox\",\n\n\t\toptions : {\n\t\t\tclearOnEmpty: false,\n\t\t\tsearchOnKeyPress: false,\n\t\t\tallowCancel: false\n\t\t},\n\t\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\tthis.$repeater = this.$element.closest('.repeater');\n\n\t\t\tif (this.$element.attr('data-searchOnKeyPress') === 'true'){\n\t\t\t\tthis.options.searchOnKeyPress = true;\n\t\t\t}\n\n\t\t\tthis.$button = this.$element.find('button');\n\t\t\tthis.$input = this.$element.find('input');\n\t\t\tthis.$icon = this.$element.find('.glyphicon, .fuelux-icon');\n\n\t\t\tthis.$button.on('click.fu.search', langx.proxy(this.buttonclicked, this));\n\t\t\tthis.$input.on('keyup.fu.search', langx.proxy(this.keypress, this));\n\n\t\t\tif (this.$repeater.length > 0) {\n\t\t\t\tthis.$repeater.on('rendered.fu.repeater', langx.proxy(this.clearPending, this));\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t},\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// set input value attrbute\n\t\t\tthis.$element.find('input').each(function () {\n\t\t\t\t$(this).attr('value', $(this).val());\n\t\t\t});\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tsearch: function (searchText) {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-search').addClass('glyphicon-remove');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-search').addClass('fuelux-icon-remove');\n\t\t\t}\n\n\t\t\tthis.activeSearch = searchText;\n\t\t\tthis.$element.addClass('searched pending');\n\t\t\tthis.$element.trigger('searched.fu.search', searchText);\n\t\t},\n\n\t\tclear: function () {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-remove').addClass('glyphicon-search');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-remove').addClass('fuelux-icon-search');\n\t\t\t}\n\n\t\t\tif (this.$element.hasClass('pending')) {\n\t\t\t\tthis.$element.trigger('canceled.fu.search');\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t\tthis.$input.val('');\n\t\t\tthis.$element.trigger('cleared.fu.search');\n\t\t\tthis.$element.removeClass('searched pending');\n\t\t},\n\n\t\tclearPending: function () {\n\t\t\tthis.$element.removeClass('pending');\n\t\t},\n\n\t\taction: function () {\n\t\t\tvar val = this.$input.val();\n\n\t\t\tif (val && val.length > 0) {\n\t\t\t\tthis.search(val);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t},\n\n\t\tbuttonclicked: function (e) {\n\t\t\te.preventDefault();\n\t\t\tif ($(e.currentTarget).is('.disabled, :disabled')) return;\n\n\t\t\tif (this.$element.hasClass('pending') || this.$element.hasClass('searched')) {\n\t\t\t\tthis.clear();\n\t\t\t} else {\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function (e) {\n\t\t\tvar ENTER_KEY_CODE = 13;\n\t\t\tvar TAB_KEY_CODE = 9;\n\t\t\tvar ESC_KEY_CODE = 27;\n\n\t\t\tif (e.which === ENTER_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.action();\n\t\t\t} else if (e.which === TAB_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t} else if (e.which === ESC_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.clear();\n\t\t\t} else if (this.options.searchOnKeyPress) {\n\t\t\t\t// search on other keypress\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$input.attr('disabled', 'disabled');\n\n\t\t\tif (!this.options.allowCancel) {\n\t\t\t\tthis.$button.addClass('disabled');\n\t\t\t}\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$input.removeAttr('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t}\n\t});\n\n\treturn \tswt.SearchBox = SearchBox;\n});\n\ndefine('skylark-widgets-swt/SelectList',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-dom/browser\",\n  \"skylark-utils-dom/eventer\",\n  \"skylark-utils-dom/noder\",\n  \"skylark-utils-dom/geom\",\n  \"skylark-utils-dom/query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SELECT CONSTRUCTOR AND PROTOTYPE\n\n\tvar SelectList = Widget.inherit({\n\t\tklassName: \"SelectList\",\n\n\t\tpluginName : \"lark.selectlist\",\n\t\n\t\toptions : {\n\t\t\temptyLabelHTML: '<li data-value=\"\"><a href=\"#\">No items</a></li>'\n\n\t\t},\n\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\t//this.options = langx.mixin({}, $.fn.selectlist.defaults, options);\n\n\n\t\t\tthis.$button = this.$element.find('.btn.dropdown-toggle');\n\t\t\tthis.$hiddenField = this.$element.find('.hidden-field');\n\t\t\tthis.$label = this.$element.find('.selected-label');\n\t\t\tthis.$dropdownMenu = this.$element.find('.dropdown-menu');\n\n\t\t\tthis.$button.dropdown();\n\n\t\t\tthis.$element.on('click.fu.selectlist', '.dropdown-menu a', langx.proxy(this.itemClicked, this));\n\t\t\tthis.setDefaultSelection();\n\n\t\t\tif (this.options.resize === 'auto' || this.$element.attr('data-resize') === 'auto') {\n\t\t\t\tthis.resize();\n\t\t\t}\n\n\t\t\t// if selectlist is empty or is one item, disable it\n\t\t\tvar items = this.$dropdownMenu.children('li');\n\t\t\tif( items.length === 0) {\n\t\t\t\tthis.disable();\n\t\t\t\tthis.doSelect( $(this.options.emptyLabelHTML));\n\t\t\t}\n\n\t\t\t// support jumping focus to first letter in dropdown when key is pressed\n\t\t\tthis.$element.on('shown.bs.dropdown', function () {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t// attach key listener when dropdown is shown\n\t\t\t\t\t$(document).on('keypress.fu.selectlist', function(e){\n\n\t\t\t\t\t\t// get the key that was pressed\n\t\t\t\t\t\tvar key = String.fromCharCode(e.which);\n\t\t\t\t\t\t// look the items to find the first item with the first character match and set focus\n\t\t\t\t\t\t$this.find(\"li\").each(function(idx,item){\n\t\t\t\t\t\t\tif ($(item).text().charAt(0).toLowerCase() === key) {\n\t\t\t\t\t\t\t\t$(item).children('a').focus();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// unbind key event when dropdown is hidden\n\t\t\tthis.$element.on('hide.bs.dropdown', function () {\n\t\t\t\t\t$(document).off('keypress.fu.selectlist');\n\t\t\t});\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tdoSelect: function ($item) {\n\t\t\tvar $selectedItem;\n\t\t\tthis.$selectedItem = $selectedItem = $item;\n\n\t\t\tthis.$hiddenField.val(this.$selectedItem.attr('data-value'));\n\t\t\tthis.$label.html($(this.$selectedItem.children()[0]).html());\n\n\t\t\t// clear and set selected item to allow declarative init state\n\t\t\t// unlike other controls, selectlist's value is stored internal, not in an input\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ($selectedItem.is($(this))) {\n\t\t\t\t\t$(this).attr('data-selected', true);\n\t\t\t\t} else {\n\t\t\t\t\t$(this).removeData('selected').removeAttr('data-selected');\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\titemClicked: function (e) {\n\t\t\tthis.$element.trigger('clicked.fu.selectlist', this.$selectedItem);\n\n\t\t\te.preventDefault();\n\t\t\t// ignore if a disabled item is clicked\n\t\t\tif ($(e.currentTarget).parent('li').is('.disabled, :disabled')) { return; }\n\n\t\t\t// is clicked element different from currently selected element?\n\t\t\tif (!($(e.target).parent().is(this.$selectedItem))) {\n\t\t\t\tthis.itemChanged(e);\n\t\t\t}\n\n\t\t\t// return focus to control after selecting an option\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\n\t\t},\n\n\t\titemChanged: function (e) {\n\t\t\t//selectedItem needs to be <li> since the data is stored there, not in <a>\n\t\t\tthis.doSelect($(e.target).closest('li'));\n\n\t\t\t// pass object including text and any data-attributes\n\t\t\t// to onchange event\n\t\t\tvar data = this.selectedItem();\n\t\t\t// trigger changed event\n\t\t\tthis.$element.trigger('changed.fu.selectlist', data);\n\t\t},\n\n\t\tresize: function () {\n\t\t\tvar width = 0;\n\t\t\tvar newWidth = 0;\n\t\t\tvar sizer = $('<div/>').addClass('selectlist-sizer');\n\n\n\t\t\tif (Boolean($(document).find('html').hasClass('fuelux'))) {\n\t\t\t\t// default behavior for fuel ux setup. means fuelux was a class on the html tag\n\t\t\t\t$(document.body).append(sizer);\n\t\t\t} else {\n\t\t\t\t// fuelux is not a class on the html tag. So we'll look for the first one we find so the correct styles get applied to the sizer\n\t\t\t\t$('.fuelux:first').append(sizer);\n\t\t\t}\n\n\t\t\tsizer.append(this.$element.clone());\n\n\t\t\tthis.$element.find('a').each(function () {\n\t\t\t\tsizer.find('.selected-label').text($(this).text());\n\t\t\t\tnewWidth = sizer.find('.selectlist').outerWidth();\n\t\t\t\tnewWidth = newWidth + sizer.find('.sr-only').outerWidth();\n\t\t\t\tif (newWidth > width) {\n\t\t\t\t\twidth = newWidth;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (width <= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$button.css('width', width);\n\t\t\tthis.$dropdownMenu.css('width', width);\n\n\t\t\tsizer.remove();\n\t\t},\n\n\t\tselectedItem: function () {\n\t\t\tvar txt = this.$selectedItem.text();\n\t\t\treturn langx.mixin({\n\t\t\t\ttext: txt\n\t\t\t}, this.$selectedItem.data());\n\t\t},\n\n\t\tselectByText: function (text) {\n\t\t\tvar $item = $([]);\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').toLowerCase() === (text || '').toLowerCase()) {\n\t\t\t\t\t$item = $(this);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tselectByValue: function (value) {\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectByIndex: function (index) {\n\t\t\t// zero-based index\n\t\t\tvar selector = 'li:eq(' + index + ')';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectBySelector: function (selector) {\n\t\t\tvar $item = this.$element.find(selector);\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tsetDefaultSelection: function () {\n\t\t\tvar $item = this.$element.find('li[data-selected=true]').eq(0);\n\n\t\t\tif ($item.length === 0) {\n\t\t\t\t$item = this.$element.find('li').has('a').eq(0);\n\t\t\t}\n\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$button.addClass('disabled');\n\t\t}\n\n\t});\t\n\n\n\tSelectList.prototype.getValue = SelectList.prototype.selectedItem;\n\n\n\n\treturn swt.SelectList = SelectList;\n});\n\ndefine('skylark-widgets-swt/Tabular',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n        _showEmptyMessage : function (settings, skipWidthCalculation) {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n            $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n            if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n                // Check scrolling enabled\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    // Set the width of empty message cell to the thead width\r\n                    $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n                }\r\n            }\r\n        },  \r\n\r\n        _calculateColumnWidth : function () {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $tbWhole = $('table.body', tbWrap);\r\n            var $scroller = $('div.scroller', tbWrap);\r\n            var settings = $tbWhole.data('appendGrid');\r\n            var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n            var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n            // Check any rows within the grid\r\n            if (settings._rowOrder.length > 0) {\r\n                // Reset the table/column width\r\n                $('td', tbHeadRow).width('auto');\r\n                $('col', tbColGp).width('auto');\r\n                $tbWhole.width('auto');\r\n                $scroller.width('auto');\r\n                // Check the total number of columns\r\n                var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n                var marginThreshold = -2;\r\n                if ($.fn.modal) {\r\n                    // If bootstrap is loaded, cell margin was reset\r\n                    marginThreshold = 1;\r\n                }\r\n                var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n                for (var z = 0; z < colLimit; z++) {\r\n                    var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                    var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                    if (bodyCellWidth > headCellWidth) {\r\n                        tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                    } else {\r\n                        tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n            }\r\n            // Set the width of footer row\r\n            $('table.foot', tbWrap).width($tbWhole.width());\r\n            // Check the scroll panel width\r\n            $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n        },\r\n\r\n\r\n        _createGridButton : function (param, uiIcon) {\r\n            // Generate the standard grid action button based on its parameter.\r\n            var genButton = null;\r\n            if (param) {\r\n                if (langx.isFunction(param)) {\r\n                    // Generate button if it is a function.\r\n                    genButton = $(param());\r\n                } else if (param.nodeType) {\r\n                    // Clone the button if it is a DOM element.\r\n                    genButton = $(param).clone();\r\n                } else if (param.icon || param.label) {\r\n                    // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                    genButton = $('<button/>').attr({ type: 'button' });\r\n                    genButton.plugin(\"lark.button\",param);\r\n                }\r\n            }\r\n            if (!genButton) {\r\n                // Use default setting (jQuery UI Button) if button is not created.\r\n                genButton = $('<button/>').attr({ type: 'button' });\r\n                genButton.plugin(\"lark.button\",{ icon: uiIcon, showLabel: false });\r\n            }\r\n            return genButton;\r\n        },\r\n\r\n        _sortSequence : function (startIndex) {\r\n            var tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (!settings.hideRowNumColumn) {\r\n                for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                    $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        _emptyGrid : function () {\r\n            var tbWhole = this._elm;\r\n\r\n            // Load settings\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Remove rows\r\n            $('tbody', tbWhole).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Add empty row\r\n            this._showEmptyMessage(settings);\r\n        },        \r\n\r\n        _gridRowDragged : function (isMoveUp, uniqueIndex, tbRowIndex) {\r\n            var tbWhole = this._elm;\r\n\r\n            // Get setting\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Find the start sorting index\r\n            var startIndex = -1;\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    if (isMoveUp) {\r\n                        startIndex = tbRowIndex;\r\n                        settings._rowOrder.splice(z, 1);\r\n                        settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                    } else {\r\n                        startIndex = z;\r\n                        settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                        settings._rowOrder.splice(z, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // Do re-order\r\n            this._sortSequence( startIndex);\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n\r\n            // Trigger event\r\n            if (langx.isFunction(settings.afterRowDragged)) {\r\n                settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n            }\r\n        },\r\n\r\n       _saveSetting : function (settings) {\r\n            var tbWhole = this._elm;\r\n\r\n            $(tbWhole).data('appendGrid', settings);\r\n            $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n        },\r\n\r\n\r\n        _checkGridAndGetSettings : function (noMsg) {\r\n            // Check the jQuery grid object is initialized and return its settings\r\n\r\n            var settings = null,\r\n                $grid = $(this._elm);\r\n\r\n            if ($grid.length == 1) {\r\n                settings = $grid.data('appendGrid');\r\n                if (!settings && !noMsg) {\r\n                    alert(_systemMessages.notInit);\r\n                }\r\n            } else if (!noMsg) {\r\n                alert(_systemMessages.getValueMultiGrid);\r\n            }\r\n            return settings;\r\n        },\r\n\r\n        _insertRow : function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            // Define variables\r\n            var self = this,\r\n                tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n            var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maxBodyHeight > 0) {\r\n                tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n            }\r\n            // Check number of row to be inserted\r\n            var numOfRow = numOfRowOrRowArray, loadData = false;\r\n            if (langx.isArray(numOfRowOrRowArray)) {\r\n                numOfRow = numOfRowOrRowArray.length;\r\n                loadData = true;\r\n            }\r\n            // Check parent row\r\n            if (langx.isNumeric(callerUniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                        rowIndex = z;\r\n                        if (z != 0) parentIndex = z - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (langx.isNumeric(rowIndex)) {\r\n                if (rowIndex >= settings._rowOrder.length) {\r\n                    rowIndex = null;\r\n                } else {\r\n                    parentIndex = rowIndex - 1;\r\n                }\r\n            }\r\n            else if (settings._rowOrder.length != 0) {\r\n                rowIndex = null;\r\n                parentIndex = settings._rowOrder.length - 1;\r\n            }\r\n            // Store old grid height\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                $('tr.empty', tbWhole).remove();\r\n                calColWidth = true;\r\n            }\r\n            // Add total number of row\r\n            for (var z = 0; z < numOfRow; z++) {\r\n                // Check maximum number of rows\r\n                if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                    reachMaxRow = true;\r\n                    break;\r\n                }\r\n                // Update variables\r\n                settings._uniqueIndex++;\r\n                uniqueIndex = settings._uniqueIndex;\r\n                hidden.length = 0;\r\n                // Check row insert index\r\n                if (langx.isNumeric(rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    addedRows.push(rowIndex);\r\n                }\r\n                else {\r\n                    settings._rowOrder.push(uniqueIndex);\r\n                    tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                    }\r\n                    addedRows.push(settings._rowOrder.length - 1);\r\n                }\r\n                tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n                if (settings._sectionClasses.body) {\r\n                    tbRow.className = settings._sectionClasses.body;\r\n                }\r\n                $(tbRow).data('appendGrid', uniqueIndex);\r\n                // Config on the sub panel row\r\n                if (tbSubRow != null) {\r\n                    tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                    $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                    if (settings._sectionClasses.subPanel) {\r\n                        tbSubRow.className = settings._sectionClasses.subPanel;\r\n                    }\r\n                }\r\n                // Add row number\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                    if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n                }\r\n                // Process on each columns\r\n                for (var y = 0; y < settings.columns.length; y++) {\r\n                    // Skip hidden\r\n                    if (settings.columns[y].type == 'hidden') {\r\n                        hidden.push(y);\r\n                        continue;\r\n                    }\r\n                    // Check column invisble\r\n                    var className = 'ui-widget-content';\r\n                    if (settings.columns[y].invisible) className += ' invisible';\r\n                    // Insert cell\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                    tbCell.className = className;\r\n                    if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                    // Prepare control id and name\r\n                    var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrlName = ctrlId;\r\n                    }\r\n                    // Check control type\r\n                    ctrl = null;\r\n                    if (settings.columns[y].type == 'custom') {\r\n                        if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                            ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        }\r\n                    } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                        ctrl = document.createElement('select');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        // Build option list\r\n                        if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                            // For array type option list\r\n                            if (settings.columns[y].ctrlOptions.length > 0) {\r\n                                if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                    // Check to generate optGroup or not\r\n                                    var lastGroupName = null, lastGroupElem = null;\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                            if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                                lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                                lastGroupElem = document.createElement('optgroup');\r\n                                                lastGroupElem.label = lastGroupName;\r\n                                                ctrl.appendChild(lastGroupElem);\r\n                                            }\r\n                                        } else {\r\n                                            lastGroupElem = null;\r\n                                        }\r\n                                        var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                            option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                        }\r\n                                        if (null == lastGroupElem) {\r\n                                            option.appendTo(ctrl);\r\n                                        }\r\n                                        else {\r\n                                            option.appendTo(lastGroupElem);\r\n                                        }\r\n                                        // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                            // For plain object type option list\r\n                            for (var x in settings.columns[y].ctrlOptions) {\r\n                                ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                            }\r\n                        } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                            // For string type option list\r\n                            var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                            for (var x = 0; x < arrayOpt.length; x++) {\r\n                                var eqIndex = arrayOpt[x].indexOf(':');\r\n                                if (-1 == eqIndex) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                                } else {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                                }\r\n                            }\r\n                        } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                            settings.columns[y].ctrlOptions(ctrl);\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-selectmenu') {\r\n                            $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    else if (settings.columns[y].type == 'checkbox') {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'checkbox';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        ctrl.value = 1;\r\n                        tbCell.appendChild(ctrl);\r\n                        tbCell.style.textAlign = 'center';\r\n                    }\r\n                    else if (settings.columns[y].type == 'textarea') {\r\n                        ctrl = document.createElement('textarea');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                        ctrl = document.createElement('input');\r\n                        try {\r\n                            ctrl.type = settings.columns[y].type;\r\n                        }\r\n                        catch (err) { /* Not supported type */ }\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else {\r\n                        // Generate text input\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'text';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-datepicker') {\r\n                            $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-spinner') {\r\n                            $(ctrl).spinner(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                            $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    // Add extra control properties\r\n                    if (settings.columns[y].type != 'custom') {\r\n                        // Add control attributes as needed\r\n                        if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                        // Add control properties as needed\r\n                        if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                        // Add control CSS as needed\r\n                        if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                        // Add control class as needed\r\n                        if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                        // Add jQuery UI tooltip as needed\r\n                        if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                        // Add control events as needed\r\n                        if (langx.isFunction(settings.columns[y].onClick)) {\r\n                            $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                        if (langx.isFunction(settings.columns[y].onChange)) {\r\n                            $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).plugin(\"lark.tabular\").getRowIndex(evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                    } else if (!isEmpty(settings.columns[y].value)) {\r\n                        // Set default value\r\n                        setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                    }\r\n                }\r\n                // Add button cell if needed\r\n                if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                    if (!settings.rowButtonsInFront) {\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    } else if (!settings.hideRowNumColumn) {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                    } else {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                    }\r\n                    tbCell.className = 'ui-widget-content last';\r\n                    tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                    if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                    // Add standard buttons\r\n                    if (!settings.hideButtons.insert) {\r\n                        var button = this._createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n                            .attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n                            .addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").insertRow(1, null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                    }\r\n                    if (!settings.hideButtons.remove) {\r\n                        var button = this._createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n                            .attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n                            .addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                self._removeRow( null, rowUniqueIndex, false);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                    }\r\n                    if (!settings.hideButtons.moveUp) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n                            .attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n                            .addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveUpRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                    }\r\n                    if (!settings.hideButtons.moveDown) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n                            .attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n                            .addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveDownRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                    }\r\n                    // Handle row dragging\r\n                    if (settings.rowDragging) {\r\n                        var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                            .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                            .appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                    }\r\n                    // Add hidden\r\n                    for (var y = 0; y < hidden.length; y++) {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                        if (langx.isFunction(settings.nameFormatter)) {\r\n                            ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        } else {\r\n                            ctrl.name = ctrl.id;\r\n                        }\r\n                        ctrl.type = 'hidden';\r\n\r\n                        if (loadData) {\r\n                            // Load data if needed\r\n                            ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                        } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                            // Set default value\r\n                            ctrl.value = settings.columns[hidden[y]].value;\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    // Add extra buttons\r\n                    if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Create sub panel\r\n                if (settings.useSubPanel) {\r\n                    tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.className = 'ui-widget-content';\r\n                    tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                    if (langx.isFunction(settings.subPanelBuilder)) {\r\n                        settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            // Check if re-calculate column width is required\r\n            if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n                var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n                if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                    calColWidth = true;\r\n                    settings._calculateWidth = false;\r\n                }\r\n            }\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Calculate column width\r\n            if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n                this._calculateColumnWidth();\r\n            }\r\n            // Trigger events\r\n            if (langx.isNumeric(rowIndex)) {\r\n                if (langx.isFunction(settings.afterRowInserted)) {\r\n                    settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            else {\r\n                if (langx.isFunction(settings.afterRowAppended)) {\r\n                    settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n                settings.maxNumRowsReached();\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n            // Return added rows' uniqueIndex\r\n            return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n        },\r\n\r\n        _removeRow : function (rowIndex, uniqueIndex, force) {\r\n            var tbWhole = this._elm;\r\n\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            if (langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        rowIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (langx.isNumeric(rowIndex)) {\r\n                // Remove middle row\r\n                if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 1);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Sort sequence\r\n                    this._sortSequence( rowIndex);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, rowIndex);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Store old window scroll value\r\n                var oldHeight = 0, oldScroll = 0;\r\n                if (settings.maintainScroll) {\r\n                    oldHeight = $(tbWhole).height();\r\n                    oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n                }\r\n                // Remove last row\r\n                if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                    uniqueIndex = settings._rowOrder.pop();\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.lastChild);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, null);\r\n                    }\r\n                }\r\n                // Scroll the page when append row\r\n                if (settings.maintainScroll) {\r\n                    // Try to maintain the height so that user no need to scroll every time when row added\r\n                    var newHeight = $(tbWhole).height();\r\n                    $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n                }\r\n            }\r\n            // Add empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings);\r\n            }\r\n        },\r\n\r\n        _loadData : function (records, isInit) {\r\n            var tbWhole = this._elm;\r\n            var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (settings) {\r\n                // Clear existing content\r\n                tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                $(tbBody).empty();\r\n                settings._rowOrder.length = 0;\r\n                settings._uniqueIndex = 0;\r\n                // Check any records\r\n                if (records != null && records.length) {\r\n                    // Add rows\r\n                    insertResult = this._insertRow(records.length, null, null);\r\n                    // Set data\r\n                    for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                        for (var c = 0; c < settings.columns.length; c++) {\r\n                            setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                        }\r\n                        if (langx.isFunction(settings.rowDataLoaded)) {\r\n                            settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                        }\r\n                    }\r\n                }\r\n                // Save setting\r\n                settings._isDataLoaded = true;\r\n                if (isInit) settings.initData = null;\r\n                $(tbWhole).data('appendGrid', settings);\r\n                // Trigger data loaded event\r\n                if (langx.isFunction(settings.dataLoaded)) {\r\n                    settings.dataLoaded(tbWhole, records);\r\n                }\r\n            }\r\n        },\r\n\r\n        _init: function () {\r\n            var options = this.options,\r\n                self = this;\r\n            // Check mandatory paramters included\r\n            if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                alert(_systemMessages.noColumnInfo);\r\n            }\r\n            // Check target element is table or not\r\n            var tbWhole = this._elm, tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n            if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                alert(_systemMessages.elemNotTable);\r\n            }\r\n            // Generate settings\r\n            var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n            // Add internal settings\r\n            langx.extend(settings, {\r\n                // The UniqueIndex accumulate counter\r\n                _uniqueIndex: 0,\r\n                // The row order array\r\n                _rowOrder: [],\r\n                // Indicate data is loaded or not\r\n                _isDataLoaded: false,\r\n                // Visible column count for internal calculation\r\n                _visibleCount: 0,\r\n                // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                _finalColSpan: 0,\r\n                // Indicate to hide last column or not\r\n                _hideLastColumn: false,\r\n                // The element ID of the `appendGrid` wrapper\r\n                _wrapperId: null,\r\n                // \r\n                _calculateWidth: true\r\n            });\r\n            // Labels or messages used in grid\r\n            if (langx.isPlainObject(options.i18n))\r\n                settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n            else\r\n                settings._i18n = langx.extend({}, _defaultTextResources);\r\n            // The extra class names for buttons\r\n            if (langx.isPlainObject(options.buttonClasses))\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n            else\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n            // The extra class names for sections\r\n            if (langx.isPlainObject(options.sectionClasses))\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n            else\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n            // Make sure the `hideButtons` setting defined\r\n            if (langx.isPlainObject(options.hideButtons))\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n            else\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n            // Check `idPrefix` is defined\r\n            if (isEmpty(settings.idPrefix)) {\r\n                // Check table ID defined\r\n                if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                    // Generate an ID using current time\r\n                    settings.idPrefix = 'ag' + new Date().getTime();\r\n                }\r\n                else {\r\n                    settings.idPrefix = tbWhole.id;\r\n                }\r\n            }\r\n            // Check custom grid button parameters\r\n            if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                settings.customGridButtons = {};\r\n            }\r\n            // Check rowDragging and useSubPanel option\r\n            if (settings.useSubPanel && settings.rowDragging) {\r\n                settings.rowDragging = false;\r\n            }\r\n            // Create thead and tbody\r\n            tbHead = document.createElement('thead');\r\n            tbHead.className = 'ui-widget-header';\r\n            tbBody = document.createElement('tbody');\r\n            tbBody.className = 'ui-widget-content';\r\n            tbFoot = document.createElement('tfoot');\r\n            tbFoot.className = 'ui-widget-header';\r\n            tbColGp = document.createElement('colgroup');\r\n            // Prepare the table element\r\n            settings._wrapperId = settings.idPrefix + '-wrapper';\r\n            tbWrap = this._tbWrap = document.createElement('div');\r\n            $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n            $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n            // Check if content scrolling is enabled\r\n            if (settings.maxBodyHeight > 0) {\r\n                // Seperate the thead and tfoot from source table\r\n                $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n            } else {\r\n                // Add thead, tbody and tfoot to the same table\r\n                $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n            }\r\n            // Handle header row\r\n            var tbHeadCellRowNum, tbHeadCellRowButton;\r\n            tbHead.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.header) {\r\n                tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n            } else {\r\n                tbRow.className = 'columnHead';\r\n            }\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Prepare column information and add column header\r\n            var pendingSkipCol = 0;\r\n            for (var z = 0; z < settings.columns.length; z++) {\r\n                // Assign default setting\r\n                var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                settings.columns[z] = columnOpt;\r\n                // Skip hidden\r\n                if (settings.columns[z].type != 'hidden') {\r\n                    // Check column is invisible\r\n                    if (!settings.columns[z].invisible) {\r\n                        settings._visibleCount++;\r\n                    }\r\n                    // Check skip header colSpan\r\n                    if (pendingSkipCol == 0) {\r\n                        var className = 'ui-widget-header';\r\n                        if (settings.columns[z].invisible) className += ' invisible';\r\n                        if (settings.columns[z].resizable) className += ' resizable';\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                        tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                        tbCell.className = className;\r\n                        if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                        if (settings.columns[z].headerSpan > 1) {\r\n                            $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                            pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                        }\r\n                        // Add tooltip\r\n                        if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                        }\r\n                        else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                        }\r\n                        // Check to set display text or generate by function\r\n                        if (langx.isFunction(settings.columns[z].display)) {\r\n                            settings.columns[z].display(tbCell);\r\n                        } else if (!isEmpty(settings.columns[z].display)) {\r\n                            $(tbCell).text(settings.columns[z].display);\r\n                        }\r\n                        // Add column group for scrolling\r\n                        tbColGp.appendChild(document.createElement('col'));\r\n                    } else {\r\n                        pendingSkipCol--;\r\n                    }\r\n                }\r\n            }\r\n            // Enable columns resizable\r\n            if ($.fn.resizable ) {\r\n                $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n            }\r\n            // Check to hide last column or not\r\n            if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                    && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                    && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                settings._hideLastColumn = true;\r\n            }\r\n            // Calculate the `_finalColSpan` value\r\n            settings._finalColSpan = settings._visibleCount;\r\n            if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n            if (!settings._hideLastColumn) settings._finalColSpan++;\r\n            // Generate last column header if needed\r\n            if (!settings._hideLastColumn) {\r\n                if (settings.rowButtonsInFront) {\r\n                    if (settings.hideRowNumColumn) {\r\n                        // Insert a cell at the front\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                    } else {\r\n                        // Span the first cell that across row number and row button cells\r\n                        // tbHeadCellRowNum.colSpan = 2;\r\n                        // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                        // Insert a cell as the second column\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                    }\r\n                } else {\r\n                    tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                }\r\n                tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Add caption when defined\r\n            if (settings.caption) {\r\n                tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                if (settings._sectionClasses.caption) {\r\n                    tbRow.className = settings._sectionClasses.caption;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_caption_td';\r\n                tbCell.className = 'ui-state-active caption';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                // Add tooltip\r\n                if (langx.isPlainObject(settings.captionTooltip)) {\r\n                    $(tbCell).tooltip(settings.captionTooltip);\r\n                } else if (!isEmpty(settings.captionTooltip)) {\r\n                    $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                }\r\n                // Check to set display text or generate by function\r\n                if (langx.isFunction(settings.caption)) {\r\n                    settings.caption(tbCell);\r\n                } else {\r\n                    $(tbCell).text(settings.caption);\r\n                }\r\n            }\r\n            // Handle footer row\r\n            tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.footer) {\r\n                tbRow.className = settings._sectionClasses.footer;\r\n            }\r\n            tbRow.appendChild(tbCell = document.createElement('td'));\r\n            tbCell.id = settings.idPrefix + '_footer_td';\r\n            tbCell.colSpan = settings._finalColSpan;\r\n            $('<input/>').attr({\r\n                type: 'hidden',\r\n                id: settings.idPrefix + '_rowOrder',\r\n                name: settings.idPrefix + '_rowOrder'\r\n            }).appendTo(tbCell);\r\n            // Make row invisible if all buttons are hidden\r\n            if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                    && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                tbRow.style.display = 'none';\r\n            } else {\r\n                if (!settings.hideButtons.append) {\r\n                    var button = this._createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n                    .attr({ title: settings._i18n.append }).addClass('append')\r\n                    .click(function (evt) {\r\n                        self._insertRow(1, null, null);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                }\r\n                if (!settings.hideButtons.removeLast) {\r\n                    var button = this._createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n                    .attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n                    .click(function (evt) {\r\n                        self._removeRow( null, this.value, false);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                }\r\n                if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Enable dragging\r\n            if (settings.rowDragging) {\r\n                $(tbBody).sortable({\r\n                    axis: 'y',\r\n                    containment: tbWhole,\r\n                    handle: '.rowDrag',\r\n                    helper: function (e, tr) {\r\n                        var org = tr.children();\r\n                        var helper = tr.clone();\r\n                        // Fix the cell width of cloned table cell\r\n                        helper.children().each(function (index) {\r\n                            $(this).width(org.eq(index).width());\r\n                            // Set the value of drop down list when drag (Issue #18)\r\n                            var helperSelect = $('select', this);\r\n                            if (helperSelect.length > 0) {\r\n                                for (var y = 0; y < helperSelect.length; y++) {\r\n                                    var orgSelect = org.eq(index).find('select');\r\n                                    if (orgSelect.length > y) {\r\n                                        helperSelect[y].value = orgSelect[y].value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        return helper;\r\n                    },\r\n                    update: function (event, ui) {\r\n                        var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                        var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                        self._gridRowDragged(ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            // Save options\r\n            $(tbWhole).data('appendGrid', settings);\r\n            if (langx.isArray(options.initData)) {\r\n                // Load data if initData is array\r\n                this._loadData(options.initData, true);\r\n            } else {\r\n                // Add empty rows\r\n                //$(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                this.appendRow(settings.initRows);\r\n            }\r\n            // Show no rows in grid\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings, true);\r\n            }\r\n            // Calculate column width\r\n            if (settings.maxBodyHeight > 0) {\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    $('table.foot', tbWrap).width($(tbWhole).width());\r\n                }\r\n            }\r\n        },\r\n\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = this._checkGridAndGetSettings( true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        load: function (records) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    this._loadData(records, false);\r\n                } else {\r\n                    this._emptyGrid();\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.insertRow(numOfRowOrRowArray);\r\n        },\r\n\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = this._insertRow(numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        this._sortSequence( insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                this._removeRow(rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                this._emptyGrid();\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        this._removeRow( null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n\r\n\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).plugin(\"lark.tabular\").getRowValue(null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n\r\n\r\n\r\n\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n    */\r\n\r\n    return Tabular ;\r\n});\r\n\ndefine('skylark-widgets-swt/TabStrip',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/tab\",\r\n    \"skylark-bootstrap3/dropdown\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var TabStrip = Widget.inherit({\r\n        klassName : \"TabStrip\",\r\n        pluginName : \"lark.tabstrip\",\r\n\r\n        options : {\r\n          selectors : {\r\n            header : \".nav-tabs\",\r\n            tab : \"[data-toggle=\\\"tab\\\"]\",\r\n            content : \".tab-content\",\r\n            tabpane : \".tab-pane\"\r\n          }\r\n        },\r\n\r\n        _init : function() {\r\n          this.$header = this._velm.$(this.options.selectors.header); \r\n          this.$tabs = this.$header.find(this.options.selectors.tab);\r\n          this.$content = this._velm.$(this.options.selectors.content);\r\n          this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\r\n\r\n          this.$header.find('[data-toggle=\"dropdown\"]').dropdown();\r\n\r\n          var self = this;\r\n          this.$tabs.each(function(idx,tabEl){\r\n            $(tabEl).tab({\r\n              target : self.$tabpanes[idx]\r\n            });\r\n          });\r\n\r\n        },\r\n\r\n        add : function() {\r\n          //TODO\r\n        },\r\n\r\n        remove : function(){\r\n          //TODO\r\n        }\r\n    });\r\n\r\n    return swt.TabStrip = TabStrip;\r\n\r\n});\ndefine('skylark-widgets-swt/Toolbar',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-widgets-base/Widget\"\r\n],function(langx,$,Widget){ \r\n\r\n\r\n\r\n  var Toolbar = Widget.inherit({\r\n    pluginName : \"lark.toolbar\",\r\n\r\n    options : {\r\n      toolbarFloat: true,\r\n      toolbarHidden: false,\r\n      toolbarFloatOffset: 0,\r\n      template : '<div class=\"lark-toolbar\"><ul></ul></div>',\r\n      separator : {\r\n        template :  '<li><span class=\"separator\"></span></li>'\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var floatInitialized, initToolbarFloat, toolbarHeight;\r\n      //this.editor = editor;\r\n\r\n      //this.opts = langx.extend({}, this.opts, opts);\r\n      this.opts = this.options;\r\n\r\n\r\n      //if (!langx.isArray(this.opts.toolbar)) {\r\n      //  this.opts.toolbar = ['bold', 'italic', 'underline', 'strikethrough', '|', 'ol', 'ul', 'blockquote', 'code', '|', 'link', 'image', '|', 'indent', 'outdent'];\r\n      //}\r\n\r\n      this.wrapper = $(this._elm);\r\n      this.list = this.wrapper.find('ul');\r\n      this.list.on('click', function(e) {\r\n        return false;\r\n      });\r\n      this.wrapper.on('mousedown', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('.menu-on');\r\n        };\r\n      })(this));\r\n      $(document).on('mousedown.toolbar', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('menu-on');\r\n        };\r\n      })(this));\r\n      if (!this.opts.toolbarHidden && this.opts.toolbarFloat) {\r\n        this.wrapper.css('top', this.opts.toolbarFloatOffset);\r\n        toolbarHeight = 0;\r\n        initToolbarFloat = (function(_this) {\r\n          return function() {\r\n            _this.wrapper.css('position', 'static');\r\n            _this.wrapper.width('auto');\r\n            _this.editor.editable.util.reflow(_this.wrapper);\r\n            _this.wrapper.width(_this.wrapper.outerWidth());\r\n            _this.wrapper.css('left', _this.editor.editable.util.os.mobile ? _this.wrapper.position().left : _this.wrapper.offset().left);\r\n            _this.wrapper.css('position', '');\r\n            toolbarHeight = _this.wrapper.outerHeight();\r\n            _this.editor.placeholderEl.css('top', toolbarHeight);\r\n            return true;\r\n          };\r\n        })(this);\r\n        floatInitialized = null;\r\n\r\n        /*\r\n        $(window).on('resize.richeditor-' + this.editor.id, function(e) {\r\n          return floatInitialized = initToolbarFloat();\r\n        });\r\n        $(window).on('scroll.richeditor-' + this.editor.id, (function(_this) {\r\n          return function(e) {\r\n            var bottomEdge, scrollTop, topEdge;\r\n            if (!_this.wrapper.is(':visible')) {\r\n              return;\r\n            }\r\n            topEdge = _this.editor.wrapper.offset().top;\r\n            bottomEdge = topEdge + _this.editor.wrapper.outerHeight() - 80;\r\n            scrollTop = $(document).scrollTop() + _this.opts.toolbarFloatOffset;\r\n            if (scrollTop <= topEdge || scrollTop >= bottomEdge) {\r\n              _this.editor.wrapper.removeClass('toolbar-floating').css('padding-top', '');\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', _this.opts.toolbarFloatOffset);\r\n              }\r\n            } else {\r\n              floatInitialized || (floatInitialized = initToolbarFloat());\r\n              _this.editor.wrapper.addClass('toolbar-floating').css('padding-top', toolbarHeight);\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', scrollTop - topEdge + _this.opts.toolbarFloatOffset);\r\n              }\r\n            }\r\n          };\r\n        })(this));\r\n        */\r\n      }\r\n\r\n      /*\r\n      this.editor.on('destroy', (function(_this) {\r\n        return function() {\r\n          return _this.buttons.length = 0;\r\n        };\r\n      })(this));\r\n      */\r\n\r\n      \r\n    },\r\n\r\n    addToolItem : function(itemWidget) {\r\n      $(itemWidget._elm).appendTo(this.list);\r\n      return this;\r\n    },\r\n\r\n    addSeparator : function() {\r\n      $(this.options.separator.template).appendTo(this.list);\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return Toolbar;\r\n\r\n});\ndefine('skylark-widgets-swt/main',[\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"./Accordion\",\r\n    \"./Button\",\r\n    \"./Carousel\",\r\n    \"./CheckBox\",\r\n    \"./ComboBox\",\r\n    \"./TextBox\",\r\n    \"./Listing\",\r\n    \"./Pagination\",\r\n    \"./Progress\",\r\n    \"./Radio\",\r\n    \"./SearchBox\",\r\n    \"./SelectList\",\r\n    \"./Tabular\",\r\n    \"./TabStrip\",\r\n    \"./TextBox\",\r\n    \"./Toolbar\"\r\n], function(swt) {\r\n    return swt;\r\n});\ndefine('skylark-widgets-swt', ['skylark-widgets-swt/main'], function (main) { return main; });\n\n"]}
{"version":3,"sources":["skylark-widgets-swt.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","ui","sbswt","CONST","BACKSPACE_KEYCODE","COMMA_KEYCODE","DELETE_KEYCODE","DOWN_ARROW_KEYCODE","ENTER_KEYCODE","TAB_KEYCODE","UP_ARROW_KEYCODE","isKey","keyCode","e","isBackspaceKey","isDeleteKey","isTabKey","isUpArrow","isDownArrow","ENCODED_REGEX","mixin","cleanInput","questionableMarkup","test","html","text","isShiftHeld","shiftKey","Widget","collapse","swt","Panel","inherit","klassName","pluginName","options","toggler","selector","body","_init","self","this","$toggle","_velm","find","$body","on","$this","collpasePlugin","toggle","data","expand","toogle","full","unfull","toogleFull","close","panel_dom","dom","id","minimize","promise","then","fadeOut","Accordion","panel","template","panels","forEach","panelEl","push","_panels","_post","_refresh","updates","get","addPanel","$newPanel","$template","clone","removeClass","attr","hash","addClass","append","fadeIn","remove","expandAll","collapseAll","overrided","_elm","overided","Button","btnSize","btnType","leftIcon","rightIcon","topIcon","bottomIcon","state","String","[object Object]","elm","$el","hasClass","href","target","$fa_icon_left","length","$fa_icon_right","super","velm","value","left","prepend","iconleft","iconright","register","Carousel","items","indicatorTemplate","slideTemplate","templates","container","indicators","item","slides","_bs_carousel","carousel","slideIndex","to","slideAction","prev","next","preventDefault","pos","pause","cycle","add","createIndicator","obj","thumbnailUrl","thumbnail","gallery","indicator","indicatorPrototype","cloneNode","title","getItemTitle","thumbnailProperty","thumbnailIndicators","Gallery","getItemProperty","undefined","getElementsByTagName","src","style","backgroundImage","addIndicator","index","indicatorContainer","list","setAttribute","appendChild","setActiveIndicator","activeIndicator","activeIndicatorClass","initSlides","reload","document","createElement","children","addSlide","resetSlides","empty","_Toggler","checked","isChecked","uncheck","check","set","CheckBox","selectors","chk","lbl","label","_parse","chkSelector","lblSelector","$chk","prop","disabled","_create","$lbl","_startup","evt","changed","$containerToggle","$label","$toggleContainer","setDisabledState","ComboBox","widgetClass","autoResizeMenu","filterOnKeypress","showOptionsOnKeypress","filter","predicate","visible","$dropMenu","each","i","$li","trim","substr","$element","$input","$button","dropdown","$inputGroupBtn","proxy","itemclicked","inputchanged","menuShown","keypress","setDefaultSelection","val","_destroy","outerHTML","doSelect","$item","$selectedItem","clearSelection","resizeMenu","width","outerWidth","selectedItem","txt","notFound","selectByText","textContent","innerText","toLowerCase","selectByValue","selectBySelector","selectByIndex","removeData","removeAttr","enable","disable","parent","trigger","synthetic","focus","IS_NAVIGATIONAL","which","selected","$selected","previousKeyPress","extra","prototype","getValue","TextBox","multiline","is","tagName","attrs","name","subtype","type","_dom","_sync","ListGroup","multiSelect","multiTier","classes","active","Object","itemSelector","_$items","veItem","_elmx","query","has","not","doubleTapToGo","stopPropagation","location","toggleClass","siblings","findItem","valueOrIdx","isNumber","eq","oldValue","selectOneItem","right_to_left","popup","Menu","init","_options","hide_onmouseleave","icons","stopImmediatePropagation","contains","relatedTarget","clearTimeout","end","hide","parentsUntil","addBack","_show_submenu","setTimeout","blur","_execute","o","currentTarget","last","closest","first","prevAll","show","nextAll","a","click","render","_trigger","event_name","reference","element","position","x","position_x","y","position_y","_disabled","isFunction","action","call","is_callback","tmp","str","sep","separator_before","_class","shortcut","icon","indexOf","shortcut_label","submenu","separator_after","replace","xl","offset","top","w","h","height","dw","window","scrollLeft","dh","scrollTop","css","outerHeight","appendTo","is_visible","detach","m","Pagination","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","Number","$first","$prev","$last","$next","$numeric","checkCanAction","$elm","ret","numeric","pageNo","parseInt","totalPageNoBtns","Math","min","begin","count","size","visibles","$btn","changePageNoBtns","changeLabeldBtns","Progress","bar","max","_vbar","start","slideDown","increase","tick","finish","slideUp","Radio","$radio","domNode","$container","ignoreVisibilityCheck","match","logError","containerSelector","setInitialState","resetGroup","setCheckedState","$radios","groupName","SearchBox","clearOnEmpty","searchOnKeyPress","allowCancel","$repeater","$icon","buttonclicked","clearPending","activeSearch","destroy","search","searchText","clear","SelectList","emptyLabelHTML","$hiddenField","$dropdownMenu","itemClicked","resize","key","fromCharCode","idx","charAt","off","itemChanged","newWidth","sizer","Boolean","Tabular","buttonClasses","removeLast","insert","moveUp","moveDown","rowDrag","sectionClasses","caption","header","subPanel","footer","hideButtons","_showEmptyMessage","settings","skipWidthCalculation","tbWrap","_tbWrap","$emptyCell","_i18n","rowEmpty","_finalColSpan","maxBodyHeight","autoColumnWidth","_calculateColumnWidth","$tbWhole","$scroller","tbHeadRow","tbColGp","_rowOrder","tbBodyRow","marginThreshold","fn","modal","colLimit","childNodes","z","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","_createGridButton","param","uiIcon","genButton","nodeType","plugin","showLabel","_sortSequence","startIndex","tbWhole","hideRowNumColumn","idPrefix","_emptyGrid","_uniqueIndex","_saveSetting","_gridRowDragged","isMoveUp","uniqueIndex","tbRowIndex","splice","afterRowDragged","join","_checkGridAndGetSettings","noMsg","$grid","alert","_systemMessages","notInit","getValueMultiGrid","_insertRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","ctrl","tbRow","tbCell","addedRows","parentIndex","hidden","tbBody","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","_wrapperId","numOfRow","loadData","isArray","isNumeric","maintainScroll","scrollParent","maxRowsAllowed","useSubPanel","insertBefore","_sectionClasses","className","rowSpan","columns","invisible","cellCss","ctrlName","ctrlId","nameFormatter","customBuilder","ctrlOptions","isPlainObject","lastGroupName","lastGroupElem","isEmpty","group","option","Option","arrayOpt","split","eqIndex","substring","selectmenu","uiOption","textAlign","err","datepicker","spinner","autocomplete","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","uiTooltip","tooltip","onClick","caller","callback","appendGrid","onChange","change","getRowIndex","setCtrlValue","_hideLastColumn","_visibleCount","rowButtonsInFront","firstChild","display","button","customGridButtons","tabindex","rowUniqueIndex","insertRow","_buttonClasses","_removeRow","moveUpRow","moveDownRow","rowDragging","customRowButtons","buttonCfg","uiButton","atTheFront","makeCustomRowButton","colSpan","subPanelBuilder","_calculateWidth","scroll","scrollHeight","offsetHeight","afterRowInserted","afterRowAppended","maxNumRowsReached","newHeight","force","beforeRowRemove","removeChild","afterRowRemoved","pop","lastChild","_loadData","records","isInit","insertResult","r","c","rowDataLoaded","_isDataLoaded","initData","dataLoaded","noColumnInfo","tbHead","tbFoot","elemNotTable","tbHeadCellRowNum","tbHeadCellRowButton","extend","_defaultInitOptions","_defaultCallbackContainer","i18n","_defaultTextResources","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","Date","getTime","insertAfter","prependTo","wrap","pendingSkipCol","columnOpt","_defaultColumnOptions","resizable","displayCss","headerSpan","displayTooltip","handles","childnodes","captionTooltip","customFooterButtons","makeCustomBottomButton","sortable","axis","containment","handle","helper","tr","org","helperSelect","orgSelect","update","event","lastIndexOf","originalPosition","appendRow","initRows","isReady","isDataLoaded","load","insertUniqueIndex","removeRow","emptyGrid","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","findRowIndex","getElementById","afterRowSwapped","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","rowCountName","getCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","subPanelGetter","emptyCriteria","customGetter","customSetter","notSupportMethod","exButton","btnClass","btnCss","btnAttr","rowData","keyName","suffix","adtData","newData","columnName","currentValue","defaultValue","TabStrip","tab","content","tabpane","$header","$tabs","$content","$tabpanes","tabEl","Toolbar","toolbarFloat","toolbarHidden","toolbarFloatOffset","separator","toolbarHeight","_this","opts","wrapper","editor","editable","util","reflow","os","mobile","placeholderEl","addToolItem","itemWidget","addSeparator","plugins","_default","injectStyle","levels","expandIcon","collapseIcon","emptyIcon","nodeIcon","selectedIcon","checkedIcon","uncheckedIcon","color","backColor","borderColor","onhoverColor","selectedColor","selectedBackColor","searchResultColor","searchResultBackColor","enableLinks","highlightSelected","highlightSearchResults","showBorder","showIcon","showCheckbox","showTags","onNodeChecked","onNodeCollapsed","onNodeDisabled","onNodeEnabled","onNodeExpanded","onNodeSelected","onNodeUnchecked","onNodeUnselected","onSearchComplete","onSearchCleared","silent","ignoreChildren","searchOptions","ignoreCase","exactMatch","revealResults","Tree","indent","link","badge","_construct","elementId","styleId","tree","nodes","JSON","parse","subscribeEvents","setInitialStates","datax","initialized","$wrapper","unsubscribeEvents","clickHandler","node","level","nodeId","parentId","hasOwnProperty","selectable","expanded","findNode","classList","toggleExpandedState","toggleCheckedState","toggleSelectedState","console","log","setExpandedState","setSelectedState","findNodes","buildTree","treeItem","searchResult","buildStyleOverride","tags","tag","buildStyle","getNode","getParent","identifier","identifyNode","getSiblings","getSelected","getUnselected","getExpanded","getCollapsed","getChecked","getUnchecked","getDisabled","getEnabled","selectNode","identifiers","forEachIdentifier","unselectNode","toggleNodeSelected","collapseNode","expandLevels","expandNode","revealNode","parentNode","toggleNodeExpanded","checkAll","checkNode","uncheckAll","uncheckNode","toggleNodeChecked","disableAll","disableNode","enableAll","enableNode","toggleNodeDisabled","Array","pattern","clearSearch","results","modifier","attribute","grep","getNodeValue","RegExp","_obj","_attr","toString","main"],"mappings":"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","file":"../skylark-widgets-swt.js","sourcesContent":["define('skylark-widgets-swt/swt',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\tvar ui = skylark.ui = skylark.ui || {};\r\n\t\tsbswt = ui.sbswt = {};\r\n\r\n\tvar CONST = {\r\n\t\tBACKSPACE_KEYCODE: 8,\r\n\t\tCOMMA_KEYCODE: 188, // `,` & `<`\r\n\t\tDELETE_KEYCODE: 46,\r\n\t\tDOWN_ARROW_KEYCODE: 40,\r\n\t\tENTER_KEYCODE: 13,\r\n\t\tTAB_KEYCODE: 9,\r\n\t\tUP_ARROW_KEYCODE: 38\r\n\t};\r\n\r\n\tvar isShiftHeld = function isShiftHeld (e) { return e.shiftKey === true; };\r\n\r\n\tvar isKey = function isKey (keyCode) {\r\n\t\treturn function compareKeycodes (e) {\r\n\t\t\treturn e.keyCode === keyCode;\r\n\t\t};\r\n\t};\r\n\r\n\tvar isBackspaceKey = isKey(CONST.BACKSPACE_KEYCODE);\r\n\tvar isDeleteKey = isKey(CONST.DELETE_KEYCODE);\r\n\tvar isTabKey = isKey(CONST.TAB_KEYCODE);\r\n\tvar isUpArrow = isKey(CONST.UP_ARROW_KEYCODE);\r\n\tvar isDownArrow = isKey(CONST.DOWN_ARROW_KEYCODE);\r\n\r\n\tvar ENCODED_REGEX = /&[^\\s]*;/;\r\n\t/*\r\n\t * to prevent double encoding decodes content in loop until content is encoding free\r\n\t */\r\n\tvar cleanInput = function cleanInput (questionableMarkup) {\r\n\t\t// check for encoding and decode\r\n\t\twhile (ENCODED_REGEX.test(questionableMarkup)) {\r\n\t\t\tquestionableMarkup = $('<i>').html(questionableMarkup).text();\r\n\t\t}\r\n\r\n\t\t// string completely decoded now encode it\r\n\t\treturn $('<i>').text(questionableMarkup).html();\r\n\t};\r\n\r\n\tlangx.mixin(ui, {\r\n\t\tCONST: CONST,\r\n\t\tcleanInput: cleanInput,\r\n\t\tisBackspaceKey: isBackspaceKey,\r\n\t\tisDeleteKey: isDeleteKey,\r\n\t\tisShiftHeld: isShiftHeld,\r\n\t\tisTabKey: isTabKey,\r\n\t\tisUpArrow: isUpArrow,\r\n\t\tisDownArrow: isDownArrow\r\n\t});\r\n\r\n\treturn ui;\r\n\r\n});\r\n\ndefine('skylark-widgets-swt/Widget',[\r\n  \"skylark-widgets-base/Widget\"\r\n],function(Widget){\r\n  return Widget;\r\n});\r\n\ndefine('skylark-widgets-swt/Panel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget){\r\n\r\n  var Panel = Widget.inherit({\r\n    klassName : \"Panel\",\r\n\r\n    pluginName : \"lark.panel\",\r\n\r\n    options : {\r\n      toggler : {\r\n        selector : \".panel-heading [data-toggle=\\\"collapse\\\"]\"\r\n      },\r\n\r\n      body : {\r\n        selector : \".panel-collapse\"\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var self = this;\r\n      this.$toggle = this._velm.find(this.options.toggler.selector);\r\n      this.$body = this._velm.find(this.options.body.selector);\r\n      this.$toggle.on('click.lark',function (e) {\r\n        var $this   = $(this);\r\n        var collpasePlugin    = self.$body.collapse('instance');\r\n        if (collpasePlugin) {\r\n          collpasePlugin.toggle();\r\n        } else {\r\n          self.$body.collapse($this.data());\r\n        }\r\n      });\r\n\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      this.$body.collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      this.$body.collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     this.body.collapse(\"toogle\");\r\n    },\r\n\r\n    full : function() {\r\n\r\n    },\r\n\r\n    unfull : function() {\r\n\r\n    },\r\n\r\n    toogleFull : function() {\r\n\r\n    },\r\n    \r\n    close: function () {\r\n      var panel_dom = this.dom(id);\r\n      this.minimize(id, true).promise().then(function () {\r\n        panel_dom.fadeOut();\r\n      });\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  return Panel;\r\n\r\n});\ndefine('skylark-widgets-swt/Accordion',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"./Panel\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget, Panel){\r\n\r\n  var Accordion = Widget.inherit({\r\n    klassName : \"Accordion\",\r\n\r\n    pluginName : \"lark.accordion\",\r\n\r\n    options : {\r\n      panel: {\r\n        selector : \"> .panel\",\r\n        template : null,\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var panels = [];\r\n      this._velm.$(this.options.panel.selector).forEach(function(panelEl){\r\n        var panel = new Accordion.Panel(panelEl,{\r\n\r\n        });\r\n        panels.push(panel);\r\n      });\r\n      this._panels = panels;\r\n    },\r\n\r\n    _post : function() {\r\n      // handle internal events\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n    },\r\n\r\n    panels : {\r\n      get : function() {\r\n\r\n      }\r\n    },\r\n\r\n\r\n    addPanel : function() {\r\n      var $newPanel = $template.clone();\r\n      $newPanel.find(\".collapse\").removeClass(\"in\");\r\n      $newPanel.find(\".accordion-toggle\").attr(\"href\",  \"#\" + (++hash))\r\n               .text(\"Dynamic panel #\" + hash);\r\n      $newPanel.find(\".panel-collapse\").attr(\"id\", hash).addClass(\"collapse\").removeClass(\"in\");\r\n      $(\"#accordion\").append($newPanel.fadeIn());\r\n\r\n    },\r\n\r\n    /**\r\n     * Removes a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    remove : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expand : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands all accordion panes.\r\n     *\r\n     * @method expandAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expandAll : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapse a accordion pane.\r\n     *\r\n     * @method collapse\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapse : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapses all accordion pane.\r\n     *\r\n     * @method collapseAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapseAll : function() {\r\n\r\n    }\r\n  });\r\n\r\n  Accordion.Panel = Panel.inherit({\r\n    klassName : \"AccordionPanel\",\r\n\r\n    _init : function() {\r\n      //this._velm.collapse();\r\n      this.overrided();\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      $(this._elm).collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      $(this._elm).collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     $(this._elm).collapse(\"toogle\");\r\n    },\r\n\r\n    remove : function() {\r\n      this.overided();\r\n    }\r\n  });\r\n\r\n  return swt.Accordion = Accordion;\r\n});\r\n\ndefine('skylark-widgets-swt/Button',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n\tclass Button extends Widget {\r\n\t\tget klassName() {\r\n      return \"Button\";\r\n    } \r\n\r\n    get pluginName(){\r\n      return \"lark.button\";\r\n    } \r\n\r\n\t\tget options () {\r\n      return {\r\n        btnSize : \"lg\",\r\n        btnType : \"default\",\r\n        leftIcon : null,\r\n        rightIcon : null,\r\n        topIcon : null, // TODO\r\n        bottomIcon : null //TODO        \r\n      }\r\n\t\t}\r\n\r\n    get state() {\r\n      return {\r\n        \"text\" : String\r\n      }\r\n    }\r\n\r\n    _parse (elm,options) {\r\n      var $el = $(elm),\r\n          options = langx.mixin({},options);\r\n\r\n      if (!options.btnType) {\r\n        if ($el.hasClass(\"btn-link\")) {\r\n          options.btnType = \"link\";\r\n        } else if ($el.hasClass(\"btn-default\")) {\r\n          options.btnType = \"default\";\r\n        } else if ($el.hasClass(\"btn-primary\")) {\r\n          options.btnType = \"primary\";\r\n        } else if ($el.hasClass(\"btn-info\")) {\r\n          options.btnType = \"info\";\r\n        } else if ($el.hasClass(\"btn-success\")) {\r\n          options.btnType = \"success\";\r\n        } else if ($el.hasClass(\"btn-warning\")) {\r\n          options.btnType = \"warning\";\r\n        } else if ($el.hasClass(\"btn-danger\")) {\r\n          options.btnType = \"danger\";\r\n        }        \r\n      }\r\n\r\n      if (!options.btnSize) {\r\n        if ($el.hasClass(\"btn-xs\")) {\r\n          options.btnSize = \"xs\";\r\n        } else if ($el.hasClass(\"btn-sm\")) {\r\n          options.btnSize = \"sm\";\r\n        } else if ($el.hasClass(\"btn-lg\")) {\r\n          options.btnSize = \"lg\";\r\n        }        \r\n      }\r\n\r\n      if (!options.href) {\r\n        options.href = $el.attr('href');\r\n\r\n        options.target = $el.attr('target');\r\n      }\r\n\r\n      if (!options.text) {\r\n        options.text = $el.find('.text').text();\r\n      }\r\n\r\n      if (!options.leftIcon) {\r\n        var $fa_icon_left = $el.find('.fa-icon-left');\r\n        if ($fa_icon_left.length > 0) {\r\n          $fa_icon_left.removeClass('fa-icon-left').removeClass('fa');\r\n          options.leftIcon = $fa_icon_left.attr('class');\r\n          $fa_icon_left.addClass('fa-icon-left').addClass('fa');\r\n        }\r\n      }\r\n\r\n      if (!options.rightIcon) {\r\n        var $fa_icon_right = $el.find('.fa-icon-right');\r\n\r\n        if ($fa_icon_right.length > 0) {\r\n          $fa_icon_right.removeClass('fa-icon-right').removeClass('fa');\r\n          options.rightIcon = $fa_icon_right.attr('class');\r\n          $fa_icon_right.addClass('fa-icon-right').addClass('fa');\r\n        }        \r\n      }\r\n    }\r\n\r\n    _refresh (updates) {\r\n      //this.overrided(updates);\r\n      super._refresh(updates);\r\n\r\n      var velm = this._velm;\r\n\r\n      if (updates.btnType) {\r\n          velm.removeClass('btn-link btn-default btn-primary btn-info btn-success btn-warning btn-danger').addClass(\"btn-\" + updates.btnType.value);\r\n      }\r\n\r\n      if (updates.btnSize) {\r\n        velm.removeClass('btn-xs btn-sm btn-lg').addClass(\"btn-\" + updates.btnSize.value);\r\n      }\r\n\r\n      if (updates.text) {\r\n        velm.$('.text').text(updates.text.value);\r\n      }\r\n\r\n      if (updates.left) {\r\n          velm.$('.fa-icon-left').remove();\r\n          velm.prepend('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-left fa-' + updates.iconleft.value + '\">&nbsp;</i>\\n');\r\n      }\r\n\r\n      if (updates.iconright) {\r\n          velm.$('.fa-icon-right').remove();\r\n          if (updates.iconright.value) {\r\n              velm.append('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-right fa-' + updates.iconright.value + '\">&nbsp;</i>\\n');\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  Widget.register(Button);\r\n//  class Buttonx extends Button {\r\n//\r\n//  }\r\n\r\n//  Widget.register(Buttonx,\"lark.button\");\r\n  return swt.Button = Button;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Carousel',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/carousel\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var Carousel =  Widget.inherit({\r\n        klassName : \"Carousel\",\r\n        pluginName : \"lark.carousel\",\r\n\r\n        options : {\r\n\r\n            items : [],\r\n\r\n            indicatorTemplate : \"\",\r\n            slideTemplate : \"\",\r\n\r\n            templates : {\r\n              container : \"<div class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\">\" +\r\n                          \"/div\",\r\n              indicators : {\r\n                  container : \"<ol class=\\\"carousel-indicators\\\">\" +\r\n                              \"</ol>\",\r\n                  item :  \"<li></li>\"\r\n              },\r\n\r\n              slides : {\r\n                  container : \"<div class=\\\"carousel-inner\\\">\" +\r\n                              \"/div\",\r\n                  item :  \"<div class=\\\"item carousel-item\\\">\" +\r\n                            \"<img alt=\\\"First slide\\\"  src=\\\"{{url}}\\\">\" +\r\n                          \"</div>\"\r\n              }\r\n            }\r\n        },\r\n\r\n        _init : function() {\r\n          this._bs_carousel = this._velm.carousel(this.options);\r\n          var self = this;          \r\n          this._velm.on(\"click.lark\", \"[data-slide],[data-slide-to]\", function(e) {\r\n            var $this = $(this)\r\n            var slideIndex = $this.attr('data-slide-to');\r\n            if (slideIndex) {\r\n                self.to(slideIndex);\r\n            } else {\r\n              var slideAction = $this.attr('data-slide');\r\n              if (slideAction == \"prev\") {\r\n                self.prev();\r\n              } else {\r\n                self.next();\r\n              }\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n        });\r\n        },\r\n\r\n        to : function(pos) {\r\n          return this._bs_carousel.to(pos);\r\n        },\r\n\r\n        pause : function(e) {\r\n          this._bs_carousel.pause(e);\r\n          return this;\r\n        },\r\n\r\n        cycle : function(e) {\r\n          return this._bs_carousel.cycle(e);\r\n        },\r\n\r\n        next : function() {\r\n          return this._bs_carousel.next();\r\n        },\r\n\r\n        prev : function() {\r\n          return this._bs_carousel.prev();\r\n        },\r\n\r\n        add : function() {\r\n            \r\n        },\r\n\r\n        createIndicator: function (obj) {\r\n          var gallery = this.gallery,\r\n            indicator = this.indicatorPrototype.cloneNode(false)\r\n          var title = gallery.getItemTitle(obj)\r\n          var thumbnailProperty = this.options.thumbnailProperty\r\n          var thumbnailUrl\r\n          var thumbnail\r\n          if (this.options.thumbnailIndicators) {\r\n            if (thumbnailProperty) {\r\n              thumbnailUrl = Gallery.getItemProperty(obj, thumbnailProperty)\r\n            }\r\n            if (thumbnailUrl === undefined) {\r\n              thumbnail = obj.getElementsByTagName && $(obj).find('img')[0]\r\n              if (thumbnail) {\r\n                thumbnailUrl = thumbnail.src\r\n              }\r\n            }\r\n            if (thumbnailUrl) {\r\n              indicator.style.backgroundImage = 'url(\"' + thumbnailUrl + '\")'\r\n            }\r\n          }\r\n          if (title) {\r\n            indicator.title = title;\r\n          }\r\n          return indicator;\r\n      },\r\n\r\n      addIndicator: function (index) {\r\n        if (this.indicatorContainer.length) {\r\n          var indicator = this.createIndicator(this.list[index])\r\n          indicator.setAttribute('data-slide-to', index)\r\n          this.indicatorContainer[0].appendChild(indicator)\r\n          this.indicators.push(indicator)\r\n        }\r\n      },\r\n\r\n      setActiveIndicator: function (index) {\r\n        if (this.indicators) {\r\n          if (this.activeIndicator) {\r\n            this.activeIndicator.removeClass(this.options.activeIndicatorClass)\r\n          }\r\n          this.activeIndicator = $(this.indicators[index])\r\n          this.activeIndicator.addClass(this.options.activeIndicatorClass)\r\n        }\r\n      },\r\n\r\n      initSlides: function (reload) {\r\n        if (!reload) {\r\n          this.indicatorContainer = this.container.find(\r\n            this.options.indicatorContainer\r\n          )\r\n          if (this.indicatorContainer.length) {\r\n            this.indicatorPrototype = document.createElement('li')\r\n            this.indicators = this.indicatorContainer[0].children\r\n          }\r\n        }\r\n        this.overrided(reload);\r\n      },\r\n\r\n      addSlide: function (index) {\r\n        this.overrided(index);\r\n        this.addIndicator(index)\r\n      },\r\n\r\n      resetSlides: function () {\r\n        this.overrided();\r\n        this.indicatorContainer.empty();\r\n        this.indicators = [];\r\n      },\r\n\r\n    });\r\n\r\n    return swt.Carousel = Carousel;\r\n\r\n});\ndefine('skylark-widgets-swt/_Toggler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var _Toggler = swt._Toggler = Widget.inherit({\r\n    klassName: \"_Toggler\",\r\n\r\n    toggle: function () {\r\n      var checked = this.isChecked();\r\n\r\n      if (checked) {\r\n        this.uncheck();\r\n      } else {\r\n        this.check();\r\n      }\r\n    },\r\n\r\n    check: function  () {\r\n      this.state.set('checked',true);\r\n      return this;\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.state.set('checked',false);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Getter function for the checked state.\r\n     *\r\n     * @method isChecked\r\n     * @return {Boolean} True/false \r\n     */\r\n    isChecked: function () {\r\n      return this.state.get('checked');\r\n    }\r\n  });\r\n\r\n\treturn _Toggler;\r\n});\r\n\ndefine('skylark-widgets-swt/CheckBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var CheckBox =  _Toggler.inherit({\r\n    klassName: \"CheckBox\",\r\n\r\n    pluginName : \"lark.checkbox\",\r\n\r\n    options : {\r\n      selectors : {\r\n        chk : \"input[type=checkbox]\",\r\n        lbl : \"checkbox-label\"\r\n      },\r\n      template : undefined,\r\n      checked : undefined,\r\n      label : undefined,\r\n      value : undefined\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _parse : function(elm,options) {\r\n      options = this.overrided(elm,options);\r\n      var $el = $(elm),\r\n          chkSelector = options.selectors && options.selectors.chk,\r\n          lblSelector = options.selectors && options.selectors.lbl;\r\n\r\n      if (!chkSelector) {\r\n        chkSelector = this.options.selectors.chk;\r\n      }\r\n      if (!lblSelector) {\r\n        lblSelector = this.options.selectors.lbl;\r\n      }\r\n\r\n      var $chk = $el.find(chkSelector),\r\n          $lbl = $el.find(lblSelector);\r\n\r\n      if (options.checked == undefined) {\r\n        options.checked = $chk.prop('checked')\r\n      } else {\r\n        $chk.prop('checked',options.checked);\r\n      }\r\n\r\n      if (options.disabled == undefined) {\r\n        options.disabled = $chk.prop('disabled')\r\n      } else {\r\n        $chk.prop('disabled',options.disabled);\r\n      }\r\n\r\n      return options;\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _create : function() {\r\n      //TODO\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _init : function() {\r\n      var elm = this._elm;\r\n\r\n      // cache elements\r\n      this.$lbl = this._velm.$(this.options.selectors.lbl);\r\n      this.$chk = this._velm.$(this.options.selectors.chk);\r\n    },\r\n\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _startup : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$chk.on('change', function(evt) {\r\n        //var $chk = $(evt.target);\r\n        var checked = self.$chk.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            $chk.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $chk.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $chk.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $chk.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    }\r\n  });\r\n\r\n\treturn swt.CheckBox = CheckBox;\r\n});\r\n\ndefine('skylark-widgets-swt/ComboBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"skylark-bootstrap3/dropdown\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n\r\n\t// COMBOBOX CONSTRUCTOR AND PROTOTYPE\r\n\r\n\tvar ComboBox = Widget.inherit({\r\n\t\tklassName: \"ComboBox\",\r\n\r\n\t\tpluginName : \"lark.combobox\",\r\n\r\n\t\twidgetClass : \"lark-combobox\",\r\n\r\n\t\toptions : {\r\n\r\n\t\t\tautoResizeMenu: true,\r\n\t\t\tfilterOnKeypress: false,\r\n\t\t\tshowOptionsOnKeypress: false,\r\n\t\t\tfilter: function filter (list, predicate, self) {\r\n\t\t\t\tvar visible = 0;\r\n\t\t\t\tself.$dropMenu.find('.empty-indicator').remove();\r\n\r\n\t\t\t\tlist.each(function (i) {\r\n\t\t\t\t\tvar $li = $(this);\r\n\t\t\t\t\tvar text = $(this).text().trim();\r\n\r\n\t\t\t\t\t$li.removeClass();\r\n\r\n\t\t\t\t\tif (text === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-success');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else if (text.substr(0, predicate.length) === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-info');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$li.addClass('hidden');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (visible === 0) {\r\n\t\t\t\t\tself.$dropMenu.append('<li class=\"empty-indicator text-muted\"><em>No Matches</em></li>');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis.$element = $(this._elm);\r\n\r\n\t\t\tthis.$dropMenu = this.$element.find('.dropdown-menu');\r\n\t\t\tthis.$input = this.$element.find('input');\r\n\t\t\tthis.$button = this.$element.find('.btn');\r\n\t\t\tthis.$button.dropdown();\r\n\t\t\tthis.$inputGroupBtn = this.$element.find('.input-group-btn');\r\n\r\n\t\t\tthis.$element.on('click.lark', 'a', langx.proxy(this.itemclicked, this));\r\n\t\t\tthis.$element.on('change.lark', 'input', langx.proxy(this.inputchanged, this));\r\n\t\t\tthis.$element.on('shown.bs.dropdown', langx.proxy(this.menuShown, this));\r\n\t\t\tthis.$input.on('keyup.lark', langx.proxy(this.keypress, this));\r\n\r\n\t\t\t// set default selection\r\n\t\t\tthis.setDefaultSelection();\r\n\r\n\t\t\t// if dropdown is empty, disable it\r\n\t\t\tvar items = this.$dropMenu.children('li');\r\n\t\t\tif( items.length === 0) {\r\n\t\t\t\tthis.$button.addClass('disabled');\r\n\t\t\t}\r\n\r\n\t\t\t// filter on load in case the first thing they do is press navigational key to pop open the menu\r\n\t\t\tif (this.options.filterOnKeypress) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_destroy: function () {\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// remove any external bindings\r\n\t\t\t// [none]\r\n\r\n\t\t\t// set input value attrbute in markup\r\n\t\t\tthis.$element.find('input').each(function () {\r\n\t\t\t\t$(this).attr('value', $(this).val());\r\n\t\t\t});\r\n\r\n\t\t\t// empty elements to return to original markup\r\n\t\t\t// [none]\r\n\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\tdoSelect: function ($item) {\r\n\r\n\t\t\tif (typeof $item[0] !== 'undefined') {\r\n\t\t\t\t// remove selection from old item, may result in remove and\r\n\t\t\t\t// re-addition of class if item is the same\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\r\n\t\t\t\t// add selection to new item\r\n\t\t\t\tthis.$selectedItem = $item;\r\n\t\t\t\tthis.$selectedItem.addClass('selected');\r\n\r\n\t\t\t\t// update input\r\n\t\t\t\tthis.$input.val(this.$selectedItem.text().trim());\r\n\t\t\t} else {\r\n\t\t\t\t// this is a custom input, not in the menu\r\n\t\t\t\tthis.$selectedItem = null;\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclearSelection: function () {\r\n\t\t\tthis.$selectedItem = null;\r\n\t\t\tthis.$input.val('');\r\n\t\t\tthis.$dropMenu.find('li').removeClass('selected');\r\n\t\t},\r\n\r\n\t\tmenuShown: function () {\r\n\t\t\tif (this.options.autoResizeMenu) {\r\n\t\t\t\tthis.resizeMenu();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresizeMenu: function () {\r\n\t\t\tvar width = this.$element.outerWidth();\r\n\t\t\tthis.$dropMenu.outerWidth(width);\r\n\t\t},\r\n\r\n\t\tselectedItem: function () {\r\n\t\t\tvar item = this.$selectedItem;\r\n\t\t\tvar data = {};\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\tvar txt = this.$selectedItem.text().trim();\r\n\t\t\t\tdata = langx.mixin({\r\n\t\t\t\t\ttext: txt\r\n\t\t\t\t}, this.$selectedItem.data());\r\n\t\t\t} else {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: this.$input.val().trim(),\r\n\t\t\t\t\tnotFound: true\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t},\r\n\r\n\t\tselectByText: function (text) {\r\n\t\t\tvar $item = $([]);\r\n\t\t\tthis.$element.find('li').each(function () {\r\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').trim().toLowerCase() === (text || '').trim().toLowerCase()) {\r\n\t\t\t\t\t$item = $(this);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tselectByValue: function (value) {\r\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectByIndex: function (index) {\r\n\t\t\t// zero-based index\r\n\t\t\tvar selector = 'li:eq(' + index + ')';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectBySelector: function (selector) {\r\n\t\t\tvar $item = this.$element.find(selector);\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tsetDefaultSelection: function () {\r\n\t\t\tvar selector = 'li[data-selected=true]:first';\r\n\t\t\tvar item = this.$element.find(selector);\r\n\r\n\t\t\tif (item.length > 0) {\r\n\t\t\t\t// select by data-attribute\r\n\t\t\t\tthis.selectBySelector(selector);\r\n\t\t\t\titem.removeData('selected');\r\n\t\t\t\titem.removeAttr('data-selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenable: function () {\r\n\t\t\tthis.$element.removeClass('disabled');\r\n\t\t\tthis.$input.removeAttr('disabled');\r\n\t\t\tthis.$button.removeClass('disabled');\r\n\t\t},\r\n\r\n\t\tdisable: function () {\r\n\t\t\tthis.$element.addClass('disabled');\r\n\t\t\tthis.$input.attr('disabled', true);\r\n\t\t\tthis.$button.addClass('disabled');\r\n\t\t},\r\n\r\n\t\titemclicked: function (e) {\r\n\t\t\tthis.$selectedItem = $(e.target).parent();\r\n\r\n\t\t\t// set input text and trigger input change event marked as synthetic\r\n\t\t\tthis.$input.val(this.$selectedItem.text().trim()).trigger('change', {\r\n\t\t\t\tsynthetic: true\r\n\t\t\t});\r\n\r\n\t\t\t// pass object including text and any data-attributes\r\n\t\t\t// to onchange event\r\n\t\t\tvar data = this.selectedItem();\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\t// return focus to control after selecting an option\r\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\r\n\t\t},\r\n\r\n\t\tkeypress: function (e) {\r\n\t\t\tvar ENTER = 13;\r\n\t\t\t//var TAB = 9;\r\n\t\t\tvar ESC = 27;\r\n\t\t\tvar LEFT = 37;\r\n\t\t\tvar UP = 38;\r\n\t\t\tvar RIGHT = 39;\r\n\t\t\tvar DOWN = 40;\r\n\r\n\t\t\tvar IS_NAVIGATIONAL = (\r\n\t\t\t\te.which === UP ||\r\n\t\t\t\te.which === DOWN ||\r\n\t\t\t\te.which === LEFT ||\r\n\t\t\t\te.which === RIGHT\r\n\t\t\t);\r\n\r\n\t\t\tif(this.options.showOptionsOnKeypress && !this.$inputGroupBtn.hasClass('open')){\r\n\t\t\t\tthis.$button.dropdown('toggle');\r\n\t\t\t\tthis.$input.focus();\r\n\t\t\t}\r\n\r\n\t\t\tif (e.which === ENTER) {\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar selected = this.$dropMenu.find('li.selected').text().trim();\r\n\t\t\t\tif(selected.length > 0){\r\n\t\t\t\t\tthis.selectByText(selected);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.selectByText(this.$input.val());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (e.which === ESC) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.clearSelection();\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (this.options.showOptionsOnKeypress) {\r\n\t\t\t\tif (e.which === DOWN || e.which === UP) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar $selected = this.$dropMenu.find('li.selected');\r\n\t\t\t\t\tif ($selected.length > 0) {\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = $selected.next(':not(.hidden)');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = $selected.prev(':not(.hidden)');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($selected.length === 0){\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):first');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):last');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.doSelect($selected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid filtering on navigation key presses\r\n\t\t\tif (this.options.filterOnKeypress && !IS_NAVIGATIONAL) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.previousKeyPress = e.which;\r\n\t\t},\r\n\r\n\t\tinputchanged: function (e, extra) {\r\n\t\t\tvar val = $(e.target).val();\r\n\t\t\t// skip processing for internally-generated synthetic event\r\n\t\t\t// to avoid double processing\r\n\t\t\tif (extra && extra.synthetic) {\r\n\t\t\t\tthis.selectByText(val);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.selectByText(val);\r\n\r\n\t\t\t// find match based on input\r\n\t\t\t// if no match, pass the input value\r\n\t\t\tvar data = this.selectedItem();\r\n\t\t\tif (data.text.length === 0) {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: val\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\tComboBox.prototype.getValue = ComboBox.prototype.selectedItem;\r\n\r\n\r\n\r\n\treturn swt.ComboBox = ComboBox;\r\n});\r\n\ndefine('skylark-widgets-swt/TextBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var SyncAttrs = [\r\n    'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n    'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n  ];\r\n\r\n\tvar TextBox =  swt.TextBox = Widget.inherit({\r\n\t\tklassName: \"TextBox\",\r\n\r\n    pluginName: \"lark.textbox\",\r\n\r\n    /*\r\n     * Parse options from attached dom element.\r\n     * @override\r\n     */\r\n    _parse : function() {\r\n      var  velm = this._velm;\r\n\r\n      // get multiline option\r\n      this.options.multiline = velm.is(\"textarea\");\r\n      \r\n      // get current state of input\r\n      var value = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n      this.state.set(\"value\",value);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    /*\r\n     * Create a new  dom element for this widget\r\n     * @override\r\n     */\r\n    _create : function() {\r\n      var tagName = \"input\",attrs = {},\r\n          options = this.options;\r\n\r\n      langx.each([\r\n        'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n        'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n      ], function (name) {\r\n        attrs[name] = options[name];\r\n      });\r\n\r\n      if (options.multiline) {\r\n        tagName = \"textarea\"\r\n      } \r\n      if (options.subtype) {\r\n        attrs.type = options.subtype;\r\n      }\r\n      this._elm = this._dom.noder.createElement(tagName,attrs);\r\n    },\r\n\r\n    /*\r\n     * Init this widget\r\n     * @override\r\n     */\r\n    _init : function() {\r\n    },\r\n\r\n    /*\r\n     * Sync dom element to widget state \r\n     * @override\r\n     */\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this._velm.on('change', function(evt) {\r\n        var value = self._velm.prop('value');\r\n        self.state.set(\"value\",value);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n        var self  = this;\r\n\r\n        if (updates[\"value\"] !== undefined) {\r\n          if (self._velm.value() !== e.value) {\r\n            self._velm.value(updates.value);\r\n          }\r\n        }\r\n        if (updates[\"disabled\"] !== undefined) {\r\n          self._velm.disable(updates[\"disabled\"]);\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n    },\r\n\r\n  });\r\n\r\n\treturn TextBox;\r\n});\r\n\r\n\n define('skylark-widgets-swt/ListGroup',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n    var ListGroup = Widget.inherit({\r\n        klassName : \"ListGroup\",\r\n\r\n        pluginName : \"lark.listgroup\",\r\n\r\n        options : {\r\n        \tmultiSelect: false,\r\n        \tmultiTier : false,\r\n        \ttoggle : false,\r\n        \tclasses : {\r\n          \tactive : \"active\"\r\n        \t},\r\n        \tselectors : {\r\n          \titem : \".list-group-item\"\r\n        \t},\r\n        \tselected : 0\r\n        },\r\n\r\n        state : {\r\n          selected : Object\r\n        },\r\n\r\n        _init : function() {\r\n            this.overrided();\r\n            var self = this,\r\n                velm = this._velm,\r\n                itemSelector = this.options.selectors.item;\r\n\r\n            this._$items = velm.$(itemSelector);\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = self._elmx(this);\r\n\r\n                if (!veItem.hasClass('disabled')) {\r\n                  var value = veItem.data(\"value\");\r\n                  if (value === undefined) {\r\n                    value = self._$items.index(this);\r\n                  }\r\n                  self.state.set(\"selected\",value);\r\n                }\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n            this.state.set(\"selected\",this.options.selected);\r\n\r\n            var $this = velm,\r\n                $toggle = this.options.toggle,\r\n                obj = this;\r\n\r\n            //if (this.isIE() <= 9) {\r\n            //    $this.find(\"li.active\").has(\"ul\").children(\"ul\").collapse(\"show\");\r\n            //    $this.find(\"li\").not(\".active\").has(\"ul\").children(\"ul\").collapse(\"hide\");\r\n            //} else {\r\n                $this.query(\"li.active\").has(\"ul\").children(\"ul\").addClass(\"collapse in\");\r\n                $this.query(\"li\").not(\".active\").has(\"ul\").children(\"ul\").addClass(\"collapse\");\r\n            //}\r\n\r\n            //add the \"doubleTapToGo\" class to active items if needed\r\n            if (obj.options.doubleTapToGo) {\r\n                $this.query(\"li.active\").has(\"ul\").children(\"a\").addClass(\"doubleTapToGo\");\r\n            }\r\n\r\n            $this.query(\"li\").has(\"ul\").children(\"a\").on(\"click\" + \".\" + this.pluginName, function(e) {\r\n                e.preventDefault();\r\n\r\n                //Do we need to enable the double tap\r\n                if (obj.options.doubleTapToGo) {\r\n\r\n                    //if we hit a second time on the link and the href is valid, navigate to that url\r\n                    if (obj.doubleTapToGo($(this)) && $(this).attr(\"href\") !== \"#\" && $(this).attr(\"href\") !== \"\") {\r\n                        e.stopPropagation();\r\n                        document.location = $(this).attr(\"href\");\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                $(this).parent(\"li\").toggleClass(\"active\").children(\"ul\").collapse(\"toggle\");\r\n\r\n                if ($toggle) {\r\n                    $(this).parent(\"li\").siblings().removeClass(\"active\").children(\"ul.in\").collapse(\"hide\");\r\n                }\r\n\r\n            });\r\n\r\n\r\n        },\r\n\r\n        _refresh : function(updates) {\r\n          this.overrided(updates);\r\n          var self  = this;\r\n\r\n          function findItem(valueOrIdx) {\r\n            var $item;\r\n            if (langx.isNumber(valueOrIdx)) {\r\n              $item = self._$items.eq(valueOrIdx);\r\n            } else {\r\n              $item = self._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n            }\r\n            return $item;\r\n          } \r\n                 \r\n          function selectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).addClass(self.options.classes.active);\r\n          }\r\n\r\n          function unselectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).removeClass(self.options.classes.active);\r\n          }\r\n\r\n          if (updates[\"selected\"]) {\r\n            if (this.options.multiSelect) {\r\n            } else {\r\n              unselectOneItem(updates[\"selected\"].oldValue);\r\n              selectOneItem(updates[\"selected\"].value);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n  });\r\n\r\n  return ListGroup;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Menu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\t\r\n\tvar popup = null;\r\n\tvar right_to_left ;\r\n\r\n\tvar Menu = swt.Menu = Widget.inherit({\r\n        klassName: \"Menu\",\r\n\r\n\t    pluginName : \"lark.menu\",\r\n\r\n        init : function(elm,options) {\r\n        \tif (!options) {\r\n        \t\toptions = elm;\r\n        \t\telm = null;\r\n        \t}\r\n\t\t\tvar self = this,$el;\r\n\r\n\t\t\tthis._options = langx.mixin({\r\n\t\t\t\t\thide_onmouseleave\t: 0,\r\n\t\t\t\t\ticons\t\t\t\t: true\r\n\r\n\t\t\t},options);\r\n\r\n\t\t\tif (!elm) {\r\n\t\t\t\t$el = this.$el = $(\"<ul class='vakata-context'></ul>\");\r\n\t\t\t} else {\r\n\t\t\t\t$el = this.$el = $(elm);\r\n\t\t\t}\r\n\r\n\t\t\tvar to = false;\r\n\t\t\t$el.on(\"mouseenter\", \"li\", function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) {\r\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\r\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\t$el.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\r\n\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\r\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\tself._show_submenu(this);\r\n\t\t\t\t})\r\n\t\t\t\t// тестово - дали не натоварва?\r\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) { return; }\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseleave\", function (e) {\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\tif(self._options.hide_onmouseleave) {\r\n\t\t\t\t\t\tto = setTimeout(\r\n\t\t\t\t\t\t\t(function (t) {\r\n\t\t\t\t\t\t\t\treturn function () { self.hide(); };\r\n\t\t\t\t\t\t\t}(this)), self._options.hide_onmouseleave);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", \"a\", function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t//})\r\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\r\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && self._execute($(this).attr(\"rel\")) !== false) {\r\n\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on('keydown', 'a', function (e) {\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 13:\r\n\t\t\t\t\t\t\tcase 32:\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 27:\r\n\t\t\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t//console.log(e.which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('keydown', function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar a = self.$el.find('.vakata-contextmenu-shortcut-' + e.which).parent();\r\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\r\n\t\t\t\t\t\ta.click();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.render();\r\n        },\r\n\r\n        render : function() {\r\n        \tvar items = this._options.items;\r\n\t\t\tif(this._parse(items)) {\r\n\t\t\t\tthis.$el.html(this.html);\r\n\t\t\t}\r\n\t\t\tthis.$el.width('');\r\n        },\r\n\r\n\t\t_trigger : function (event_name) {\r\n\t\t\t$(document).trigger(\"context_\" + event_name + \".sbswt\", {\r\n\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},        \r\n\r\n\t\t_execute : function (i) {\r\n\t\t\ti = this.items[i];\r\n\t\t\treturn i && (!i._disabled || (langx.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : this.reference, \"element\" : this.$el }))) && i.action ? i.action.call(null, {\r\n\t\t\t\t\t\t\"item\"\t\t: i,\r\n\t\t\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) : false;\r\n\t\t},\r\n\t\t_parse : function (o, is_callback) {\r\n\t\t\tvar self = this,\r\n\t\t\t\treference = self._options.reference;\r\n\r\n\t\t\tif(!o) { return false; }\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\tself.html\t\t= \"\";\r\n\t\t\t\tself.items\t= [];\r\n\t\t\t}\r\n\t\t\tvar str = \"\",\r\n\t\t\t\tsep = false,\r\n\t\t\t\ttmp;\r\n\r\n\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\r\n\t\t\tlangx.each(o, function (i, val) {\r\n\t\t\t\tif(!val) { return true; }\r\n\t\t\t\tself.items.push(val);\r\n\t\t\t\tif(!sep && val.separator_before) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t}\r\n\t\t\t\tsep = false;\r\n\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || (langx.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : reference, \"element\" : self.$el })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\r\n\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (self.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\r\n\t\t\t\tif(self._options.icons) {\r\n\t\t\t\t\tstr += \"<\"+\"i \";\r\n\t\t\t\t\tif(val.icon) {\r\n\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\r\n\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\r\n\t\t\t\t}\r\n\t\t\t\tstr += (langx.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : reference, \"element\" : self.$el }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\r\n\t\t\t\tif(val.submenu) {\r\n\t\t\t\t\ttmp = self._parse(val.submenu, true);\r\n\t\t\t\t\tif(tmp) { str += tmp; }\r\n\t\t\t\t}\r\n\t\t\t\tstr += \"<\"+\"/li>\";\r\n\t\t\t\tif(val.separator_after) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\tsep = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\r\n\t\t\tif(is_callback) { str += \"</ul>\"; }\r\n\t\t\t/**\r\n\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\r\n\t\t\t * @event\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t * @name context_parse.vakata\r\n\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t */\r\n\t\t\tif(!is_callback) { self.html = str; self._trigger(\"parse\"); }\r\n\t\t\treturn str.length > 10 ? str : false;\r\n\t\t},\r\n\t\t_show_submenu : function (o) {\r\n\t\t\to = $(o);\r\n\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\r\n\t\t\tvar e = o.children(\"ul\"),\r\n\t\t\t\txl = o.offset().left,\r\n\t\t\t\tx = xl + o.outerWidth(),\r\n\t\t\t\ty = o.offset().top,\r\n\t\t\t\tw = e.width(),\r\n\t\t\t\th = e.height(),\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\r\n\t\t\tif(right_to_left) {\r\n\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\to[x + w > dw  && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\r\n\t\t\t}\r\n\t\t\tif(y + h + 10 > dh) {\r\n\t\t\t\te.css(\"bottom\",\"-1px\");\r\n\t\t\t}\r\n\r\n\t\t\t//if does not fit - stick it to the side\r\n\t\t\tif (o.hasClass('vakata-context-right')) {\r\n\t\t\t\tif (xl < w) {\r\n\t\t\t\t\te.css(\"margin-right\", xl - w);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (dw - x < w) {\r\n\t\t\t\t\te.css(\"margin-left\", dw - x - w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\te.show();\r\n\t\t},\r\n\t\tshow : function (reference, position, data) {\r\n\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\r\n\t\t\tswitch(cond) {\r\n\t\t\t\tcase (!position && !reference):\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tcase (!!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\to = reference.offset();\r\n\t\t\t\t\tthis.position_x\t= o.left + reference.outerHeight();\r\n\t\t\t\t\tthis.position_y\t= o.top;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!!position && !reference):\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\r\n\t\t\t\tdata = $(reference).data('vakata_contextmenu');\r\n\t\t\t}\r\n\r\n\t\t\tif(this.items.length) {\r\n\t\t\t\tthis.$el.appendTo(document.body);\r\n\t\t\t\te = this.$el;\r\n\t\t\t\tx = this.position_x;\r\n\t\t\t\ty = this.position_y;\r\n\t\t\t\tw = e.width();\r\n\t\t\t\th = e.height();\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tx -= (e.outerWidth() - $(reference).outerWidth());\r\n\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\r\n\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(x + w + 20 > dw) {\r\n\t\t\t\t\tx = dw - (w + 20);\r\n\t\t\t\t}\r\n\t\t\t\tif(y + h + 20 > dh) {\r\n\t\t\t\t\ty = dh - (h + 20);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$el\r\n\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\r\n\t\t\t\t\t.show()\r\n\t\t\t\t\t.find('a').first().focus().parent().addClass(\"vakata-context-hover\");\r\n\t\t\t\tthis.is_visible = true;\r\n\r\n\t\t\t\tpopup = this;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_show.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"show\");\r\n\t\t\t}\r\n\t\t},\r\n\t\thide : function () {\r\n\t\t\tif(this.is_visible) {\r\n\t\t\t\tthis.$el.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\r\n\t\t\t\tthis.is_visible = false;\r\n\t\t\t\tpopup = null;\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_hide.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"hide\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n    });\t\r\n\r\n\t$(function () {\r\n\t\tright_to_left = $(document.body).css(\"direction\") === \"rtl\";\r\n\r\n\t\t$(document)\r\n\t\t\t.on(\"mousedown.sbswt.popup\", function (e) {\r\n\t\t\t\tif(popup && popup.$el[0] !== e.target  && !noder.contains(popup.$el[0], e.target)) {\r\n\t\t\t\t\tpopup.hide();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"context_show.sbswt.popup\", function (e, data) {\r\n\t\t\t\tpopup.$el.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tpopup.$el.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\r\n\t\t\t\t}\r\n\t\t\t\t// also apply a RTL class?\r\n\t\t\t\tpopup.$el.find(\"ul\").hide().end();\r\n\t\t\t});\r\n\t});\r\n\r\n\tMenu.popup = function (reference, position, data) {\r\n\t\tvar m = new Menu({\r\n\t\t\treference : reference,\r\n\t\t\titems : data\r\n\t\t});\r\n\t\tm.show(reference,position);\r\n\t};\r\n\r\n\tMenu.hide = function() {\r\n\t\tif (popup) {\r\n\t\t\tpopup.hide();\r\n\t\t}\r\n\t}\r\n\r\n\treturn Menu;\r\n\r\n});\r\n\ndefine('skylark-widgets-swt/Pagination',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n    var Pagination = swt.Pagination = Widget.inherit({\r\n        klassName : \"Pagination\",\r\n\r\n        pluginName : \"lark.pagination\",\r\n\r\n        options : {\r\n            tagName : \"ul\",\r\n            css : \"\",\r\n            selectors : {\r\n                firstNavi : \"li[aria-label='first']\",\r\n                prevNavi : \"li[aria-label='prev']\",\r\n                nextNavi : \"li[aria-label='next']\",\r\n                lastNavi : \"li[aria-label='last']\",\r\n                numericNavi : \"li:not([aria-label])\",\r\n                numericTxt  : \"a\"\r\n            },\r\n            totalPages: 7,\r\n            maxButtonsVisible: 5,\r\n            currentPage: 1     \r\n        },\r\n\r\n        state : {\r\n            totalPages : Number,\r\n            currentPage : Number\r\n        },\r\n\r\n        _parse : function(elm,options) {\r\n\r\n        },\r\n        \r\n        _create : function(self) {\r\n        },\r\n\r\n        _init : function() {\r\n          this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n          this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n          this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n          this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n          this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n          var self = this;\r\n\r\n          function checkCanAction(elm) {\r\n            var $elm = $(elm);\r\n            if ($elm.is(\".disabled,.active\")) {\r\n              return false;\r\n            } else {\r\n              return $elm;\r\n            }\r\n          }\r\n\r\n          this.$first.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(1);\r\n          });\r\n\r\n          this.$prev.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()-1);\r\n          });\r\n\r\n          this.$last.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.totalPages());\r\n          });\r\n\r\n          this.$next.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()+1);\r\n          });\r\n\r\n          this.$numeric.click(function(){\r\n            var ret = checkCanAction(this)\r\n            if (!ret) {\r\n              return;\r\n            }\r\n            var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n                pageNo = parseInt(numeric);\r\n            self.currentPage(pageNo);\r\n\r\n          });\r\n\r\n          this.state.set(\"currentPage\",this.options.currentPage);\r\n          this.state.set(\"totalPages\",this.options.totalPages);\r\n\r\n          this.overrided();\r\n        },\r\n\r\n        _refresh: function (updates) {\r\n          this.overrided(updates);\r\n          var self = this;\r\n\r\n          function changePageNoBtns(currentPage,totalPages) {\r\n\r\n            // Create the numeric buttons.\r\n            // Variable of number control in the buttons.\r\n            var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n            var begin = 1;\r\n            var end = begin + totalPageNoBtns - 1;\r\n\r\n            /*\r\n             * Align the values in the begin and end variables if the user has the\r\n             * possibility that select a page that doens't appear in the paginador.\r\n             * e.g currentPage = 1, and user go to the 20 page.\r\n             */\r\n            while ((currentPage < begin) || (currentPage > end)) {\r\n              if (currentPage > end) {\r\n                 begin += totalPageNoBtns;\r\n                 end += totalPageNoBtns;\r\n\r\n                 if (end > totalPages) {\r\n                   begin = begin - (end - totalPages);\r\n                   end = totalPages;\r\n                 }\r\n               } else {\r\n                 begin -= totalPageNoBtns;\r\n                 end -= totalPageNoBtns;\r\n\r\n                 if (begin < 0) {\r\n                   end = end + (begin + totalPageNoBtns);\r\n                   begin = 1;\r\n                 }\r\n               }\r\n            }\r\n           /*\r\n            * Verify if the user clicks in the last page show by paginator.\r\n            * If yes, the paginator advances.\r\n            */\r\n            if ((currentPage === end) && (totalPages != 1)) {\r\n              begin = currentPage - 1;\r\n              end = begin + totalPageNoBtns - 1;\r\n\r\n              if (end >= totalPages) {\r\n                begin = begin - (end - (totalPages));\r\n                end = totalPages;\r\n              }\r\n            }\r\n\r\n            /*\r\n             * Verify it the user clicks in the first page show by paginator.\r\n             * If yes, the paginator retrogress\r\n             */\r\n             if ((begin === currentPage) && (totalPages != 1)) {\r\n               if (currentPage != 1) {\r\n                 end = currentPage + 1;\r\n                 begin = end - (totalPageNoBtns - 1);\r\n               }\r\n             }\r\n\r\n             var count = self.$numeric.size(),\r\n                 visibles = end-begin + 1,\r\n                 i = 0;\r\n\r\n             self.$numeric.filter(\".active\").removeClass(\"active\");\r\n             while (i<visibles) {\r\n               var pageNo = i + begin,\r\n                   $btn = self.$numeric.eq(i);\r\n               $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n               if (pageNo == currentPage) {\r\n                $btn.addClass(\"active\");\r\n               }\r\n               i++;\r\n             }\r\n             while (i<count) {\r\n               self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n               i++;\r\n             }\r\n\r\n\r\n          }\r\n\r\n          function changeLabeldBtns(currentPage,totalPages) {\r\n            if (currentPage < 1) {\r\n              throw('Page can\\'t be less than 1');\r\n            } else if (currentPage > totalPages) {\r\n              throw('Page is bigger than total pages');\r\n            }\r\n\r\n            if (totalPages < 1) {\r\n              throw('Total Pages can\\'t be less than 1');\r\n            }\r\n\r\n            if (currentPage == 1 ) {\r\n              self.$first.addClass(\"disabled\");\r\n              self.$prev.addClass(\"disabled\");\r\n            } else {\r\n              self.$first.removeClass(\"disabled\");\r\n              self.$prev.removeClass(\"disabled\");\r\n            }\r\n\r\n            if (currentPage == totalPages ) {\r\n              self.$last.addClass(\"disabled\");\r\n              self.$next.addClass(\"disabled\");\r\n            } else {\r\n              self.$last.removeClass(\"disabled\");\r\n              self.$next.removeClass(\"disabled\");\r\n            }\r\n          }\r\n\r\n          if (updates.currentPage || updates.totalPages) {\r\n            var currentPage = self.currentPage(),\r\n                totalPages = self.totalPages();\r\n\r\n            changePageNoBtns(currentPage,totalPages);\r\n            changeLabeldBtns(currentPage,totalPages);\r\n          }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return Pagination;\r\n});\ndefine('skylark-widgets-swt/Progress',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n     var Progress = swt.Progress = Widget.inherit({\r\n     \tklassName : \"Progress\",\r\n\r\n     \tpluginName : \"lark.progress\",\r\n\r\n     \toptions : {\r\n     \t\tselectors : {\r\n     \t\t\tbar : \"progress-bar\"\r\n     \t\t},\r\n     \t\tmin : 0,\r\n     \t\tmax : 100\r\n     \t},\r\n\r\n     \tstate : {\r\n     \t\tvalue : Number\r\n     \t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis._vbar = this._velm.find(this.options.selectors.bar);\r\n\t\t\tthis.value(this.options.min);\r\n\t\t},\r\n\r\n\t\t_refresh : function() {\r\n\t        this.overrided(changed);\r\n\t        var self  = this;\r\n\r\n\t        if (updates[\"value\"] !== undefined) {\r\n\t        \tvar value = updates[\"value\"],\r\n\t        \t\tmin = this.options.min,\r\n\t        \t\tmax = this.options.max;\r\n\r\n\t\t\t\tthis._vbar.css(\"width\",(value-min)/(max-min)*100+\"%\");\r\n\t        }\r\n\t\t},\r\n\r\n\t\tstart : function(max){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideDown();\r\n\t\t},\r\n\r\n\t\tincrease : function(tick){\r\n\t\t\tvar value = this.value();\r\n\t\t\tthis.value(value += tick*1.0);\r\n\t\t},\r\n\r\n\t\tfinish : function(){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideUp();\r\n\t\t}     \t\r\n     });\r\n\r\n\treturn Progress;\r\n\t\r\n });\ndefine('skylark-widgets-swt/Radio',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var Radio = swt.Radio = _Toggler.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"lark.radio\",\r\n\r\n    _parse : function() {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      this.state.set(\"checked\",checked);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    _init : function() {\r\n      //this.options = langx.mixin({}, $.fn.checkbox.defaults, options);\r\n      var element = this.domNode;\r\n      var $element = $(element);\r\n\r\n      if (element.tagName.toLowerCase() !== 'label') {\r\n        logError('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$radio = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        logError('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$radio.on('change', function(evt) {\r\n        //var $radio = $(evt.target);\r\n        var checked = self.$radio.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            // reset all items in group\r\n            this.resetGroup();\r\n\r\n            $radio.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $radio.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $radio.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $radio.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    },\r\n\r\n    resetGroup: function resetGroup () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    }\r\n  });\r\n\r\n  return Radio;\r\n});\r\n\r\n\ndefine('skylark-widgets-swt/SearchBox',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-dom/browser\",\n  \"skylark-utils-dom/eventer\",\n  \"skylark-utils-dom/noder\",\n  \"skylark-utils-dom/geom\",\n  \"skylark-utils-dom/query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SEARCH CONSTRUCTOR AND PROTOTYPE\n\n\tvar SearchBox = Widget.inherit({\n\t\tklassName: \"SearchBox\",\n\n\t\tpluginName: \"lark.searchbox\",\n\n\t\toptions : {\n\t\t\tclearOnEmpty: false,\n\t\t\tsearchOnKeyPress: false,\n\t\t\tallowCancel: false\n\t\t},\n\t\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\tthis.$repeater = this.$element.closest('.repeater');\n\n\t\t\tif (this.$element.attr('data-searchOnKeyPress') === 'true'){\n\t\t\t\tthis.options.searchOnKeyPress = true;\n\t\t\t}\n\n\t\t\tthis.$button = this.$element.find('button');\n\t\t\tthis.$input = this.$element.find('input');\n\t\t\tthis.$icon = this.$element.find('.glyphicon, .fuelux-icon');\n\n\t\t\tthis.$button.on('click.fu.search', langx.proxy(this.buttonclicked, this));\n\t\t\tthis.$input.on('keyup.fu.search', langx.proxy(this.keypress, this));\n\n\t\t\tif (this.$repeater.length > 0) {\n\t\t\t\tthis.$repeater.on('rendered.fu.repeater', langx.proxy(this.clearPending, this));\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t},\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// set input value attrbute\n\t\t\tthis.$element.find('input').each(function () {\n\t\t\t\t$(this).attr('value', $(this).val());\n\t\t\t});\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tsearch: function (searchText) {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-search').addClass('glyphicon-remove');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-search').addClass('fuelux-icon-remove');\n\t\t\t}\n\n\t\t\tthis.activeSearch = searchText;\n\t\t\tthis.$element.addClass('searched pending');\n\t\t\tthis.$element.trigger('searched.fu.search', searchText);\n\t\t},\n\n\t\tclear: function () {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-remove').addClass('glyphicon-search');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-remove').addClass('fuelux-icon-search');\n\t\t\t}\n\n\t\t\tif (this.$element.hasClass('pending')) {\n\t\t\t\tthis.$element.trigger('canceled.fu.search');\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t\tthis.$input.val('');\n\t\t\tthis.$element.trigger('cleared.fu.search');\n\t\t\tthis.$element.removeClass('searched pending');\n\t\t},\n\n\t\tclearPending: function () {\n\t\t\tthis.$element.removeClass('pending');\n\t\t},\n\n\t\taction: function () {\n\t\t\tvar val = this.$input.val();\n\n\t\t\tif (val && val.length > 0) {\n\t\t\t\tthis.search(val);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t},\n\n\t\tbuttonclicked: function (e) {\n\t\t\te.preventDefault();\n\t\t\tif ($(e.currentTarget).is('.disabled, :disabled')) return;\n\n\t\t\tif (this.$element.hasClass('pending') || this.$element.hasClass('searched')) {\n\t\t\t\tthis.clear();\n\t\t\t} else {\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function (e) {\n\t\t\tvar ENTER_KEY_CODE = 13;\n\t\t\tvar TAB_KEY_CODE = 9;\n\t\t\tvar ESC_KEY_CODE = 27;\n\n\t\t\tif (e.which === ENTER_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.action();\n\t\t\t} else if (e.which === TAB_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t} else if (e.which === ESC_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.clear();\n\t\t\t} else if (this.options.searchOnKeyPress) {\n\t\t\t\t// search on other keypress\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$input.attr('disabled', 'disabled');\n\n\t\t\tif (!this.options.allowCancel) {\n\t\t\t\tthis.$button.addClass('disabled');\n\t\t\t}\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$input.removeAttr('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t}\n\t});\n\n\treturn \tswt.SearchBox = SearchBox;\n});\n\ndefine('skylark-widgets-swt/SelectList',[\n  \"skylark-langx/langx\",\n  \"skylark-utils-dom/browser\",\n  \"skylark-utils-dom/eventer\",\n  \"skylark-utils-dom/noder\",\n  \"skylark-utils-dom/geom\",\n  \"skylark-utils-dom/query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SELECT CONSTRUCTOR AND PROTOTYPE\n\n\tvar SelectList = Widget.inherit({\n\t\tklassName: \"SelectList\",\n\n\t\tpluginName : \"lark.selectlist\",\n\t\n\t\toptions : {\n\t\t\temptyLabelHTML: '<li data-value=\"\"><a href=\"#\">No items</a></li>'\n\n\t\t},\n\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\t//this.options = langx.mixin({}, $.fn.selectlist.defaults, options);\n\n\n\t\t\tthis.$button = this.$element.find('.btn.dropdown-toggle');\n\t\t\tthis.$hiddenField = this.$element.find('.hidden-field');\n\t\t\tthis.$label = this.$element.find('.selected-label');\n\t\t\tthis.$dropdownMenu = this.$element.find('.dropdown-menu');\n\n\t\t\tthis.$button.dropdown();\n\n\t\t\tthis.$element.on('click.fu.selectlist', '.dropdown-menu a', langx.proxy(this.itemClicked, this));\n\t\t\tthis.setDefaultSelection();\n\n\t\t\tif (this.options.resize === 'auto' || this.$element.attr('data-resize') === 'auto') {\n\t\t\t\tthis.resize();\n\t\t\t}\n\n\t\t\t// if selectlist is empty or is one item, disable it\n\t\t\tvar items = this.$dropdownMenu.children('li');\n\t\t\tif( items.length === 0) {\n\t\t\t\tthis.disable();\n\t\t\t\tthis.doSelect( $(this.options.emptyLabelHTML));\n\t\t\t}\n\n\t\t\t// support jumping focus to first letter in dropdown when key is pressed\n\t\t\tthis.$element.on('shown.bs.dropdown', function () {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t// attach key listener when dropdown is shown\n\t\t\t\t\t$(document).on('keypress.fu.selectlist', function(e){\n\n\t\t\t\t\t\t// get the key that was pressed\n\t\t\t\t\t\tvar key = String.fromCharCode(e.which);\n\t\t\t\t\t\t// look the items to find the first item with the first character match and set focus\n\t\t\t\t\t\t$this.find(\"li\").each(function(idx,item){\n\t\t\t\t\t\t\tif ($(item).text().charAt(0).toLowerCase() === key) {\n\t\t\t\t\t\t\t\t$(item).children('a').focus();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// unbind key event when dropdown is hidden\n\t\t\tthis.$element.on('hide.bs.dropdown', function () {\n\t\t\t\t\t$(document).off('keypress.fu.selectlist');\n\t\t\t});\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tdoSelect: function ($item) {\n\t\t\tvar $selectedItem;\n\t\t\tthis.$selectedItem = $selectedItem = $item;\n\n\t\t\tthis.$hiddenField.val(this.$selectedItem.attr('data-value'));\n\t\t\tthis.$label.html($(this.$selectedItem.children()[0]).html());\n\n\t\t\t// clear and set selected item to allow declarative init state\n\t\t\t// unlike other controls, selectlist's value is stored internal, not in an input\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ($selectedItem.is($(this))) {\n\t\t\t\t\t$(this).attr('data-selected', true);\n\t\t\t\t} else {\n\t\t\t\t\t$(this).removeData('selected').removeAttr('data-selected');\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\titemClicked: function (e) {\n\t\t\tthis.$element.trigger('clicked.fu.selectlist', this.$selectedItem);\n\n\t\t\te.preventDefault();\n\t\t\t// ignore if a disabled item is clicked\n\t\t\tif ($(e.currentTarget).parent('li').is('.disabled, :disabled')) { return; }\n\n\t\t\t// is clicked element different from currently selected element?\n\t\t\tif (!($(e.target).parent().is(this.$selectedItem))) {\n\t\t\t\tthis.itemChanged(e);\n\t\t\t}\n\n\t\t\t// return focus to control after selecting an option\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\n\t\t},\n\n\t\titemChanged: function (e) {\n\t\t\t//selectedItem needs to be <li> since the data is stored there, not in <a>\n\t\t\tthis.doSelect($(e.target).closest('li'));\n\n\t\t\t// pass object including text and any data-attributes\n\t\t\t// to onchange event\n\t\t\tvar data = this.selectedItem();\n\t\t\t// trigger changed event\n\t\t\tthis.$element.trigger('changed.fu.selectlist', data);\n\t\t},\n\n\t\tresize: function () {\n\t\t\tvar width = 0;\n\t\t\tvar newWidth = 0;\n\t\t\tvar sizer = $('<div/>').addClass('selectlist-sizer');\n\n\n\t\t\tif (Boolean($(document).find('html').hasClass('fuelux'))) {\n\t\t\t\t// default behavior for fuel ux setup. means fuelux was a class on the html tag\n\t\t\t\t$(document.body).append(sizer);\n\t\t\t} else {\n\t\t\t\t// fuelux is not a class on the html tag. So we'll look for the first one we find so the correct styles get applied to the sizer\n\t\t\t\t$('.fuelux:first').append(sizer);\n\t\t\t}\n\n\t\t\tsizer.append(this.$element.clone());\n\n\t\t\tthis.$element.find('a').each(function () {\n\t\t\t\tsizer.find('.selected-label').text($(this).text());\n\t\t\t\tnewWidth = sizer.find('.selectlist').outerWidth();\n\t\t\t\tnewWidth = newWidth + sizer.find('.sr-only').outerWidth();\n\t\t\t\tif (newWidth > width) {\n\t\t\t\t\twidth = newWidth;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (width <= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$button.css('width', width);\n\t\t\tthis.$dropdownMenu.css('width', width);\n\n\t\t\tsizer.remove();\n\t\t},\n\n\t\tselectedItem: function () {\n\t\t\tvar txt = this.$selectedItem.text();\n\t\t\treturn langx.mixin({\n\t\t\t\ttext: txt\n\t\t\t}, this.$selectedItem.data());\n\t\t},\n\n\t\tselectByText: function (text) {\n\t\t\tvar $item = $([]);\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').toLowerCase() === (text || '').toLowerCase()) {\n\t\t\t\t\t$item = $(this);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tselectByValue: function (value) {\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectByIndex: function (index) {\n\t\t\t// zero-based index\n\t\t\tvar selector = 'li:eq(' + index + ')';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectBySelector: function (selector) {\n\t\t\tvar $item = this.$element.find(selector);\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tsetDefaultSelection: function () {\n\t\t\tvar $item = this.$element.find('li[data-selected=true]').eq(0);\n\n\t\t\tif ($item.length === 0) {\n\t\t\t\t$item = this.$element.find('li').has('a').eq(0);\n\t\t\t}\n\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$button.addClass('disabled');\n\t\t}\n\n\t});\t\n\n\n\tSelectList.prototype.getValue = SelectList.prototype.selectedItem;\n\n\n\n\treturn swt.SelectList = SelectList;\n});\n\ndefine('skylark-widgets-swt/Tabular',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n        _showEmptyMessage : function (settings, skipWidthCalculation) {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n            $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n            if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n                // Check scrolling enabled\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    // Set the width of empty message cell to the thead width\r\n                    $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n                }\r\n            }\r\n        },  \r\n\r\n        _calculateColumnWidth : function () {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $tbWhole = $('table.body', tbWrap);\r\n            var $scroller = $('div.scroller', tbWrap);\r\n            var settings = $tbWhole.data('appendGrid');\r\n            var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n            var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n            // Check any rows within the grid\r\n            if (settings._rowOrder.length > 0) {\r\n                // Reset the table/column width\r\n                $('td', tbHeadRow).width('auto');\r\n                $('col', tbColGp).width('auto');\r\n                $tbWhole.width('auto');\r\n                $scroller.width('auto');\r\n                // Check the total number of columns\r\n                var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n                var marginThreshold = -2;\r\n                if ($.fn.modal) {\r\n                    // If bootstrap is loaded, cell margin was reset\r\n                    marginThreshold = 1;\r\n                }\r\n                var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n                for (var z = 0; z < colLimit; z++) {\r\n                    var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                    var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                    if (bodyCellWidth > headCellWidth) {\r\n                        tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                    } else {\r\n                        tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n            }\r\n            // Set the width of footer row\r\n            $('table.foot', tbWrap).width($tbWhole.width());\r\n            // Check the scroll panel width\r\n            $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n        },\r\n\r\n\r\n        _createGridButton : function (param, uiIcon) {\r\n            // Generate the standard grid action button based on its parameter.\r\n            var genButton = null;\r\n            if (param) {\r\n                if (langx.isFunction(param)) {\r\n                    // Generate button if it is a function.\r\n                    genButton = $(param());\r\n                } else if (param.nodeType) {\r\n                    // Clone the button if it is a DOM element.\r\n                    genButton = $(param).clone();\r\n                } else if (param.icon || param.label) {\r\n                    // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                    genButton = $('<button/>').attr({ type: 'button' });\r\n                    genButton.plugin(\"lark.button\",param);\r\n                }\r\n            }\r\n            if (!genButton) {\r\n                // Use default setting (jQuery UI Button) if button is not created.\r\n                genButton = $('<button/>').attr({ type: 'button' });\r\n                genButton.plugin(\"lark.button\",{ icon: uiIcon, showLabel: false });\r\n            }\r\n            return genButton;\r\n        },\r\n\r\n        _sortSequence : function (startIndex) {\r\n            var tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (!settings.hideRowNumColumn) {\r\n                for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                    $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        _emptyGrid : function () {\r\n            var tbWhole = this._elm;\r\n\r\n            // Load settings\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Remove rows\r\n            $('tbody', tbWhole).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Add empty row\r\n            this._showEmptyMessage(settings);\r\n        },        \r\n\r\n        _gridRowDragged : function (isMoveUp, uniqueIndex, tbRowIndex) {\r\n            var tbWhole = this._elm;\r\n\r\n            // Get setting\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Find the start sorting index\r\n            var startIndex = -1;\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    if (isMoveUp) {\r\n                        startIndex = tbRowIndex;\r\n                        settings._rowOrder.splice(z, 1);\r\n                        settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                    } else {\r\n                        startIndex = z;\r\n                        settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                        settings._rowOrder.splice(z, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // Do re-order\r\n            this._sortSequence( startIndex);\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n\r\n            // Trigger event\r\n            if (langx.isFunction(settings.afterRowDragged)) {\r\n                settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n            }\r\n        },\r\n\r\n       _saveSetting : function (settings) {\r\n            var tbWhole = this._elm;\r\n\r\n            $(tbWhole).data('appendGrid', settings);\r\n            $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n        },\r\n\r\n\r\n        _checkGridAndGetSettings : function (noMsg) {\r\n            // Check the jQuery grid object is initialized and return its settings\r\n\r\n            var settings = null,\r\n                $grid = $(this._elm);\r\n\r\n            if ($grid.length == 1) {\r\n                settings = $grid.data('appendGrid');\r\n                if (!settings && !noMsg) {\r\n                    alert(_systemMessages.notInit);\r\n                }\r\n            } else if (!noMsg) {\r\n                alert(_systemMessages.getValueMultiGrid);\r\n            }\r\n            return settings;\r\n        },\r\n\r\n        _insertRow : function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            // Define variables\r\n            var self = this,\r\n                tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n            var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maxBodyHeight > 0) {\r\n                tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n            }\r\n            // Check number of row to be inserted\r\n            var numOfRow = numOfRowOrRowArray, loadData = false;\r\n            if (langx.isArray(numOfRowOrRowArray)) {\r\n                numOfRow = numOfRowOrRowArray.length;\r\n                loadData = true;\r\n            }\r\n            // Check parent row\r\n            if (langx.isNumeric(callerUniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                        rowIndex = z;\r\n                        if (z != 0) parentIndex = z - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (langx.isNumeric(rowIndex)) {\r\n                if (rowIndex >= settings._rowOrder.length) {\r\n                    rowIndex = null;\r\n                } else {\r\n                    parentIndex = rowIndex - 1;\r\n                }\r\n            }\r\n            else if (settings._rowOrder.length != 0) {\r\n                rowIndex = null;\r\n                parentIndex = settings._rowOrder.length - 1;\r\n            }\r\n            // Store old grid height\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                $('tr.empty', tbWhole).remove();\r\n                calColWidth = true;\r\n            }\r\n            // Add total number of row\r\n            for (var z = 0; z < numOfRow; z++) {\r\n                // Check maximum number of rows\r\n                if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                    reachMaxRow = true;\r\n                    break;\r\n                }\r\n                // Update variables\r\n                settings._uniqueIndex++;\r\n                uniqueIndex = settings._uniqueIndex;\r\n                hidden.length = 0;\r\n                // Check row insert index\r\n                if (langx.isNumeric(rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    addedRows.push(rowIndex);\r\n                }\r\n                else {\r\n                    settings._rowOrder.push(uniqueIndex);\r\n                    tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                    }\r\n                    addedRows.push(settings._rowOrder.length - 1);\r\n                }\r\n                tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n                if (settings._sectionClasses.body) {\r\n                    tbRow.className = settings._sectionClasses.body;\r\n                }\r\n                $(tbRow).data('appendGrid', uniqueIndex);\r\n                // Config on the sub panel row\r\n                if (tbSubRow != null) {\r\n                    tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                    $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                    if (settings._sectionClasses.subPanel) {\r\n                        tbSubRow.className = settings._sectionClasses.subPanel;\r\n                    }\r\n                }\r\n                // Add row number\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                    if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n                }\r\n                // Process on each columns\r\n                for (var y = 0; y < settings.columns.length; y++) {\r\n                    // Skip hidden\r\n                    if (settings.columns[y].type == 'hidden') {\r\n                        hidden.push(y);\r\n                        continue;\r\n                    }\r\n                    // Check column invisble\r\n                    var className = 'ui-widget-content';\r\n                    if (settings.columns[y].invisible) className += ' invisible';\r\n                    // Insert cell\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                    tbCell.className = className;\r\n                    if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                    // Prepare control id and name\r\n                    var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrlName = ctrlId;\r\n                    }\r\n                    // Check control type\r\n                    ctrl = null;\r\n                    if (settings.columns[y].type == 'custom') {\r\n                        if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                            ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        }\r\n                    } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                        ctrl = document.createElement('select');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        // Build option list\r\n                        if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                            // For array type option list\r\n                            if (settings.columns[y].ctrlOptions.length > 0) {\r\n                                if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                    // Check to generate optGroup or not\r\n                                    var lastGroupName = null, lastGroupElem = null;\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                            if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                                lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                                lastGroupElem = document.createElement('optgroup');\r\n                                                lastGroupElem.label = lastGroupName;\r\n                                                ctrl.appendChild(lastGroupElem);\r\n                                            }\r\n                                        } else {\r\n                                            lastGroupElem = null;\r\n                                        }\r\n                                        var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                            option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                        }\r\n                                        if (null == lastGroupElem) {\r\n                                            option.appendTo(ctrl);\r\n                                        }\r\n                                        else {\r\n                                            option.appendTo(lastGroupElem);\r\n                                        }\r\n                                        // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                            // For plain object type option list\r\n                            for (var x in settings.columns[y].ctrlOptions) {\r\n                                ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                            }\r\n                        } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                            // For string type option list\r\n                            var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                            for (var x = 0; x < arrayOpt.length; x++) {\r\n                                var eqIndex = arrayOpt[x].indexOf(':');\r\n                                if (-1 == eqIndex) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                                } else {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                                }\r\n                            }\r\n                        } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                            settings.columns[y].ctrlOptions(ctrl);\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-selectmenu') {\r\n                            $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    else if (settings.columns[y].type == 'checkbox') {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'checkbox';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        ctrl.value = 1;\r\n                        tbCell.appendChild(ctrl);\r\n                        tbCell.style.textAlign = 'center';\r\n                    }\r\n                    else if (settings.columns[y].type == 'textarea') {\r\n                        ctrl = document.createElement('textarea');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                        ctrl = document.createElement('input');\r\n                        try {\r\n                            ctrl.type = settings.columns[y].type;\r\n                        }\r\n                        catch (err) { /* Not supported type */ }\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else {\r\n                        // Generate text input\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'text';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-datepicker') {\r\n                            $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-spinner') {\r\n                            $(ctrl).spinner(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                            $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    // Add extra control properties\r\n                    if (settings.columns[y].type != 'custom') {\r\n                        // Add control attributes as needed\r\n                        if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                        // Add control properties as needed\r\n                        if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                        // Add control CSS as needed\r\n                        if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                        // Add control class as needed\r\n                        if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                        // Add jQuery UI tooltip as needed\r\n                        if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                        // Add control events as needed\r\n                        if (langx.isFunction(settings.columns[y].onClick)) {\r\n                            $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                        if (langx.isFunction(settings.columns[y].onChange)) {\r\n                            $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).plugin(\"lark.tabular\").getRowIndex(evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                    } else if (!isEmpty(settings.columns[y].value)) {\r\n                        // Set default value\r\n                        setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                    }\r\n                }\r\n                // Add button cell if needed\r\n                if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                    if (!settings.rowButtonsInFront) {\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    } else if (!settings.hideRowNumColumn) {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                    } else {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                    }\r\n                    tbCell.className = 'ui-widget-content last';\r\n                    tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                    if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                    // Add standard buttons\r\n                    if (!settings.hideButtons.insert) {\r\n                        var button = this._createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n                            .attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n                            .addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").insertRow(1, null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                    }\r\n                    if (!settings.hideButtons.remove) {\r\n                        var button = this._createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n                            .attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n                            .addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                self._removeRow( null, rowUniqueIndex, false);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                    }\r\n                    if (!settings.hideButtons.moveUp) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n                            .attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n                            .addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveUpRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                    }\r\n                    if (!settings.hideButtons.moveDown) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n                            .attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n                            .addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveDownRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                    }\r\n                    // Handle row dragging\r\n                    if (settings.rowDragging) {\r\n                        var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                            .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                            .appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                    }\r\n                    // Add hidden\r\n                    for (var y = 0; y < hidden.length; y++) {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                        if (langx.isFunction(settings.nameFormatter)) {\r\n                            ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        } else {\r\n                            ctrl.name = ctrl.id;\r\n                        }\r\n                        ctrl.type = 'hidden';\r\n\r\n                        if (loadData) {\r\n                            // Load data if needed\r\n                            ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                        } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                            // Set default value\r\n                            ctrl.value = settings.columns[hidden[y]].value;\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    // Add extra buttons\r\n                    if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Create sub panel\r\n                if (settings.useSubPanel) {\r\n                    tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.className = 'ui-widget-content';\r\n                    tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                    if (langx.isFunction(settings.subPanelBuilder)) {\r\n                        settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            // Check if re-calculate column width is required\r\n            if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n                var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n                if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                    calColWidth = true;\r\n                    settings._calculateWidth = false;\r\n                }\r\n            }\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Calculate column width\r\n            if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n                this._calculateColumnWidth();\r\n            }\r\n            // Trigger events\r\n            if (langx.isNumeric(rowIndex)) {\r\n                if (langx.isFunction(settings.afterRowInserted)) {\r\n                    settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            else {\r\n                if (langx.isFunction(settings.afterRowAppended)) {\r\n                    settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n                settings.maxNumRowsReached();\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n            // Return added rows' uniqueIndex\r\n            return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n        },\r\n\r\n        _removeRow : function (rowIndex, uniqueIndex, force) {\r\n            var tbWhole = this._elm;\r\n\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            if (langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        rowIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (langx.isNumeric(rowIndex)) {\r\n                // Remove middle row\r\n                if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 1);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Sort sequence\r\n                    this._sortSequence( rowIndex);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, rowIndex);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Store old window scroll value\r\n                var oldHeight = 0, oldScroll = 0;\r\n                if (settings.maintainScroll) {\r\n                    oldHeight = $(tbWhole).height();\r\n                    oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n                }\r\n                // Remove last row\r\n                if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                    uniqueIndex = settings._rowOrder.pop();\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.lastChild);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, null);\r\n                    }\r\n                }\r\n                // Scroll the page when append row\r\n                if (settings.maintainScroll) {\r\n                    // Try to maintain the height so that user no need to scroll every time when row added\r\n                    var newHeight = $(tbWhole).height();\r\n                    $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n                }\r\n            }\r\n            // Add empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings);\r\n            }\r\n        },\r\n\r\n        _loadData : function (records, isInit) {\r\n            var tbWhole = this._elm;\r\n            var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (settings) {\r\n                // Clear existing content\r\n                tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                $(tbBody).empty();\r\n                settings._rowOrder.length = 0;\r\n                settings._uniqueIndex = 0;\r\n                // Check any records\r\n                if (records != null && records.length) {\r\n                    // Add rows\r\n                    insertResult = this._insertRow(records.length, null, null);\r\n                    // Set data\r\n                    for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                        for (var c = 0; c < settings.columns.length; c++) {\r\n                            setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                        }\r\n                        if (langx.isFunction(settings.rowDataLoaded)) {\r\n                            settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                        }\r\n                    }\r\n                }\r\n                // Save setting\r\n                settings._isDataLoaded = true;\r\n                if (isInit) settings.initData = null;\r\n                $(tbWhole).data('appendGrid', settings);\r\n                // Trigger data loaded event\r\n                if (langx.isFunction(settings.dataLoaded)) {\r\n                    settings.dataLoaded(tbWhole, records);\r\n                }\r\n            }\r\n        },\r\n\r\n        _init: function () {\r\n            var options = this.options,\r\n                self = this;\r\n            // Check mandatory paramters included\r\n            if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                alert(_systemMessages.noColumnInfo);\r\n            }\r\n            // Check target element is table or not\r\n            var tbWhole = this._elm, tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n            if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                alert(_systemMessages.elemNotTable);\r\n            }\r\n            // Generate settings\r\n            var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n            // Add internal settings\r\n            langx.extend(settings, {\r\n                // The UniqueIndex accumulate counter\r\n                _uniqueIndex: 0,\r\n                // The row order array\r\n                _rowOrder: [],\r\n                // Indicate data is loaded or not\r\n                _isDataLoaded: false,\r\n                // Visible column count for internal calculation\r\n                _visibleCount: 0,\r\n                // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                _finalColSpan: 0,\r\n                // Indicate to hide last column or not\r\n                _hideLastColumn: false,\r\n                // The element ID of the `appendGrid` wrapper\r\n                _wrapperId: null,\r\n                // \r\n                _calculateWidth: true\r\n            });\r\n            // Labels or messages used in grid\r\n            if (langx.isPlainObject(options.i18n))\r\n                settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n            else\r\n                settings._i18n = langx.extend({}, _defaultTextResources);\r\n            // The extra class names for buttons\r\n            if (langx.isPlainObject(options.buttonClasses))\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n            else\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n            // The extra class names for sections\r\n            if (langx.isPlainObject(options.sectionClasses))\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n            else\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n            // Make sure the `hideButtons` setting defined\r\n            if (langx.isPlainObject(options.hideButtons))\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n            else\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n            // Check `idPrefix` is defined\r\n            if (isEmpty(settings.idPrefix)) {\r\n                // Check table ID defined\r\n                if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                    // Generate an ID using current time\r\n                    settings.idPrefix = 'ag' + new Date().getTime();\r\n                }\r\n                else {\r\n                    settings.idPrefix = tbWhole.id;\r\n                }\r\n            }\r\n            // Check custom grid button parameters\r\n            if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                settings.customGridButtons = {};\r\n            }\r\n            // Check rowDragging and useSubPanel option\r\n            if (settings.useSubPanel && settings.rowDragging) {\r\n                settings.rowDragging = false;\r\n            }\r\n            // Create thead and tbody\r\n            tbHead = document.createElement('thead');\r\n            tbHead.className = 'ui-widget-header';\r\n            tbBody = document.createElement('tbody');\r\n            tbBody.className = 'ui-widget-content';\r\n            tbFoot = document.createElement('tfoot');\r\n            tbFoot.className = 'ui-widget-header';\r\n            tbColGp = document.createElement('colgroup');\r\n            // Prepare the table element\r\n            settings._wrapperId = settings.idPrefix + '-wrapper';\r\n            tbWrap = this._tbWrap = document.createElement('div');\r\n            $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n            $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n            // Check if content scrolling is enabled\r\n            if (settings.maxBodyHeight > 0) {\r\n                // Seperate the thead and tfoot from source table\r\n                $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n            } else {\r\n                // Add thead, tbody and tfoot to the same table\r\n                $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n            }\r\n            // Handle header row\r\n            var tbHeadCellRowNum, tbHeadCellRowButton;\r\n            tbHead.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.header) {\r\n                tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n            } else {\r\n                tbRow.className = 'columnHead';\r\n            }\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Prepare column information and add column header\r\n            var pendingSkipCol = 0;\r\n            for (var z = 0; z < settings.columns.length; z++) {\r\n                // Assign default setting\r\n                var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                settings.columns[z] = columnOpt;\r\n                // Skip hidden\r\n                if (settings.columns[z].type != 'hidden') {\r\n                    // Check column is invisible\r\n                    if (!settings.columns[z].invisible) {\r\n                        settings._visibleCount++;\r\n                    }\r\n                    // Check skip header colSpan\r\n                    if (pendingSkipCol == 0) {\r\n                        var className = 'ui-widget-header';\r\n                        if (settings.columns[z].invisible) className += ' invisible';\r\n                        if (settings.columns[z].resizable) className += ' resizable';\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                        tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                        tbCell.className = className;\r\n                        if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                        if (settings.columns[z].headerSpan > 1) {\r\n                            $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                            pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                        }\r\n                        // Add tooltip\r\n                        if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                        }\r\n                        else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                        }\r\n                        // Check to set display text or generate by function\r\n                        if (langx.isFunction(settings.columns[z].display)) {\r\n                            settings.columns[z].display(tbCell);\r\n                        } else if (!isEmpty(settings.columns[z].display)) {\r\n                            $(tbCell).text(settings.columns[z].display);\r\n                        }\r\n                        // Add column group for scrolling\r\n                        tbColGp.appendChild(document.createElement('col'));\r\n                    } else {\r\n                        pendingSkipCol--;\r\n                    }\r\n                }\r\n            }\r\n            // Enable columns resizable\r\n            if ($.fn.resizable ) {\r\n                $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n            }\r\n            // Check to hide last column or not\r\n            if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                    && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                    && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                settings._hideLastColumn = true;\r\n            }\r\n            // Calculate the `_finalColSpan` value\r\n            settings._finalColSpan = settings._visibleCount;\r\n            if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n            if (!settings._hideLastColumn) settings._finalColSpan++;\r\n            // Generate last column header if needed\r\n            if (!settings._hideLastColumn) {\r\n                if (settings.rowButtonsInFront) {\r\n                    if (settings.hideRowNumColumn) {\r\n                        // Insert a cell at the front\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                    } else {\r\n                        // Span the first cell that across row number and row button cells\r\n                        // tbHeadCellRowNum.colSpan = 2;\r\n                        // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                        // Insert a cell as the second column\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                    }\r\n                } else {\r\n                    tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                }\r\n                tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Add caption when defined\r\n            if (settings.caption) {\r\n                tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                if (settings._sectionClasses.caption) {\r\n                    tbRow.className = settings._sectionClasses.caption;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_caption_td';\r\n                tbCell.className = 'ui-state-active caption';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                // Add tooltip\r\n                if (langx.isPlainObject(settings.captionTooltip)) {\r\n                    $(tbCell).tooltip(settings.captionTooltip);\r\n                } else if (!isEmpty(settings.captionTooltip)) {\r\n                    $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                }\r\n                // Check to set display text or generate by function\r\n                if (langx.isFunction(settings.caption)) {\r\n                    settings.caption(tbCell);\r\n                } else {\r\n                    $(tbCell).text(settings.caption);\r\n                }\r\n            }\r\n            // Handle footer row\r\n            tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.footer) {\r\n                tbRow.className = settings._sectionClasses.footer;\r\n            }\r\n            tbRow.appendChild(tbCell = document.createElement('td'));\r\n            tbCell.id = settings.idPrefix + '_footer_td';\r\n            tbCell.colSpan = settings._finalColSpan;\r\n            $('<input/>').attr({\r\n                type: 'hidden',\r\n                id: settings.idPrefix + '_rowOrder',\r\n                name: settings.idPrefix + '_rowOrder'\r\n            }).appendTo(tbCell);\r\n            // Make row invisible if all buttons are hidden\r\n            if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                    && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                tbRow.style.display = 'none';\r\n            } else {\r\n                if (!settings.hideButtons.append) {\r\n                    var button = this._createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n                    .attr({ title: settings._i18n.append }).addClass('append')\r\n                    .click(function (evt) {\r\n                        self._insertRow(1, null, null);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                }\r\n                if (!settings.hideButtons.removeLast) {\r\n                    var button = this._createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n                    .attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n                    .click(function (evt) {\r\n                        self._removeRow( null, this.value, false);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                }\r\n                if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Enable dragging\r\n            if (settings.rowDragging) {\r\n                $(tbBody).sortable({\r\n                    axis: 'y',\r\n                    containment: tbWhole,\r\n                    handle: '.rowDrag',\r\n                    helper: function (e, tr) {\r\n                        var org = tr.children();\r\n                        var helper = tr.clone();\r\n                        // Fix the cell width of cloned table cell\r\n                        helper.children().each(function (index) {\r\n                            $(this).width(org.eq(index).width());\r\n                            // Set the value of drop down list when drag (Issue #18)\r\n                            var helperSelect = $('select', this);\r\n                            if (helperSelect.length > 0) {\r\n                                for (var y = 0; y < helperSelect.length; y++) {\r\n                                    var orgSelect = org.eq(index).find('select');\r\n                                    if (orgSelect.length > y) {\r\n                                        helperSelect[y].value = orgSelect[y].value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        return helper;\r\n                    },\r\n                    update: function (event, ui) {\r\n                        var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                        var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                        self._gridRowDragged(ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            // Save options\r\n            $(tbWhole).data('appendGrid', settings);\r\n            if (langx.isArray(options.initData)) {\r\n                // Load data if initData is array\r\n                this._loadData(options.initData, true);\r\n            } else {\r\n                // Add empty rows\r\n                //$(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                this.appendRow(settings.initRows);\r\n            }\r\n            // Show no rows in grid\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings, true);\r\n            }\r\n            // Calculate column width\r\n            if (settings.maxBodyHeight > 0) {\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    $('table.foot', tbWrap).width($(tbWhole).width());\r\n                }\r\n            }\r\n        },\r\n\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = this._checkGridAndGetSettings( true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        load: function (records) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    this._loadData(records, false);\r\n                } else {\r\n                    this._emptyGrid();\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.insertRow(numOfRowOrRowArray);\r\n        },\r\n\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = this._insertRow(numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        this._sortSequence( insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                this._removeRow(rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                this._emptyGrid();\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        this._removeRow( null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n\r\n\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).plugin(\"lark.tabular\").getRowValue(null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n\r\n\r\n\r\n\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n    */\r\n\r\n    return Tabular ;\r\n});\r\n\ndefine('skylark-widgets-swt/TabStrip',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/tab\",\r\n    \"skylark-bootstrap3/dropdown\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var TabStrip = Widget.inherit({\r\n        klassName : \"TabStrip\",\r\n        pluginName : \"lark.tabstrip\",\r\n\r\n        options : {\r\n          selectors : {\r\n            header : \".nav-tabs\",\r\n            tab : \"[data-toggle=\\\"tab\\\"]\",\r\n            content : \".tab-content\",\r\n            tabpane : \".tab-pane\"\r\n          }\r\n        },\r\n\r\n        _init : function() {\r\n          this.$header = this._velm.$(this.options.selectors.header); \r\n          this.$tabs = this.$header.find(this.options.selectors.tab);\r\n          this.$content = this._velm.$(this.options.selectors.content);\r\n          this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\r\n\r\n          this.$header.find('[data-toggle=\"dropdown\"]').dropdown();\r\n\r\n          var self = this;\r\n          this.$tabs.each(function(idx,tabEl){\r\n            $(tabEl).tab({\r\n              target : self.$tabpanes[idx]\r\n            });\r\n          });\r\n\r\n        },\r\n\r\n        add : function() {\r\n          //TODO\r\n        },\r\n\r\n        remove : function(){\r\n          //TODO\r\n        }\r\n    });\r\n\r\n    return swt.TabStrip = TabStrip;\r\n\r\n});\ndefine('skylark-widgets-swt/Toolbar',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-widgets-base/Widget\"\r\n],function(langx,$,Widget){ \r\n\r\n\r\n\r\n  var Toolbar = Widget.inherit({\r\n    pluginName : \"lark.toolbar\",\r\n\r\n    options : {\r\n      toolbarFloat: true,\r\n      toolbarHidden: false,\r\n      toolbarFloatOffset: 0,\r\n      template : '<div class=\"lark-toolbar\"><ul></ul></div>',\r\n      separator : {\r\n        template :  '<li><span class=\"separator\"></span></li>'\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var floatInitialized, initToolbarFloat, toolbarHeight;\r\n      //this.editor = editor;\r\n\r\n      //this.opts = langx.extend({}, this.opts, opts);\r\n      this.opts = this.options;\r\n\r\n\r\n      //if (!langx.isArray(this.opts.toolbar)) {\r\n      //  this.opts.toolbar = ['bold', 'italic', 'underline', 'strikethrough', '|', 'ol', 'ul', 'blockquote', 'code', '|', 'link', 'image', '|', 'indent', 'outdent'];\r\n      //}\r\n\r\n      this.wrapper = $(this._elm);\r\n      this.list = this.wrapper.find('ul');\r\n      this.list.on('click', function(e) {\r\n        return false;\r\n      });\r\n      this.wrapper.on('mousedown', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('.menu-on');\r\n        };\r\n      })(this));\r\n      $(document).on('mousedown.toolbar', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('menu-on');\r\n        };\r\n      })(this));\r\n      if (!this.opts.toolbarHidden && this.opts.toolbarFloat) {\r\n        this.wrapper.css('top', this.opts.toolbarFloatOffset);\r\n        toolbarHeight = 0;\r\n        initToolbarFloat = (function(_this) {\r\n          return function() {\r\n            _this.wrapper.css('position', 'static');\r\n            _this.wrapper.width('auto');\r\n            _this.editor.editable.util.reflow(_this.wrapper);\r\n            _this.wrapper.width(_this.wrapper.outerWidth());\r\n            _this.wrapper.css('left', _this.editor.editable.util.os.mobile ? _this.wrapper.position().left : _this.wrapper.offset().left);\r\n            _this.wrapper.css('position', '');\r\n            toolbarHeight = _this.wrapper.outerHeight();\r\n            _this.editor.placeholderEl.css('top', toolbarHeight);\r\n            return true;\r\n          };\r\n        })(this);\r\n        floatInitialized = null;\r\n\r\n        /*\r\n        $(window).on('resize.richeditor-' + this.editor.id, function(e) {\r\n          return floatInitialized = initToolbarFloat();\r\n        });\r\n        $(window).on('scroll.richeditor-' + this.editor.id, (function(_this) {\r\n          return function(e) {\r\n            var bottomEdge, scrollTop, topEdge;\r\n            if (!_this.wrapper.is(':visible')) {\r\n              return;\r\n            }\r\n            topEdge = _this.editor.wrapper.offset().top;\r\n            bottomEdge = topEdge + _this.editor.wrapper.outerHeight() - 80;\r\n            scrollTop = $(document).scrollTop() + _this.opts.toolbarFloatOffset;\r\n            if (scrollTop <= topEdge || scrollTop >= bottomEdge) {\r\n              _this.editor.wrapper.removeClass('toolbar-floating').css('padding-top', '');\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', _this.opts.toolbarFloatOffset);\r\n              }\r\n            } else {\r\n              floatInitialized || (floatInitialized = initToolbarFloat());\r\n              _this.editor.wrapper.addClass('toolbar-floating').css('padding-top', toolbarHeight);\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', scrollTop - topEdge + _this.opts.toolbarFloatOffset);\r\n              }\r\n            }\r\n          };\r\n        })(this));\r\n        */\r\n      }\r\n\r\n      /*\r\n      this.editor.on('destroy', (function(_this) {\r\n        return function() {\r\n          return _this.buttons.length = 0;\r\n        };\r\n      })(this));\r\n      */\r\n\r\n      \r\n    },\r\n\r\n    addToolItem : function(itemWidget) {\r\n      $(itemWidget._elm).appendTo(this.list);\r\n      return this;\r\n    },\r\n\r\n    addSeparator : function() {\r\n      $(this.options.separator.template).appendTo(this.list);\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return Toolbar;\r\n\r\n});\ndefine('skylark-widgets-swt/Tree',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"./swt\",\r\n  \"./Widget\"  \r\n], function(skylark,langx,$,plugins,swt,Widget) {\r\n\r\n  /*global jQuery, console*/\r\n\r\n  'use strict';\r\n\r\n\r\n  var _default = {};\r\n\r\n  _default.settings = {\r\n\r\n    injectStyle: true,\r\n\r\n    levels: 2,\r\n\r\n    expandIcon: 'glyphicon glyphicon-plus',\r\n    collapseIcon: 'glyphicon glyphicon-minus',\r\n    emptyIcon: 'glyphicon',\r\n    nodeIcon: '',\r\n    selectedIcon: '',\r\n    checkedIcon: 'glyphicon glyphicon-check',\r\n    uncheckedIcon: 'glyphicon glyphicon-unchecked',\r\n\r\n    color: undefined, // '#000000',\r\n    backColor: undefined, // '#FFFFFF',\r\n    borderColor: undefined, // '#dddddd',\r\n    onhoverColor: '#F5F5F5',\r\n    selectedColor: '#FFFFFF',\r\n    selectedBackColor: '#428bca',\r\n    searchResultColor: '#D9534F',\r\n    searchResultBackColor: undefined, //'#FFFFFF',\r\n\r\n    enableLinks: false,\r\n    highlightSelected: true,\r\n    highlightSearchResults: true,\r\n    showBorder: true,\r\n    showIcon: true,\r\n    showCheckbox: false,\r\n    showTags: false,\r\n    multiSelect: false,\r\n\r\n    // Event handlers\r\n    onNodeChecked: undefined,\r\n    onNodeCollapsed: undefined,\r\n    onNodeDisabled: undefined,\r\n    onNodeEnabled: undefined,\r\n    onNodeExpanded: undefined,\r\n    onNodeSelected: undefined,\r\n    onNodeUnchecked: undefined,\r\n    onNodeUnselected: undefined,\r\n    onSearchComplete: undefined,\r\n    onSearchCleared: undefined\r\n  };\r\n\r\n  _default.options = {\r\n    silent: false,\r\n    ignoreChildren: false\r\n  };\r\n\r\n  _default.searchOptions = {\r\n    ignoreCase: true, \r\n    exactMatch: false,\r\n    revealResults: true\r\n  };\r\n\r\n  var Tree =  swt.Tree = Widget.inherit({\r\n    klassName: \"Tree\",\r\n\r\n    pluginName : \"lark.tree\",\r\n\r\n    widgetClass : \"lark-tree\",\r\n\r\n    options : {\r\n      injectStyle: true,\r\n\r\n      levels: 2,\r\n\r\n      expandIcon: 'glyphicon glyphicon-plus',\r\n      collapseIcon: 'glyphicon glyphicon-minus',\r\n      emptyIcon: 'glyphicon',\r\n      nodeIcon: '',\r\n      selectedIcon: '',\r\n      checkedIcon: 'glyphicon glyphicon-check',\r\n      uncheckedIcon: 'glyphicon glyphicon-unchecked',\r\n\r\n      color: undefined, // '#000000',\r\n      backColor: undefined, // '#FFFFFF',\r\n      borderColor: undefined, // '#dddddd',\r\n      onhoverColor: '#F5F5F5',\r\n      selectedColor: '#FFFFFF',\r\n      selectedBackColor: '#428bca',\r\n      searchResultColor: '#D9534F',\r\n      searchResultBackColor: undefined, //'#FFFFFF',\r\n\r\n      enableLinks: false,\r\n      highlightSelected: true,\r\n      highlightSearchResults: true,\r\n      showBorder: true,\r\n      showIcon: true,\r\n      showCheckbox: false,\r\n      showTags: false,\r\n      multiSelect: false,\r\n\r\n      // Event handlers\r\n      onNodeChecked: undefined,\r\n      onNodeCollapsed: undefined,\r\n      onNodeDisabled: undefined,\r\n      onNodeEnabled: undefined,\r\n      onNodeExpanded: undefined,\r\n      onNodeSelected: undefined,\r\n      onNodeUnchecked: undefined,\r\n      onNodeUnselected: undefined,\r\n      onSearchComplete: undefined,\r\n      onSearchCleared: undefined\r\n\r\n    },   \r\n\r\n    template : {\r\n      list: '<ul class=\"list-group\"></ul>',\r\n      item: '<li class=\"list-group-item\"></li>',\r\n      indent: '<span class=\"indent\"></span>',\r\n      icon: '<span class=\"icon\"></span>',\r\n      link: '<a href=\"#\" style=\"color:inherit;\"></a>',\r\n      badge: '<span class=\"badge\"></span>'\r\n    },\r\n\r\n    css : '.Tree .list-group-item{cursor:pointer}.Tree span.indent{margin-left:10px;margin-right:10px}.Tree span.icon{width:12px;margin-right:5px}.Tree .node-disabled{color:silver;cursor:not-allowed}' ,\r\n\r\n    _construct : function (element, options) {\r\n\r\n      this.$element = $(element);\r\n      this.elementId = element.id;\r\n      this.styleId = this.elementId + '-style';\r\n\r\n      this._init(options);\r\n    },\r\n\r\n    _init : function (options) {\r\n\r\n      //var options = this.options\r\n\r\n      this.tree = [];\r\n      this.nodes = [];\r\n\r\n      if (options.data) {\r\n        if (typeof options.data === 'string') {\r\n          options.data = JSON.parse(options.data);\r\n        }\r\n        this.tree = langx.extend(true, [], options.data);\r\n        delete options.data;\r\n      }\r\n      //this.options = langx.extend({}, _default.settings, options);\r\n\r\n      this.destroy();\r\n      this.subscribeEvents();\r\n      this.setInitialStates({ nodes: this.tree }, 0);\r\n      this.render();\r\n    },\r\n\r\n    remove : function () {\r\n      this.destroy();\r\n      datax.removeData(this, this.pluginName);\r\n      $('#' + this.styleId).remove();\r\n    },\r\n\r\n    destroy : function () {\r\n\r\n      if (!this.initialized) return;\r\n\r\n      this.$wrapper.remove();\r\n      this.$wrapper = null;\r\n\r\n      // Switch off events\r\n      this.unsubscribeEvents();\r\n\r\n      // Reset this.initialized flag\r\n      this.initialized = false;\r\n    },\r\n\r\n    unsubscribeEvents : function () {\r\n\r\n      this.$element.off('click');\r\n      this.$element.off('nodeChecked');\r\n      this.$element.off('nodeCollapsed');\r\n      this.$element.off('nodeDisabled');\r\n      this.$element.off('nodeEnabled');\r\n      this.$element.off('nodeExpanded');\r\n      this.$element.off('nodeSelected');\r\n      this.$element.off('nodeUnchecked');\r\n      this.$element.off('nodeUnselected');\r\n      this.$element.off('searchComplete');\r\n      this.$element.off('searchCleared');\r\n    },\r\n\r\n    subscribeEvents : function () {\r\n\r\n      this.unsubscribeEvents();\r\n\r\n      this.$element.on('click', langx.proxy(this.clickHandler, this));\r\n\r\n      if (typeof (this.options.onNodeChecked) === 'function') {\r\n        this.$element.on('nodeChecked', this.options.onNodeChecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeCollapsed) === 'function') {\r\n        this.$element.on('nodeCollapsed', this.options.onNodeCollapsed);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeDisabled) === 'function') {\r\n        this.$element.on('nodeDisabled', this.options.onNodeDisabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeEnabled) === 'function') {\r\n        this.$element.on('nodeEnabled', this.options.onNodeEnabled);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeExpanded) === 'function') {\r\n        this.$element.on('nodeExpanded', this.options.onNodeExpanded);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeSelected) === 'function') {\r\n        this.$element.on('nodeSelected', this.options.onNodeSelected);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnchecked) === 'function') {\r\n        this.$element.on('nodeUnchecked', this.options.onNodeUnchecked);\r\n      }\r\n\r\n      if (typeof (this.options.onNodeUnselected) === 'function') {\r\n        this.$element.on('nodeUnselected', this.options.onNodeUnselected);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchComplete) === 'function') {\r\n        this.$element.on('searchComplete', this.options.onSearchComplete);\r\n      }\r\n\r\n      if (typeof (this.options.onSearchCleared) === 'function') {\r\n        this.$element.on('searchCleared', this.options.onSearchCleared);\r\n      }\r\n    },\r\n\r\n    /*\r\n      Recurse the tree structure and ensure all nodes have\r\n      valid initial states.  User defined states will be preserved.\r\n      For performance we also take this opportunity to\r\n      index nodes in a flattened structure\r\n    */\r\n    setInitialStates : function (node, level) {\r\n\r\n      if (!node.nodes) return;\r\n      level += 1;\r\n\r\n      var parent = node;\r\n      var _this = this;\r\n      langx.each(node.nodes, function checkStates(index, node) {\r\n\r\n        // nodeId : unique, incremental identifier\r\n        node.nodeId = _this.nodes.length;\r\n\r\n        // parentId : transversing up the tree\r\n        node.parentId = parent.nodeId;\r\n\r\n        // if not provided set selectable default value\r\n        if (!node.hasOwnProperty('selectable')) {\r\n          node.selectable = true;\r\n        }\r\n\r\n        // where provided we should preserve states\r\n        node.state = node.state || {};\r\n\r\n        // set checked state; unless set always false\r\n        if (!node.state.hasOwnProperty('checked')) {\r\n          node.state.checked = false;\r\n        }\r\n\r\n        // set enabled state; unless set always false\r\n        if (!node.state.hasOwnProperty('disabled')) {\r\n          node.state.disabled = false;\r\n        }\r\n\r\n        // set expanded state; if not provided based on levels\r\n        if (!node.state.hasOwnProperty('expanded')) {\r\n          if (!node.state.disabled &&\r\n              (level < _this.options.levels) &&\r\n              (node.nodes && node.nodes.length > 0)) {\r\n            node.state.expanded = true;\r\n          }\r\n          else {\r\n            node.state.expanded = false;\r\n          }\r\n        }\r\n\r\n        // set selected state; unless set always false\r\n        if (!node.state.hasOwnProperty('selected')) {\r\n          node.state.selected = false;\r\n        }\r\n\r\n        // index nodes in a flattened structure for use later\r\n        _this.nodes.push(node);\r\n\r\n        // recurse child nodes and transverse the tree\r\n        if (node.nodes) {\r\n          _this.setInitialStates(node, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    clickHandler : function (event) {\r\n\r\n      if (!this.options.enableLinks) event.preventDefault();\r\n\r\n      var target = $(event.target);\r\n      var node = this.findNode(target);\r\n      if (!node || node.state.disabled) return;\r\n      \r\n      var classList = target.attr('class') ? target.attr('class').split(' ') : [];\r\n      if ((classList.indexOf('expand-icon') !== -1)) {\r\n\r\n        this.toggleExpandedState(node, _default.options);\r\n        this.render();\r\n      }\r\n      else if ((classList.indexOf('check-icon') !== -1)) {\r\n        \r\n        this.toggleCheckedState(node, _default.options);\r\n        this.render();\r\n      }\r\n      else {\r\n        \r\n        if (node.selectable) {\r\n          this.toggleSelectedState(node, _default.options);\r\n        } else {\r\n          this.toggleExpandedState(node, _default.options);\r\n        }\r\n\r\n        this.render();\r\n      }\r\n    },\r\n\r\n    // Looks up the DOM for the closest parent list item to retrieve the\r\n    // data attribute nodeid, which is used to lookup the node in the flattened structure.\r\n    findNode : function (target) {\r\n\r\n      var nodeId = target.closest('li.list-group-item').attr('data-nodeid');\r\n      var node = this.nodes[nodeId];\r\n\r\n      if (!node) {\r\n        console.log('Error: node does not exist');\r\n      }\r\n      return node;\r\n    },\r\n\r\n    toggleExpandedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setExpandedState(node, !node.state.expanded, options);\r\n    },\r\n\r\n    setExpandedState : function (node, state, options) {\r\n\r\n      if (state === node.state.expanded) return;\r\n\r\n      if (state && node.nodes) {\r\n\r\n        // Expand a node\r\n        node.state.expanded = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeExpanded', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else if (!state) {\r\n\r\n        // Collapse a node\r\n        node.state.expanded = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeCollapsed', langx.extend(true, {}, node));\r\n        }\r\n\r\n        // Collapse child nodes\r\n        if (node.nodes && !options.ignoreChildren) {\r\n          langx.each(node.nodes, langx.proxy(function (index, node) {\r\n            this.setExpandedState(node, false, options);\r\n          }, this));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleSelectedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setSelectedState(node, !node.state.selected, options);\r\n    },\r\n\r\n    setSelectedState : function (node, state, options) {\r\n\r\n      if (state === node.state.selected) return;\r\n\r\n      if (state) {\r\n\r\n        // If multiSelect false, unselect previously selected\r\n        if (!this.options.multiSelect) {\r\n          langx.each(this.findNodes('true', 'g', 'state.selected'), langx.proxy(function (index, node) {\r\n            this.setSelectedState(node, false, options);\r\n          }, this));\r\n        }\r\n\r\n        // Continue selecting node\r\n        node.state.selected = true;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeSelected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Unselect node\r\n        node.state.selected = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnselected', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleCheckedState : function (node, options) {\r\n      if (!node) return;\r\n      this.setCheckedState(node, !node.state.checked, options);\r\n    },\r\n\r\n    setCheckedState : function (node, state, options) {\r\n\r\n      if (state === node.state.checked) return;\r\n\r\n      if (state) {\r\n\r\n        // Check node\r\n        node.state.checked = true;\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeChecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Uncheck node\r\n        node.state.checked = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeUnchecked', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    setDisabledState : function (node, state, options) {\r\n\r\n      if (state === node.state.disabled) return;\r\n\r\n      if (state) {\r\n\r\n        // Disable node\r\n        node.state.disabled = true;\r\n\r\n        // Disable all other states\r\n        this.setExpandedState(node, false, options);\r\n        this.setSelectedState(node, false, options);\r\n        this.setCheckedState(node, false, options);\r\n\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeDisabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n      else {\r\n\r\n        // Enabled node\r\n        node.state.disabled = false;\r\n        if (!options.silent) {\r\n          this.$element.trigger('nodeEnabled', langx.extend(true, {}, node));\r\n        }\r\n      }\r\n    },\r\n\r\n    render : function () {\r\n\r\n      if (!this.initialized) {\r\n\r\n        // Setup first time only components\r\n        this.$element.addClass(this.widgetClass);\r\n        this.$wrapper = $(this.template.list);\r\n\r\n        this.injectStyle();\r\n\r\n        this.initialized = true;\r\n      }\r\n\r\n      this.$element.empty().append(this.$wrapper.empty());\r\n\r\n      // Build tree\r\n      this.buildTree(this.tree, 0);\r\n    },\r\n\r\n    // Starting from the root node, and recursing down the\r\n    // structure we build the tree one node at a time\r\n    buildTree : function (nodes, level) {\r\n\r\n      if (!nodes) return;\r\n      level += 1;\r\n\r\n      var _this = this;\r\n      langx.each(nodes, function addNodes(id, node) {\r\n\r\n        var treeItem = $(_this.template.item)\r\n          .addClass('node-' + _this.elementId)\r\n          .addClass(node.state.checked ? 'node-checked' : '')\r\n          .addClass(node.state.disabled ? 'node-disabled': '')\r\n          .addClass(node.state.selected ? 'node-selected' : '')\r\n          .addClass(node.searchResult ? 'search-result' : '') \r\n          .attr('data-nodeid', node.nodeId)\r\n          .attr('style', _this.buildStyleOverride(node));\r\n\r\n        // Add indent/spacer to mimic tree structure\r\n        for (var i = 0; i < (level - 1); i++) {\r\n          treeItem.append(_this.template.indent);\r\n        }\r\n\r\n        // Add expand, collapse or empty spacer icons\r\n        var classList = [];\r\n        if (node.nodes) {\r\n          classList.push('expand-icon');\r\n          if (node.state.expanded) {\r\n            classList.push(_this.options.collapseIcon);\r\n          }\r\n          else {\r\n            classList.push(_this.options.expandIcon);\r\n          }\r\n        }\r\n        else {\r\n          classList.push(_this.options.emptyIcon);\r\n        }\r\n\r\n        treeItem\r\n          .append($(_this.template.icon)\r\n            .addClass(classList.join(' '))\r\n          );\r\n\r\n\r\n        // Add node icon\r\n        if (_this.options.showIcon) {\r\n          \r\n          var classList = ['node-icon'];\r\n\r\n          classList.push(node.icon || _this.options.nodeIcon);\r\n          if (node.state.selected) {\r\n            classList.pop();\r\n            classList.push(node.selectedIcon || _this.options.selectedIcon || \r\n                    node.icon || _this.options.nodeIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.template.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add check / unchecked icon\r\n        if (_this.options.showCheckbox) {\r\n\r\n          var classList = ['check-icon'];\r\n          if (node.state.checked) {\r\n            classList.push(_this.options.checkedIcon); \r\n          }\r\n          else {\r\n            classList.push(_this.options.uncheckedIcon);\r\n          }\r\n\r\n          treeItem\r\n            .append($(_this.template.icon)\r\n              .addClass(classList.join(' '))\r\n            );\r\n        }\r\n\r\n        // Add text\r\n        if (_this.options.enableLinks) {\r\n          // Add hyperlink\r\n          treeItem\r\n            .append($(_this.template.link)\r\n              .attr('href', node.href)\r\n              .append(node.text)\r\n            );\r\n        }\r\n        else {\r\n          // otherwise just text\r\n          treeItem\r\n            .append(node.text);\r\n        }\r\n\r\n        // Add tags as badges\r\n        if (_this.options.showTags && node.tags) {\r\n          langx.each(node.tags, function addTag(id, tag) {\r\n            treeItem\r\n              .append($(_this.template.badge)\r\n                .append(tag)\r\n              );\r\n          });\r\n        }\r\n\r\n        // Add item to the tree\r\n        _this.$wrapper.append(treeItem);\r\n\r\n        // Recursively add child ndoes\r\n        if (node.nodes && node.state.expanded && !node.state.disabled) {\r\n          return _this.buildTree(node.nodes, level);\r\n        }\r\n      });\r\n    },\r\n\r\n    // Define any node level style override for\r\n    // 1. selectedNode\r\n    // 2. node|data assigned color overrides\r\n    buildStyleOverride : function (node) {\r\n\r\n      if (node.state.disabled) return '';\r\n\r\n      var color = node.color;\r\n      var backColor = node.backColor;\r\n\r\n      if (this.options.highlightSelected && node.state.selected) {\r\n        if (this.options.selectedColor) {\r\n          color = this.options.selectedColor;\r\n        }\r\n        if (this.options.selectedBackColor) {\r\n          backColor = this.options.selectedBackColor;\r\n        }\r\n      }\r\n\r\n      if (this.options.highlightSearchResults && node.searchResult && !node.state.disabled) {\r\n        if (this.options.searchResultColor) {\r\n          color = this.options.searchResultColor;\r\n        }\r\n        if (this.options.searchResultBackColor) {\r\n          backColor = this.options.searchResultBackColor;\r\n        }\r\n      }\r\n\r\n      return 'color:' + color +\r\n        ';background-color:' + backColor + ';';\r\n    },\r\n\r\n    // Add inline style into head\r\n    injectStyle : function () {\r\n\r\n      if (this.options.injectStyle && !document.getElementById(this.styleId)) {\r\n        $('<style type=\"text/css\" id=\"' + this.styleId + '\"> ' + this.buildStyle() + ' </style>').appendTo('head');\r\n      }\r\n    },\r\n\r\n    // Construct trees style based on user options\r\n    buildStyle : function () {\r\n\r\n      var style = '.node-' + this.elementId + '{';\r\n\r\n      if (this.options.color) {\r\n        style += 'color:' + this.options.color + ';';\r\n      }\r\n\r\n      if (this.options.backColor) {\r\n        style += 'background-color:' + this.options.backColor + ';';\r\n      }\r\n\r\n      if (!this.options.showBorder) {\r\n        style += 'border:none;';\r\n      }\r\n      else if (this.options.borderColor) {\r\n        style += 'border:1px solid ' + this.options.borderColor + ';';\r\n      }\r\n      style += '}';\r\n\r\n      if (this.options.onhoverColor) {\r\n        style += '.node-' + this.elementId + ':not(.node-disabled):hover{' +\r\n          'background-color:' + this.options.onhoverColor + ';' +\r\n        '}';\r\n      }\r\n\r\n      return this.css + style;\r\n    },\r\n\r\n    /**\r\n      Returns a single node object that matches the given node id.\r\n      @param {Number} nodeId - A node's unique identifier\r\n      @return {Object} node - Matching node\r\n    */\r\n    getNode : function (nodeId) {\r\n      return this.nodes[nodeId];\r\n    },\r\n\r\n    /**\r\n      Returns the parent node of a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Object} node - The parent node\r\n    */\r\n    getParent : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      return this.nodes[node.parentId];\r\n    },\r\n\r\n    /**\r\n      Returns an array of sibling nodes for a given node, if valid otherwise returns undefined.\r\n      @param {Object|Number} identifier - A valid node or node id\r\n      @returns {Array} nodes - Sibling nodes\r\n    */\r\n    getSiblings : function (identifier) {\r\n      var node = this.identifyNode(identifier);\r\n      var parent = this.getParent(node);\r\n      var nodes = parent ? parent.nodes : this.tree;\r\n      return nodes.filter(function (obj) {\r\n          return obj.nodeId !== node.nodeId;\r\n        });\r\n    },\r\n\r\n    /**\r\n      Returns an array of selected nodes.\r\n      @returns {Array} nodes - Selected nodes\r\n    */\r\n    getSelected : function () {\r\n      return this.findNodes('true', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unselected nodes.\r\n      @returns {Array} nodes - Unselected nodes\r\n    */\r\n    getUnselected : function () {\r\n      return this.findNodes('false', 'g', 'state.selected');\r\n    },\r\n\r\n    /**\r\n      Returns an array of expanded nodes.\r\n      @returns {Array} nodes - Expanded nodes\r\n    */\r\n    getExpanded : function () {\r\n      return this.findNodes('true', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of collapsed nodes.\r\n      @returns {Array} nodes - Collapsed nodes\r\n    */\r\n    getCollapsed : function () {\r\n      return this.findNodes('false', 'g', 'state.expanded');\r\n    },\r\n\r\n    /**\r\n      Returns an array of checked nodes.\r\n      @returns {Array} nodes - Checked nodes\r\n    */\r\n    getChecked : function () {\r\n      return this.findNodes('true', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of unchecked nodes.\r\n      @returns {Array} nodes - Unchecked nodes\r\n    */\r\n    getUnchecked : function () {\r\n      return this.findNodes('false', 'g', 'state.checked');\r\n    },\r\n\r\n    /**\r\n      Returns an array of disabled nodes.\r\n      @returns {Array} nodes - Disabled nodes\r\n    */\r\n    getDisabled : function () {\r\n      return this.findNodes('true', 'g', 'state.disabled');\r\n    },\r\n\r\n    /**\r\n      Returns an array of enabled nodes.\r\n      @returns {Array} nodes - Enabled nodes\r\n    */\r\n    getEnabled : function () {\r\n      return this.findNodes('false', 'g', 'state.disabled');\r\n    },\r\n\r\n\r\n    /**\r\n      Set a node state to selected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    selectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Set a node state to unselected\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    unselectNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setSelectedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a node selected state; selecting if unselected, unselecting if selected.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeSelected : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleSelectedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Collapse all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    collapseAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.expanded');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Collapse a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    collapseNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    expandAll : function (options) {\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      if (options && options.levels) {\r\n        this.expandLevels(this.tree, options.levels, options);\r\n      }\r\n      else {\r\n        var identifiers = this.findNodes('false', 'g', 'state.expanded');\r\n        this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n          this.setExpandedState(node, true, options);\r\n        }, this));\r\n      }\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Expand a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    expandNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setExpandedState(node, true, options);\r\n        if (node.nodes && (options && options.levels)) {\r\n          this.expandLevels(node.nodes, options.levels-1, options);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    expandLevels : function (nodes, level, options) {\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      langx.each(nodes, langx.proxy(function (index, node) {\r\n        this.setExpandedState(node, (level > 0) ? true : false, options);\r\n        if (node.nodes) {\r\n          this.expandLevels(node.nodes, level-1, options);\r\n        }\r\n      }, this));\r\n    },\r\n\r\n    /**\r\n      Reveals a given tree node, expanding the tree from node to root.\r\n      @param {Object|Number|Array} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    revealNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        var parentNode = this.getParent(node);\r\n        while (parentNode) {\r\n          this.setExpandedState(parentNode, true, options);\r\n          parentNode = this.getParent(parentNode);\r\n        }\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes expanded state; collapsing if expanded, expanding if collapsed.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeExpanded : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleExpandedState(node, options);\r\n      }, this));\r\n      \r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Check all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    checkAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Check a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    checkNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    uncheckAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.checked');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Uncheck a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    uncheckNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setCheckedState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes checked state; checking if unchecked, unchecking if checked.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeChecked : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.toggleCheckedState(node, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Disable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    disableAll : function (options) {\r\n      var identifiers = this.findNodes('false', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Disable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    disableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, true, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable all tree nodes\r\n      @param {optional Object} options\r\n    */\r\n    enableAll : function (options) {\r\n      var identifiers = this.findNodes('true', 'g', 'state.disabled');\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Enable a given tree node\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    enableNode : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, false, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n    /**\r\n      Toggles a nodes disabled state; disabling is enabled, enabling if disabled.\r\n      @param {Object|Number} identifiers - A valid node, node id or array of node identifiers\r\n      @param {optional Object} options\r\n    */\r\n    toggleNodeDisabled : function (identifiers, options) {\r\n      this.forEachIdentifier(identifiers, options, langx.proxy(function (node, options) {\r\n        this.setDisabledState(node, !node.state.disabled, options);\r\n      }, this));\r\n\r\n      this.render();\r\n    },\r\n\r\n\r\n    /**\r\n      Common code for processing multiple identifiers\r\n    */\r\n    forEachIdentifier : function (identifiers, options, callback) {\r\n\r\n      options = langx.extend({}, _default.options, options);\r\n\r\n      if (!(identifiers instanceof Array)) {\r\n        identifiers = [identifiers];\r\n      }\r\n\r\n      langx.each(identifiers, langx.proxy(function (index, identifier) {\r\n        callback(this.identifyNode(identifier), options);\r\n      }, this));  \r\n    },\r\n\r\n    /*\r\n      Identifies a node from either a node id or object\r\n    */\r\n    identifyNode : function (identifier) {\r\n      return ((typeof identifier) === 'number') ?\r\n              this.nodes[identifier] :\r\n              identifier;\r\n    },\r\n\r\n    /**\r\n      Searches the tree for nodes (text) that match given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional Object} options - Search criteria options\r\n      @return {Array} nodes - Matching nodes\r\n    */\r\n    search : function (pattern, options) {\r\n      options = langx.extend({}, _default.searchOptions, options);\r\n\r\n      this.clearSearch({ render: false });\r\n\r\n      var results = [];\r\n      if (pattern && pattern.length > 0) {\r\n\r\n        if (options.exactMatch) {\r\n          pattern = '^' + pattern + '$';\r\n        }\r\n\r\n        var modifier = 'g';\r\n        if (options.ignoreCase) {\r\n          modifier += 'i';\r\n        }\r\n\r\n        results = this.findNodes(pattern, modifier);\r\n\r\n        // Add searchResult property to all matching nodes\r\n        // This will be used to apply custom styles\r\n        // and when identifying result to be cleared\r\n        langx.each(results, function (index, node) {\r\n          node.searchResult = true;\r\n        })\r\n      }\r\n\r\n      // If revealResults, then render is triggered from revealNode\r\n      // otherwise we just call render.\r\n      if (options.revealResults) {\r\n        this.revealNode(results);\r\n      }\r\n      else {\r\n        this.render();\r\n      }\r\n\r\n      this.$element.trigger('searchComplete', langx.extend(true, {}, results));\r\n\r\n      return results;\r\n    },\r\n\r\n    /**\r\n      Clears previous search results\r\n    */\r\n    clearSearch : function (options) {\r\n\r\n      options = langx.extend({}, { render: true }, options);\r\n\r\n      var results = langx.each(this.findNodes('true', 'g', 'searchResult'), function (index, node) {\r\n        node.searchResult = false;\r\n      });\r\n\r\n      if (options.render) {\r\n        this.render();  \r\n      }\r\n      \r\n      this.$element.trigger('searchCleared', langx.extend(true, {}, results));\r\n    },\r\n\r\n    /**\r\n      Find nodes that match a given criteria\r\n      @param {String} pattern - A given string to match against\r\n      @param {optional String} modifier - Valid RegEx modifiers\r\n      @param {optional String} attribute - Attribute to compare pattern against\r\n      @return {Array} nodes - Nodes that match your criteria\r\n    */\r\n    findNodes : function (pattern, modifier, attribute) {\r\n\r\n      modifier = modifier || 'g';\r\n      attribute = attribute || 'text';\r\n\r\n      var _this = this;\r\n      return langx.grep(this.nodes, function (node) {\r\n        var val = _this.getNodeValue(node, attribute);\r\n        if (typeof val === 'string') {\r\n          return val.match(new RegExp(pattern, modifier));\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n      Recursive find for retrieving nested attributes values\r\n      All values are return as strings, unless invalid\r\n      @param {Object} obj - Typically a node, could be any object\r\n      @param {String} attr - Identifies an object property using dot notation\r\n      @return {String} value - Matching attributes string representation\r\n    */\r\n    getNodeValue : function (obj, attr) {\r\n      var index = attr.indexOf('.');\r\n      if (index > 0) {\r\n        var _obj = obj[attr.substring(0, index)];\r\n        var _attr = attr.substring(index + 1, attr.length);\r\n        return this.getNodeValue(_obj, _attr);\r\n      }\r\n      else {\r\n        if (obj.hasOwnProperty(attr)) {\r\n          return obj[attr].toString();\r\n        }\r\n        else {\r\n          return undefined;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return Tree;\r\n});\ndefine('skylark-widgets-swt/main',[\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"./Accordion\",\r\n    \"./Button\",\r\n    \"./Carousel\",\r\n    \"./CheckBox\",\r\n    \"./ComboBox\",\r\n    \"./TextBox\",\r\n    \"./ListGroup\",\r\n    \"./Menu\",\r\n    \"./Pagination\",\r\n    \"./Progress\",\r\n    \"./Radio\",\r\n    \"./SearchBox\",\r\n    \"./SelectList\",\r\n    \"./Tabular\",\r\n    \"./TabStrip\",\r\n    \"./TextBox\",\r\n    \"./Toolbar\",\r\n    \"./Tree\"\r\n], function(swt) {\r\n    return swt;\r\n});\ndefine('skylark-widgets-swt', ['skylark-widgets-swt/main'], function (main) { return main; });\n\n"]}
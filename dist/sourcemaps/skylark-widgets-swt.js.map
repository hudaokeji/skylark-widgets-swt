{"version":3,"sources":["skylark-widgets-swt.js"],"names":["define","skylark","langx","browser","eventer","noder","geom","$","ui","sbswt","CONST","BACKSPACE_KEYCODE","COMMA_KEYCODE","DELETE_KEYCODE","DOWN_ARROW_KEYCODE","ENTER_KEYCODE","TAB_KEYCODE","UP_ARROW_KEYCODE","isKey","keyCode","e","isBackspaceKey","isDeleteKey","isTabKey","isUpArrow","isDownArrow","ENCODED_REGEX","mixin","cleanInput","questionableMarkup","test","html","text","isShiftHeld","shiftKey","Widget","collapse","swt","Panel","inherit","klassName","pluginName","options","toggler","selector","body","_init","self","this","$toggle","_velm","find","$body","on","$this","collpasePlugin","toggle","data","expand","toogle","full","unfull","toogleFull","close","panel_dom","dom","id","minimize","promise","then","fadeOut","Accordion","panel","template","panels","forEach","panelEl","push","_panels","_post","_refresh","updates","get","addPanel","remove","expandAll","collapseAll","overrided","_elm","overided","Button","btnSize","btnType","leftIcon","rightIcon","topIcon","bottomIcon","state","String","[object Object]","elm","$el","hasClass","href","attr","target","$fa_icon_left","length","removeClass","addClass","$fa_icon_right","super","velm","value","left","prepend","iconleft","iconright","append","register","Carousel","items","indicatorTemplate","slideTemplate","templates","container","indicators","item","slides","_bs_carousel","carousel","slideIndex","to","slideAction","prev","next","preventDefault","pos","pause","cycle","add","createIndicator","obj","thumbnailUrl","thumbnail","gallery","indicator","indicatorPrototype","cloneNode","title","getItemTitle","thumbnailProperty","thumbnailIndicators","Gallery","getItemProperty","undefined","getElementsByTagName","src","style","backgroundImage","addIndicator","index","indicatorContainer","list","setAttribute","appendChild","setActiveIndicator","activeIndicator","activeIndicatorClass","initSlides","reload","document","createElement","children","addSlide","resetSlides","empty","_Toggler","checked","isChecked","uncheck","check","set","CheckBox","selectors","chk","lbl","label","_parse","chkSelector","lblSelector","$chk","prop","disabled","_create","$lbl","_startup","evt","changed","$containerToggle","$label","$toggleContainer","setDisabledState","ComboBox","widgetClass","autoResizeMenu","filterOnKeypress","showOptionsOnKeypress","filter","predicate","visible","$dropMenu","each","i","$li","trim","substr","$element","$input","$button","dropdown","$inputGroupBtn","proxy","itemclicked","inputchanged","menuShown","keypress","setDefaultSelection","val","_destroy","outerHTML","doSelect","$item","$selectedItem","clearSelection","resizeMenu","width","outerWidth","selectedItem","txt","notFound","selectByText","textContent","innerText","toLowerCase","selectByValue","selectBySelector","selectByIndex","removeData","removeAttr","enable","disable","parent","trigger","synthetic","focus","IS_NAVIGATIONAL","which","selected","$selected","previousKeyPress","extra","prototype","getValue","TextBox","multiline","is","tagName","attrs","name","subtype","type","_dom","_sync","Listing","multiSelect","multiTier","mode","levels","hasChildren","tree","classes","expandIcon","collapseIcon","treeIcon","itemGroup","accordion","active","checkable","icon","Object","itemSelector","_$items","veItem","_elmx","multiTierMode","hasChildrenSelector","childrenSelector","iconSelector","textSelector","itemTemplate","treeIconTemplate","treeIconSelector","expandIconClass","collapseIconClass","toggleClass","closest","siblings","togglerSelector","has","not","findItem","valueOrIdx","isNumber","eq","oldValue","selectOneItem","Pagination","css","firstNavi","prevNavi","nextNavi","lastNavi","numericNavi","numericTxt","totalPages","maxButtonsVisible","currentPage","Number","$first","$prev","$last","$next","$numeric","checkCanAction","$elm","click","ret","numeric","pageNo","parseInt","totalPageNoBtns","Math","min","begin","end","count","size","visibles","$btn","show","hide","changePageNoBtns","changeLabeldBtns","Progress","bar","max","_vbar","start","slideDown","increase","tick","finish","slideUp","Radio","$radio","element","domNode","$container","ignoreVisibilityCheck","match","logError","containerSelector","setInitialState","resetGroup","setCheckedState","$radios","groupName","SearchBox","clearOnEmpty","searchOnKeyPress","allowCancel","$repeater","$icon","buttonclicked","clearPending","activeSearch","destroy","search","searchText","clear","action","currentTarget","SelectList","emptyLabelHTML","$hiddenField","$dropdownMenu","itemClicked","resize","key","fromCharCode","idx","charAt","off","itemChanged","newWidth","sizer","Boolean","clone","Tabular","buttonClasses","removeLast","insert","moveUp","moveDown","rowDrag","sectionClasses","caption","header","subPanel","footer","hideButtons","_showEmptyMessage","settings","skipWidthCalculation","tbWrap","_tbWrap","$emptyCell","_i18n","rowEmpty","_finalColSpan","maxBodyHeight","autoColumnWidth","_calculateColumnWidth","$tbWhole","$scroller","tbHeadRow","tbColGp","_rowOrder","tbBodyRow","marginThreshold","fn","modal","colLimit","childNodes","z","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","_createGridButton","param","uiIcon","genButton","isFunction","nodeType","plugin","showLabel","_sortSequence","startIndex","tbWhole","hideRowNumColumn","idPrefix","_emptyGrid","_uniqueIndex","_saveSetting","_gridRowDragged","isMoveUp","uniqueIndex","tbRowIndex","splice","afterRowDragged","join","_checkGridAndGetSettings","noMsg","$grid","alert","_systemMessages","notInit","getValueMultiGrid","_insertRow","numOfRowOrRowArray","rowIndex","callerUniqueIndex","ctrl","tbRow","tbCell","addedRows","parentIndex","hidden","tbBody","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","_wrapperId","numOfRow","loadData","isArray","isNumeric","maintainScroll","height","scrollParent","scrollTop","maxRowsAllowed","useSubPanel","insertBefore","_sectionClasses","className","rowSpan","y","columns","invisible","cellCss","ctrlName","ctrlId","nameFormatter","customBuilder","ctrlOptions","isPlainObject","lastGroupName","lastGroupElem","x","isEmpty","group","option","appendTo","Option","arrayOpt","split","eqIndex","indexOf","substring","selectmenu","uiOption","textAlign","err","datepicker","spinner","autocomplete","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","uiTooltip","tooltip","onClick","caller","callback","appendGrid","onChange","change","getRowIndex","setCtrlValue","_hideLastColumn","_visibleCount","rowButtonsInFront","firstChild","display","button","customGridButtons","tabindex","rowUniqueIndex","insertRow","_buttonClasses","_removeRow","moveUpRow","moveDownRow","rowDragging","customRowButtons","buttonCfg","uiButton","atTheFront","makeCustomRowButton","colSpan","subPanelBuilder","_calculateWidth","scroll","scrollHeight","offsetHeight","afterRowInserted","afterRowAppended","maxNumRowsReached","newHeight","force","beforeRowRemove","removeChild","afterRowRemoved","pop","lastChild","_loadData","records","isInit","insertResult","r","c","rowDataLoaded","_isDataLoaded","initData","dataLoaded","noColumnInfo","tbHead","tbFoot","elemNotTable","tbHeadCellRowNum","tbHeadCellRowButton","extend","_defaultInitOptions","_defaultCallbackContainer","i18n","_defaultTextResources","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","Date","getTime","insertAfter","prependTo","wrap","pendingSkipCol","columnOpt","_defaultColumnOptions","resizable","displayCss","headerSpan","displayTooltip","handles","childnodes","captionTooltip","customFooterButtons","makeCustomBottomButton","sortable","axis","containment","handle","helper","tr","org","helperSelect","orgSelect","update","event","lastIndexOf","originalPosition","top","position","appendRow","initRows","isReady","isDataLoaded","load","insertUniqueIndex","removeRow","emptyGrid","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","findRowIndex","getElementById","blur","afterRowSwapped","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","rowCountName","getCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","subPanelGetter","emptyCriteria","customGetter","customSetter","notSupportMethod","exButton","btnClass","btnCss","btnAttr","rowData","keyName","suffix","adtData","newData","columnName","currentValue","defaultValue","TabStrip","tab","content","tabpane","droptabs","dropdownMenu","dropdownTabs","dropdownCaret","visibleTabs","auto","pullDropdownRight","$header","$tabs","$content","$tabpanes","tabEl","arrange","dropdownTabsSelector","visibleTabsSelector","dropdownLabel","$dropdownTabs","$visibleTabs","tempElem","hiddenElementWidth","availableSpace","visibleTabsWidth","reverse","first","detach","Toolbar","toolbarFloat","toolbarHidden","toolbarFloatOffset","separator","toolbarHeight","_this","opts","wrapper","editor","editable","util","reflow","os","mobile","offset","outerHeight","placeholderEl","addToolItem","itemWidget","addSeparator","main"],"mappings":"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","file":"../skylark-widgets-swt.js","sourcesContent":["define('skylark-widgets-swt/swt',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\tvar ui = skylark.ui = skylark.ui || {};\r\n\t\tsbswt = ui.sbswt = {};\r\n\r\n\tvar CONST = {\r\n\t\tBACKSPACE_KEYCODE: 8,\r\n\t\tCOMMA_KEYCODE: 188, // `,` & `<`\r\n\t\tDELETE_KEYCODE: 46,\r\n\t\tDOWN_ARROW_KEYCODE: 40,\r\n\t\tENTER_KEYCODE: 13,\r\n\t\tTAB_KEYCODE: 9,\r\n\t\tUP_ARROW_KEYCODE: 38\r\n\t};\r\n\r\n\tvar isShiftHeld = function isShiftHeld (e) { return e.shiftKey === true; };\r\n\r\n\tvar isKey = function isKey (keyCode) {\r\n\t\treturn function compareKeycodes (e) {\r\n\t\t\treturn e.keyCode === keyCode;\r\n\t\t};\r\n\t};\r\n\r\n\tvar isBackspaceKey = isKey(CONST.BACKSPACE_KEYCODE);\r\n\tvar isDeleteKey = isKey(CONST.DELETE_KEYCODE);\r\n\tvar isTabKey = isKey(CONST.TAB_KEYCODE);\r\n\tvar isUpArrow = isKey(CONST.UP_ARROW_KEYCODE);\r\n\tvar isDownArrow = isKey(CONST.DOWN_ARROW_KEYCODE);\r\n\r\n\tvar ENCODED_REGEX = /&[^\\s]*;/;\r\n\t/*\r\n\t * to prevent double encoding decodes content in loop until content is encoding free\r\n\t */\r\n\tvar cleanInput = function cleanInput (questionableMarkup) {\r\n\t\t// check for encoding and decode\r\n\t\twhile (ENCODED_REGEX.test(questionableMarkup)) {\r\n\t\t\tquestionableMarkup = $('<i>').html(questionableMarkup).text();\r\n\t\t}\r\n\r\n\t\t// string completely decoded now encode it\r\n\t\treturn $('<i>').text(questionableMarkup).html();\r\n\t};\r\n\r\n\tlangx.mixin(ui, {\r\n\t\tCONST: CONST,\r\n\t\tcleanInput: cleanInput,\r\n\t\tisBackspaceKey: isBackspaceKey,\r\n\t\tisDeleteKey: isDeleteKey,\r\n\t\tisShiftHeld: isShiftHeld,\r\n\t\tisTabKey: isTabKey,\r\n\t\tisUpArrow: isUpArrow,\r\n\t\tisDownArrow: isDownArrow\r\n\t});\r\n\r\n\treturn ui;\r\n\r\n});\r\n\ndefine('skylark-widgets-swt/Widget',[\r\n  \"skylark-widgets-base/Widget\"\r\n],function(Widget){\r\n  return Widget;\r\n});\r\n\ndefine('skylark-widgets-swt/Panel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget){\r\n\r\n  var Panel = Widget.inherit({\r\n    klassName : \"Panel\",\r\n\r\n    pluginName : \"lark.panel\",\r\n\r\n    options : {\r\n      toggler : {\r\n        selector : \".panel-heading [data-toggle=\\\"collapse\\\"]\"\r\n      },\r\n\r\n      body : {\r\n        selector : \".panel-collapse\"\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var self = this;\r\n      this.$toggle = this._velm.find(this.options.toggler.selector);\r\n      this.$body = this._velm.find(this.options.body.selector);\r\n      this.$toggle.on('click.lark',function (e) {\r\n        var $this   = $(this);\r\n        var collpasePlugin    = self.$body.collapse('instance');\r\n        if (collpasePlugin) {\r\n          collpasePlugin.toggle();\r\n        } else {\r\n          self.$body.collapse($this.data());\r\n        }\r\n      });\r\n\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      this.$body.collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      this.$body.collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     this.body.collapse(\"toogle\");\r\n    },\r\n\r\n    full : function() {\r\n\r\n    },\r\n\r\n    unfull : function() {\r\n\r\n    },\r\n\r\n    toogleFull : function() {\r\n\r\n    },\r\n    \r\n    close: function () {\r\n      var panel_dom = this.dom(id);\r\n      this.minimize(id, true).promise().then(function () {\r\n        panel_dom.fadeOut();\r\n      });\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  return Panel;\r\n\r\n});\ndefine('skylark-widgets-swt/Accordion',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-bootstrap3/collapse\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"./Panel\"\r\n],function(langx,browser,eventer,noder,geom,$,collapse,swt,Widget, Panel){\r\n\r\n  var Accordion = Widget.inherit({\r\n    klassName : \"Accordion\",\r\n\r\n    pluginName : \"lark.accordion\",\r\n\r\n    options : {\r\n      panel: {\r\n        selector : \"> .panel\",\r\n        template : null,\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var panels = [];\r\n      this._velm.$(this.options.panel.selector).forEach(function(panelEl){\r\n        var panel = new Accordion.Panel(panelEl,{\r\n\r\n        });\r\n        panels.push(panel);\r\n      });\r\n      this._panels = panels;\r\n    },\r\n\r\n    _post : function() {\r\n      // handle internal events\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n    },\r\n\r\n    panels : {\r\n      get : function() {\r\n\r\n      }\r\n    },\r\n\r\n\r\n    addPanel : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Removes a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    remove : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands a accordion pane.\r\n     *\r\n     * @method remove\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expand : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Expands all accordion panes.\r\n     *\r\n     * @method expandAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    expandAll : function() {\r\n      // expand a panel\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapse a accordion pane.\r\n     *\r\n     * @method collapse\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapse : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Collapses all accordion pane.\r\n     *\r\n     * @method collapseAll\r\n     * @return {Accordion} The current widget.\r\n     */\r\n    collapseAll : function() {\r\n\r\n    }\r\n  });\r\n\r\n  Accordion.Panel = Panel.inherit({\r\n    klassName : \"AccordionPanel\",\r\n\r\n    _init : function() {\r\n      //this._velm.collapse();\r\n      this.overrided();\r\n    },\r\n\r\n    expand : function() {\r\n      // expand this panel\r\n      $(this._elm).collapse(\"show\");\r\n    },\r\n\r\n    collapse : function() {\r\n      // collapse this panel\r\n      $(this._elm).collapse(\"hide\");\r\n    },\r\n\r\n    toogle : function() {\r\n      // toogle this panel\r\n     $(this._elm).collapse(\"toogle\");\r\n    },\r\n\r\n    remove : function() {\r\n      this.overided();\r\n    }\r\n  });\r\n\r\n  return swt.Accordion = Accordion;\r\n});\r\n\ndefine('skylark-widgets-swt/Button',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n\tclass Button extends Widget {\r\n\t\tget klassName() {\r\n      return \"Button\";\r\n    } \r\n\r\n    get pluginName(){\r\n      return \"lark.button\";\r\n    } \r\n\r\n\t\tget options () {\r\n      return {\r\n        btnSize : \"lg\",\r\n        btnType : \"default\",\r\n        leftIcon : null,\r\n        rightIcon : null,\r\n        topIcon : null, // TODO\r\n        bottomIcon : null //TODO        \r\n      }\r\n\t\t}\r\n\r\n    get state() {\r\n      return {\r\n        \"text\" : String\r\n      }\r\n    }\r\n\r\n    _parse (elm,options) {\r\n      var $el = $(elm),\r\n          options = langx.mixin({},options);\r\n\r\n      if (!options.btnType) {\r\n        if ($el.hasClass(\"btn-link\")) {\r\n          options.btnType = \"link\";\r\n        } else if ($el.hasClass(\"btn-default\")) {\r\n          options.btnType = \"default\";\r\n        } else if ($el.hasClass(\"btn-primary\")) {\r\n          options.btnType = \"primary\";\r\n        } else if ($el.hasClass(\"btn-info\")) {\r\n          options.btnType = \"info\";\r\n        } else if ($el.hasClass(\"btn-success\")) {\r\n          options.btnType = \"success\";\r\n        } else if ($el.hasClass(\"btn-warning\")) {\r\n          options.btnType = \"warning\";\r\n        } else if ($el.hasClass(\"btn-danger\")) {\r\n          options.btnType = \"danger\";\r\n        }        \r\n      }\r\n\r\n      if (!options.btnSize) {\r\n        if ($el.hasClass(\"btn-xs\")) {\r\n          options.btnSize = \"xs\";\r\n        } else if ($el.hasClass(\"btn-sm\")) {\r\n          options.btnSize = \"sm\";\r\n        } else if ($el.hasClass(\"btn-lg\")) {\r\n          options.btnSize = \"lg\";\r\n        }        \r\n      }\r\n\r\n      if (!options.href) {\r\n        options.href = $el.attr('href');\r\n\r\n        options.target = $el.attr('target');\r\n      }\r\n\r\n      if (!options.text) {\r\n        options.text = $el.find('.text').text();\r\n      }\r\n\r\n      if (!options.leftIcon) {\r\n        var $fa_icon_left = $el.find('.fa-icon-left');\r\n        if ($fa_icon_left.length > 0) {\r\n          $fa_icon_left.removeClass('fa-icon-left').removeClass('fa');\r\n          options.leftIcon = $fa_icon_left.attr('class');\r\n          $fa_icon_left.addClass('fa-icon-left').addClass('fa');\r\n        }\r\n      }\r\n\r\n      if (!options.rightIcon) {\r\n        var $fa_icon_right = $el.find('.fa-icon-right');\r\n\r\n        if ($fa_icon_right.length > 0) {\r\n          $fa_icon_right.removeClass('fa-icon-right').removeClass('fa');\r\n          options.rightIcon = $fa_icon_right.attr('class');\r\n          $fa_icon_right.addClass('fa-icon-right').addClass('fa');\r\n        }        \r\n      }\r\n    }\r\n\r\n    _refresh (updates) {\r\n      //this.overrided(updates);\r\n      super._refresh(updates);\r\n\r\n      var velm = this._velm;\r\n\r\n      if (updates.btnType) {\r\n          velm.removeClass('btn-link btn-default btn-primary btn-info btn-success btn-warning btn-danger').addClass(\"btn-\" + updates.btnType.value);\r\n      }\r\n\r\n      if (updates.btnSize) {\r\n        velm.removeClass('btn-xs btn-sm btn-lg').addClass(\"btn-\" + updates.btnSize.value);\r\n      }\r\n\r\n      if (updates.text) {\r\n        velm.$('.text').text(updates.text.value);\r\n      }\r\n\r\n      if (updates.left) {\r\n          velm.$('.fa-icon-left').remove();\r\n          velm.prepend('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-left fa-' + updates.iconleft.value + '\">&nbsp;</i>\\n');\r\n      }\r\n\r\n      if (updates.iconright) {\r\n          velm.$('.fa-icon-right').remove();\r\n          if (updates.iconright.value) {\r\n              velm.append('<i style=\"word-spacing: -1em;\" class=\"fa fa-icon-right fa-' + updates.iconright.value + '\">&nbsp;</i>\\n');\r\n          }\r\n      }\r\n    }\r\n  };\r\n\r\n  Widget.register(Button);\r\n//  class Buttonx extends Button {\r\n//\r\n//  }\r\n\r\n//  Widget.register(Buttonx,\"lark.button\");\r\n  return swt.Button = Button;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Carousel',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/carousel\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var Carousel =  Widget.inherit({\r\n        klassName : \"Carousel\",\r\n        pluginName : \"lark.carousel\",\r\n\r\n        options : {\r\n\r\n            items : [],\r\n\r\n            indicatorTemplate : \"\",\r\n            slideTemplate : \"\",\r\n\r\n            templates : {\r\n              container : \"<div class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\">\" +\r\n                          \"/div\",\r\n              indicators : {\r\n                  container : \"<ol class=\\\"carousel-indicators\\\">\" +\r\n                              \"</ol>\",\r\n                  item :  \"<li></li>\"\r\n              },\r\n\r\n              slides : {\r\n                  container : \"<div class=\\\"carousel-inner\\\">\" +\r\n                              \"/div\",\r\n                  item :  \"<div class=\\\"item carousel-item\\\">\" +\r\n                            \"<img alt=\\\"First slide\\\"  src=\\\"{{url}}\\\">\" +\r\n                          \"</div>\"\r\n              }\r\n            }\r\n        },\r\n\r\n        _init : function() {\r\n          this._bs_carousel = this._velm.carousel(this.options);\r\n          var self = this;          \r\n          this._velm.on(\"click.lark\", \"[data-slide],[data-slide-to]\", function(e) {\r\n            var $this = $(this)\r\n            var slideIndex = $this.attr('data-slide-to');\r\n            if (slideIndex) {\r\n                self.to(slideIndex);\r\n            } else {\r\n              var slideAction = $this.attr('data-slide');\r\n              if (slideAction == \"prev\") {\r\n                self.prev();\r\n              } else {\r\n                self.next();\r\n              }\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n        });\r\n        },\r\n\r\n        to : function(pos) {\r\n          return this._bs_carousel.to(pos);\r\n        },\r\n\r\n        pause : function(e) {\r\n          this._bs_carousel.pause(e);\r\n          return this;\r\n        },\r\n\r\n        cycle : function(e) {\r\n          return this._bs_carousel.cycle(e);\r\n        },\r\n\r\n        next : function() {\r\n          return this._bs_carousel.next();\r\n        },\r\n\r\n        prev : function() {\r\n          return this._bs_carousel.prev();\r\n        },\r\n\r\n        add : function() {\r\n            \r\n        },\r\n\r\n        createIndicator: function (obj) {\r\n          var gallery = this.gallery,\r\n            indicator = this.indicatorPrototype.cloneNode(false)\r\n          var title = gallery.getItemTitle(obj)\r\n          var thumbnailProperty = this.options.thumbnailProperty\r\n          var thumbnailUrl\r\n          var thumbnail\r\n          if (this.options.thumbnailIndicators) {\r\n            if (thumbnailProperty) {\r\n              thumbnailUrl = Gallery.getItemProperty(obj, thumbnailProperty)\r\n            }\r\n            if (thumbnailUrl === undefined) {\r\n              thumbnail = obj.getElementsByTagName && $(obj).find('img')[0]\r\n              if (thumbnail) {\r\n                thumbnailUrl = thumbnail.src\r\n              }\r\n            }\r\n            if (thumbnailUrl) {\r\n              indicator.style.backgroundImage = 'url(\"' + thumbnailUrl + '\")'\r\n            }\r\n          }\r\n          if (title) {\r\n            indicator.title = title;\r\n          }\r\n          return indicator;\r\n      },\r\n\r\n      addIndicator: function (index) {\r\n        if (this.indicatorContainer.length) {\r\n          var indicator = this.createIndicator(this.list[index])\r\n          indicator.setAttribute('data-slide-to', index)\r\n          this.indicatorContainer[0].appendChild(indicator)\r\n          this.indicators.push(indicator)\r\n        }\r\n      },\r\n\r\n      setActiveIndicator: function (index) {\r\n        if (this.indicators) {\r\n          if (this.activeIndicator) {\r\n            this.activeIndicator.removeClass(this.options.activeIndicatorClass)\r\n          }\r\n          this.activeIndicator = $(this.indicators[index])\r\n          this.activeIndicator.addClass(this.options.activeIndicatorClass)\r\n        }\r\n      },\r\n\r\n      initSlides: function (reload) {\r\n        if (!reload) {\r\n          this.indicatorContainer = this.container.find(\r\n            this.options.indicatorContainer\r\n          )\r\n          if (this.indicatorContainer.length) {\r\n            this.indicatorPrototype = document.createElement('li')\r\n            this.indicators = this.indicatorContainer[0].children\r\n          }\r\n        }\r\n        this.overrided(reload);\r\n      },\r\n\r\n      addSlide: function (index) {\r\n        this.overrided(index);\r\n        this.addIndicator(index)\r\n      },\r\n\r\n      resetSlides: function () {\r\n        this.overrided();\r\n        this.indicatorContainer.empty();\r\n        this.indicators = [];\r\n      },\r\n\r\n    });\r\n\r\n    return swt.Carousel = Carousel;\r\n\r\n});\ndefine('skylark-widgets-swt/_Toggler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var _Toggler = swt._Toggler = Widget.inherit({\r\n    klassName: \"_Toggler\",\r\n\r\n    toggle: function () {\r\n      var checked = this.isChecked();\r\n\r\n      if (checked) {\r\n        this.uncheck();\r\n      } else {\r\n        this.check();\r\n      }\r\n    },\r\n\r\n    check: function  () {\r\n      this.state.set('checked',true);\r\n      return this;\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.state.set('checked',false);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Getter function for the checked state.\r\n     *\r\n     * @method isChecked\r\n     * @return {Boolean} True/false \r\n     */\r\n    isChecked: function () {\r\n      return this.state.get('checked');\r\n    }\r\n  });\r\n\r\n\treturn _Toggler;\r\n});\r\n\ndefine('skylark-widgets-swt/CheckBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var CheckBox =  _Toggler.inherit({\r\n    klassName: \"CheckBox\",\r\n\r\n    pluginName : \"lark.checkbox\",\r\n\r\n    options : {\r\n      selectors : {\r\n        chk : \"input[type=checkbox]\",\r\n        lbl : \"checkbox-label\"\r\n      },\r\n      template : undefined,\r\n      checked : undefined,\r\n      label : undefined,\r\n      value : undefined\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _parse : function(elm,options) {\r\n      options = this.overrided(elm,options);\r\n      var $el = $(elm),\r\n          chkSelector = options.selectors && options.selectors.chk,\r\n          lblSelector = options.selectors && options.selectors.lbl;\r\n\r\n      if (!chkSelector) {\r\n        chkSelector = this.options.selectors.chk;\r\n      }\r\n      if (!lblSelector) {\r\n        lblSelector = this.options.selectors.lbl;\r\n      }\r\n\r\n      var $chk = $el.find(chkSelector),\r\n          $lbl = $el.find(lblSelector);\r\n\r\n      if (options.checked == undefined) {\r\n        options.checked = $chk.prop('checked')\r\n      } else {\r\n        $chk.prop('checked',options.checked);\r\n      }\r\n\r\n      if (options.disabled == undefined) {\r\n        options.disabled = $chk.prop('disabled')\r\n      } else {\r\n        $chk.prop('disabled',options.disabled);\r\n      }\r\n\r\n      return options;\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _create : function() {\r\n      //TODO\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _init : function() {\r\n      var elm = this._elm;\r\n\r\n      // cache elements\r\n      this.$lbl = this._velm.$(this.options.selectors.lbl);\r\n      this.$chk = this._velm.$(this.options.selectors.chk);\r\n    },\r\n\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _startup : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$chk.on('change', function(evt) {\r\n        //var $chk = $(evt.target);\r\n        var checked = self.$chk.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    /*\r\n     *@override\r\n     */\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            $chk.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $chk.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $chk.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $chk.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    }\r\n  });\r\n\r\n\treturn swt.CheckBox = CheckBox;\r\n});\r\n\ndefine('skylark-widgets-swt/ComboBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\",\r\n  \"skylark-bootstrap3/dropdown\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n\r\n\r\n\t// COMBOBOX CONSTRUCTOR AND PROTOTYPE\r\n\r\n\tvar ComboBox = Widget.inherit({\r\n\t\tklassName: \"ComboBox\",\r\n\r\n\t\tpluginName : \"lark.combobox\",\r\n\r\n\t\twidgetClass : \"lark-combobox\",\r\n\r\n\t\toptions : {\r\n\r\n\t\t\tautoResizeMenu: true,\r\n\t\t\tfilterOnKeypress: false,\r\n\t\t\tshowOptionsOnKeypress: false,\r\n\t\t\tfilter: function filter (list, predicate, self) {\r\n\t\t\t\tvar visible = 0;\r\n\t\t\t\tself.$dropMenu.find('.empty-indicator').remove();\r\n\r\n\t\t\t\tlist.each(function (i) {\r\n\t\t\t\t\tvar $li = $(this);\r\n\t\t\t\t\tvar text = $(this).text().trim();\r\n\r\n\t\t\t\t\t$li.removeClass();\r\n\r\n\t\t\t\t\tif (text === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-success');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else if (text.substr(0, predicate.length) === predicate) {\r\n\t\t\t\t\t\t$li.addClass('text-info');\r\n\t\t\t\t\t\tvisible++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$li.addClass('hidden');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (visible === 0) {\r\n\t\t\t\t\tself.$dropMenu.append('<li class=\"empty-indicator text-muted\"><em>No Matches</em></li>');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis.$element = $(this._elm);\r\n\r\n\t\t\tthis.$dropMenu = this.$element.find('.dropdown-menu');\r\n\t\t\tthis.$input = this.$element.find('input');\r\n\t\t\tthis.$button = this.$element.find('.btn');\r\n\t\t\tthis.$button.dropdown();\r\n\t\t\tthis.$inputGroupBtn = this.$element.find('.input-group-btn');\r\n\r\n\t\t\tthis.$element.on('click.lark', 'a', langx.proxy(this.itemclicked, this));\r\n\t\t\tthis.$element.on('change.lark', 'input', langx.proxy(this.inputchanged, this));\r\n\t\t\tthis.$element.on('shown.bs.dropdown', langx.proxy(this.menuShown, this));\r\n\t\t\tthis.$input.on('keyup.lark', langx.proxy(this.keypress, this));\r\n\r\n\t\t\t// set default selection\r\n\t\t\tthis.setDefaultSelection();\r\n\r\n\t\t\t// if dropdown is empty, disable it\r\n\t\t\tvar items = this.$dropMenu.children('li');\r\n\t\t\tif( items.length === 0) {\r\n\t\t\t\tthis.$button.addClass('disabled');\r\n\t\t\t}\r\n\r\n\t\t\t// filter on load in case the first thing they do is press navigational key to pop open the menu\r\n\t\t\tif (this.options.filterOnKeypress) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_destroy: function () {\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// remove any external bindings\r\n\t\t\t// [none]\r\n\r\n\t\t\t// set input value attrbute in markup\r\n\t\t\tthis.$element.find('input').each(function () {\r\n\t\t\t\t$(this).attr('value', $(this).val());\r\n\t\t\t});\r\n\r\n\t\t\t// empty elements to return to original markup\r\n\t\t\t// [none]\r\n\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\tdoSelect: function ($item) {\r\n\r\n\t\t\tif (typeof $item[0] !== 'undefined') {\r\n\t\t\t\t// remove selection from old item, may result in remove and\r\n\t\t\t\t// re-addition of class if item is the same\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\r\n\t\t\t\t// add selection to new item\r\n\t\t\t\tthis.$selectedItem = $item;\r\n\t\t\t\tthis.$selectedItem.addClass('selected');\r\n\r\n\t\t\t\t// update input\r\n\t\t\t\tthis.$input.val(this.$selectedItem.text().trim());\r\n\t\t\t} else {\r\n\t\t\t\t// this is a custom input, not in the menu\r\n\t\t\t\tthis.$selectedItem = null;\r\n\t\t\t\tthis.$element.find('li.selected:first').removeClass('selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclearSelection: function () {\r\n\t\t\tthis.$selectedItem = null;\r\n\t\t\tthis.$input.val('');\r\n\t\t\tthis.$dropMenu.find('li').removeClass('selected');\r\n\t\t},\r\n\r\n\t\tmenuShown: function () {\r\n\t\t\tif (this.options.autoResizeMenu) {\r\n\t\t\t\tthis.resizeMenu();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresizeMenu: function () {\r\n\t\t\tvar width = this.$element.outerWidth();\r\n\t\t\tthis.$dropMenu.outerWidth(width);\r\n\t\t},\r\n\r\n\t\tselectedItem: function () {\r\n\t\t\tvar item = this.$selectedItem;\r\n\t\t\tvar data = {};\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\tvar txt = this.$selectedItem.text().trim();\r\n\t\t\t\tdata = langx.mixin({\r\n\t\t\t\t\ttext: txt\r\n\t\t\t\t}, this.$selectedItem.data());\r\n\t\t\t} else {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: this.$input.val().trim(),\r\n\t\t\t\t\tnotFound: true\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t},\r\n\r\n\t\tselectByText: function (text) {\r\n\t\t\tvar $item = $([]);\r\n\t\t\tthis.$element.find('li').each(function () {\r\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').trim().toLowerCase() === (text || '').trim().toLowerCase()) {\r\n\t\t\t\t\t$item = $(this);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tselectByValue: function (value) {\r\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectByIndex: function (index) {\r\n\t\t\t// zero-based index\r\n\t\t\tvar selector = 'li:eq(' + index + ')';\r\n\t\t\tthis.selectBySelector(selector);\r\n\t\t},\r\n\r\n\t\tselectBySelector: function (selector) {\r\n\t\t\tvar $item = this.$element.find(selector);\r\n\t\t\tthis.doSelect($item);\r\n\t\t},\r\n\r\n\t\tsetDefaultSelection: function () {\r\n\t\t\tvar selector = 'li[data-selected=true]:first';\r\n\t\t\tvar item = this.$element.find(selector);\r\n\r\n\t\t\tif (item.length > 0) {\r\n\t\t\t\t// select by data-attribute\r\n\t\t\t\tthis.selectBySelector(selector);\r\n\t\t\t\titem.removeData('selected');\r\n\t\t\t\titem.removeAttr('data-selected');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenable: function () {\r\n\t\t\tthis.$element.removeClass('disabled');\r\n\t\t\tthis.$input.removeAttr('disabled');\r\n\t\t\tthis.$button.removeClass('disabled');\r\n\t\t},\r\n\r\n\t\tdisable: function () {\r\n\t\t\tthis.$element.addClass('disabled');\r\n\t\t\tthis.$input.attr('disabled', true);\r\n\t\t\tthis.$button.addClass('disabled');\r\n\t\t},\r\n\r\n\t\titemclicked: function (e) {\r\n\t\t\tthis.$selectedItem = $(e.target).parent();\r\n\r\n\t\t\t// set input text and trigger input change event marked as synthetic\r\n\t\t\tthis.$input.val(this.$selectedItem.text().trim()).trigger('change', {\r\n\t\t\t\tsynthetic: true\r\n\t\t\t});\r\n\r\n\t\t\t// pass object including text and any data-attributes\r\n\t\t\t// to onchange event\r\n\t\t\tvar data = this.selectedItem();\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\t// return focus to control after selecting an option\r\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\r\n\t\t},\r\n\r\n\t\tkeypress: function (e) {\r\n\t\t\tvar ENTER = 13;\r\n\t\t\t//var TAB = 9;\r\n\t\t\tvar ESC = 27;\r\n\t\t\tvar LEFT = 37;\r\n\t\t\tvar UP = 38;\r\n\t\t\tvar RIGHT = 39;\r\n\t\t\tvar DOWN = 40;\r\n\r\n\t\t\tvar IS_NAVIGATIONAL = (\r\n\t\t\t\te.which === UP ||\r\n\t\t\t\te.which === DOWN ||\r\n\t\t\t\te.which === LEFT ||\r\n\t\t\t\te.which === RIGHT\r\n\t\t\t);\r\n\r\n\t\t\tif(this.options.showOptionsOnKeypress && !this.$inputGroupBtn.hasClass('open')){\r\n\t\t\t\tthis.$button.dropdown('toggle');\r\n\t\t\t\tthis.$input.focus();\r\n\t\t\t}\r\n\r\n\t\t\tif (e.which === ENTER) {\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tvar selected = this.$dropMenu.find('li.selected').text().trim();\r\n\t\t\t\tif(selected.length > 0){\r\n\t\t\t\t\tthis.selectByText(selected);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.selectByText(this.$input.val());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (e.which === ESC) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.clearSelection();\r\n\t\t\t\tthis.$inputGroupBtn.removeClass('open');\r\n\t\t\t} else if (this.options.showOptionsOnKeypress) {\r\n\t\t\t\tif (e.which === DOWN || e.which === UP) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar $selected = this.$dropMenu.find('li.selected');\r\n\t\t\t\t\tif ($selected.length > 0) {\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = $selected.next(':not(.hidden)');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = $selected.prev(':not(.hidden)');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($selected.length === 0){\r\n\t\t\t\t\t\tif (e.which === DOWN) {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):first');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$selected = this.$dropMenu.find('li:not(.hidden):last');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.doSelect($selected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid filtering on navigation key presses\r\n\t\t\tif (this.options.filterOnKeypress && !IS_NAVIGATIONAL) {\r\n\t\t\t\tthis.options.filter(this.$dropMenu.find('li'), this.$input.val(), this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.previousKeyPress = e.which;\r\n\t\t},\r\n\r\n\t\tinputchanged: function (e, extra) {\r\n\t\t\tvar val = $(e.target).val();\r\n\t\t\t// skip processing for internally-generated synthetic event\r\n\t\t\t// to avoid double processing\r\n\t\t\tif (extra && extra.synthetic) {\r\n\t\t\t\tthis.selectByText(val);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.selectByText(val);\r\n\r\n\t\t\t// find match based on input\r\n\t\t\t// if no match, pass the input value\r\n\t\t\tvar data = this.selectedItem();\r\n\t\t\tif (data.text.length === 0) {\r\n\t\t\t\tdata = {\r\n\t\t\t\t\ttext: val\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// trigger changed event\r\n\t\t\tthis.$element.trigger('changed.lark', data);\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\tComboBox.prototype.getValue = ComboBox.prototype.selectedItem;\r\n\r\n\r\n\r\n\treturn swt.ComboBox = ComboBox;\r\n});\r\n\ndefine('skylark-widgets-swt/TextBox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n  var SyncAttrs = [\r\n    'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n    'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n  ];\r\n\r\n\tvar TextBox =  swt.TextBox = Widget.inherit({\r\n\t\tklassName: \"TextBox\",\r\n\r\n    pluginName: \"lark.textbox\",\r\n\r\n    /*\r\n     * Parse options from attached dom element.\r\n     * @override\r\n     */\r\n    _parse : function() {\r\n      var  velm = this._velm;\r\n\r\n      // get multiline option\r\n      this.options.multiline = velm.is(\"textarea\");\r\n      \r\n      // get current state of input\r\n      var value = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n      this.state.set(\"value\",value);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    /*\r\n     * Create a new  dom element for this widget\r\n     * @override\r\n     */\r\n    _create : function() {\r\n      var tagName = \"input\",attrs = {},\r\n          options = this.options;\r\n\r\n      langx.each([\r\n        'rows', 'spellcheck', 'maxLength', 'size', 'readonly', 'min',\r\n        'max', 'step', 'list', 'pattern', 'placeholder', 'required', 'multiple'\r\n      ], function (name) {\r\n        attrs[name] = options[name];\r\n      });\r\n\r\n      if (options.multiline) {\r\n        tagName = \"textarea\"\r\n      } \r\n      if (options.subtype) {\r\n        attrs.type = options.subtype;\r\n      }\r\n      this._elm = this._dom.noder.createElement(tagName,attrs);\r\n    },\r\n\r\n    /*\r\n     * Init this widget\r\n     * @override\r\n     */\r\n    _init : function() {\r\n    },\r\n\r\n    /*\r\n     * Sync dom element to widget state \r\n     * @override\r\n     */\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this._velm.on('change', function(evt) {\r\n        var value = self._velm.prop('value');\r\n        self.state.set(\"value\",value);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n        var self  = this;\r\n\r\n        if (updates[\"value\"] !== undefined) {\r\n          if (self._velm.value() !== e.value) {\r\n            self._velm.value(updates.value);\r\n          }\r\n        }\r\n        if (updates[\"disabled\"] !== undefined) {\r\n          self._velm.disable(updates[\"disabled\"]);\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n    },\r\n\r\n  });\r\n\r\n\treturn TextBox;\r\n});\r\n\r\n\n define('skylark-widgets-swt/Listing',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,$,swt,Widget){\r\n\r\n    var Listing = Widget.inherit({\r\n        klassName : \"Listing\",\r\n\r\n        pluginName : \"lark.listing\",\r\n\r\n        options : {\r\n        \tmultiSelect: false,\r\n        \t//multiTier : false,\r\n\r\n          multiTier : {\r\n            mode   : \"\",  // \"tree\" or \"accordion\" or \"popup\"\r\n            levels : 2,\r\n            selectors :  {\r\n              children : \"ul\",  // \"> .list-group\"\r\n              hasChildren : \":has(ul)\"\r\n            },\r\n            tree : {\r\n              classes : {\r\n                expandIcon: 'glyphicon-plus',    // \"glyphicon-chevron-down\", 'glyphicon-folder-open'\r\n                collapseIcon: 'glyphicon-minus', // \"glyphicon-chevron-right\", 'glyphicon-folder-close'\r\n                children : \"\"                              // \"list-group children\"\r\n              },\r\n              templates : {\r\n                treeIcon : \"<i class=\\\"glyphicon\\\"></i>\",\r\n                itemGroup: \"\"\r\n\r\n              },\r\n              selectors : {\r\n                treeIcon : \" > i\"\r\n              }\r\n            },\r\n\r\n            accordion : {\r\n              selectors : {\r\n                toggler : \" > a\"\r\n              }\r\n\r\n            }\r\n          },\r\n\r\n        \ttoggle : false,\r\n        \tclasses : {\r\n          \tactive : \"active\"\r\n        \t},\r\n\r\n\r\n        \tselectors : {\r\n          \titem : \"li\",                   // \".list-group-item\"\r\n\r\n        \t},\r\n\r\n          item : {\r\n            template : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n            checkable : false,\r\n            selectors : {\r\n              icon : \" > span > i\",\r\n              text : \" > span > a\"\r\n            }\r\n          },\r\n\r\n        \tselected : 0\r\n        },\r\n\r\n        state : {\r\n          selected : Object\r\n        },\r\n\r\n        _init : function() {\r\n            this.overrided();\r\n            var self = this,\r\n                velm = this._velm,\r\n                itemSelector = this.options.selectors.item;\r\n\r\n            this._$items = velm.$(itemSelector);\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = self._elmx(this);\r\n\r\n                if (!veItem.hasClass('disabled')) {\r\n                  var value = veItem.data(\"value\");\r\n                  if (value === undefined) {\r\n                    value = self._$items.index(this);\r\n                  }\r\n                  self.state.set(\"selected\",value);\r\n                }\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n            this.state.set(\"selected\",this.options.selected);\r\n\r\n            var $this = velm,\r\n                $toggle = this.options.toggle,\r\n                multiTierMode = this.options.multiTier.mode,\r\n                hasChildrenSelector = this.options.multiTier.selectors.hasChildren,\r\n                childrenSelector = this.options.multiTier.selectors.children,\r\n                iconSelector = this.options.item.selectors.icon,\r\n                textSelector = this.options.item.selectors.text,\r\n                itemTemplate = this.options.item.template,                \r\n                obj = this;\r\n\r\n\r\n            if (multiTierMode) {\r\n              if (multiTierMode == \"tree\") {\r\n                   var treeIconTemplate = this.options.multiTier.tree.templates.treeIcon,\r\n                       treeIconSelector = this.options.multiTier.tree.selectors.treeIcon,\r\n                       expandIconClass = this.options.multiTier.tree.classes.expandIcon,\r\n                       collapseIconClass = this.options.multiTier.tree.classes.collapseIcon;\r\n\r\n                   this._$items.each(function(){\r\n                     if($(this).is(hasChildrenSelector)) {\r\n                        var children = $(this).find(childrenSelector);\r\n                        $(children).remove();\r\n                        text = $(this).text().trim();\r\n                        $(this).html(treeIconTemplate+itemTemplate);\r\n                        $(this).find(treeIconSelector).addClass(expandIconClass).on(\"click\" + \".\" + self.pluginName, function(e) {\r\n                            e.preventDefault();\r\n\r\n                            $(this).toggleClass(expandIconClass).toggleClass(collapseIconClass);\r\n\r\n                            $(this).closest(\"li\").toggleClass(\"active\").children(\"ul\").collapse(\"toggle\");\r\n\r\n                            if ($toggle) {\r\n                                $(this).closest(\"li\").siblings().removeClass(\"active\").children(\"ul.in\").collapse(\"hide\");\r\n                            }\r\n                        });\r\n\r\n                        $(this).find(iconSelector).addClass('glyphicon-folder-open');\r\n                        $(this).find(textSelector).text(text);\r\n                        $(this).append(children);\r\n\r\n\r\n\r\n                      }  else {\r\n                        text = $(this).text().trim();\r\n                        $(this).html(treeIconTemplate+itemTemplate);\r\n                        $(this).find(iconSelector).addClass('glyphicon-file');\r\n                        $(this).find(textSelector).text(text);\r\n                    }\r\n\r\n                   });\r\n              } else if (multiTierMode == \"accordion\") {\r\n                var togglerSelector = self.options.multiTier.accordion.selectors.toggler;\r\n\r\n                this._$items.has(childrenSelector).find(togglerSelector).on(\"click\" + \".\" + this.pluginName, function(e) {\r\n                    e.preventDefault();\r\n\r\n                    $(this).closest(itemSelector).toggleClass(\"active\").children(childrenSelector).collapse(\"toggle\");\r\n\r\n                    if ($toggle) {\r\n                        $(this).closest(itemSelector).siblings().removeClass(\"active\").children(childrenSelector+\".in\").collapse(\"hide\");\r\n                    }\r\n                });\r\n              }\r\n\r\n\r\n             this._$items.filter(\".active\").has(childrenSelector).children(childrenSelector).addClass(\"collapse in\");\r\n             this._$items.not(\".active\").has(childrenSelector).children(childrenSelector).addClass(\"collapse\");\r\n\r\n              \r\n            }   \r\n        },\r\n\r\n        _refresh : function(updates) {\r\n          this.overrided(updates);\r\n          var self  = this;\r\n\r\n          function findItem(valueOrIdx) {\r\n            var $item;\r\n            if (langx.isNumber(valueOrIdx)) {\r\n              $item = self._$items.eq(valueOrIdx);\r\n            } else {\r\n              $item = self._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n            }\r\n            return $item;\r\n          } \r\n                 \r\n          function selectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).addClass(self.options.classes.active);\r\n          }\r\n\r\n          function unselectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).removeClass(self.options.classes.active);\r\n          }\r\n\r\n          if (updates[\"selected\"]) {\r\n            if (this.options.multiSelect) {\r\n            } else {\r\n              unselectOneItem(updates[\"selected\"].oldValue);\r\n              selectOneItem(updates[\"selected\"].value);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n  });\r\n\r\n  return swt.Listing = Listing;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-widgets-swt/Pagination',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n    var Pagination = swt.Pagination = Widget.inherit({\r\n        klassName : \"Pagination\",\r\n\r\n        pluginName : \"lark.pagination\",\r\n\r\n        options : {\r\n            tagName : \"ul\",\r\n            css : \"\",\r\n            selectors : {\r\n                firstNavi : \"li[aria-label='first']\",\r\n                prevNavi : \"li[aria-label='prev']\",\r\n                nextNavi : \"li[aria-label='next']\",\r\n                lastNavi : \"li[aria-label='last']\",\r\n                numericNavi : \"li:not([aria-label])\",\r\n                numericTxt  : \"a\"\r\n            },\r\n            totalPages: 7,\r\n            maxButtonsVisible: 5,\r\n            currentPage: 1     \r\n        },\r\n\r\n        state : {\r\n            totalPages : Number,\r\n            currentPage : Number\r\n        },\r\n\r\n        _parse : function(elm,options) {\r\n\r\n        },\r\n        \r\n        _create : function(self) {\r\n        },\r\n\r\n        _init : function() {\r\n          this.$first = this._velm.$(this.options.selectors.firstNavi);\r\n          this.$prev = this._velm.$(this.options.selectors.prevNavi);\r\n          this.$last = this._velm.$(this.options.selectors.lastNavi);\r\n          this.$next = this._velm.$(this.options.selectors.nextNavi);\r\n          this.$numeric = this._velm.$(this.options.selectors.numericNavi);\r\n\r\n          var self = this;\r\n\r\n          function checkCanAction(elm) {\r\n            var $elm = $(elm);\r\n            if ($elm.is(\".disabled,.active\")) {\r\n              return false;\r\n            } else {\r\n              return $elm;\r\n            }\r\n          }\r\n\r\n          this.$first.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(1);\r\n          });\r\n\r\n          this.$prev.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()-1);\r\n          });\r\n\r\n          this.$last.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.totalPages());\r\n          });\r\n\r\n          this.$next.click(function(){\r\n            if (!checkCanAction(this)) {\r\n              return;\r\n            }\r\n            self.currentPage(self.currentPage()+1);\r\n          });\r\n\r\n          this.$numeric.click(function(){\r\n            var ret = checkCanAction(this)\r\n            if (!ret) {\r\n              return;\r\n            }\r\n            var numeric = ret.find(self.options.selectors.numericTxt).text(),\r\n                pageNo = parseInt(numeric);\r\n            self.currentPage(pageNo);\r\n\r\n          });\r\n\r\n          this.state.set(\"currentPage\",this.options.currentPage);\r\n          this.state.set(\"totalPages\",this.options.totalPages);\r\n\r\n          this.overrided();\r\n        },\r\n\r\n        _refresh: function (updates) {\r\n          this.overrided(updates);\r\n          var self = this;\r\n\r\n          function changePageNoBtns(currentPage,totalPages) {\r\n\r\n            // Create the numeric buttons.\r\n            // Variable of number control in the buttons.\r\n            var totalPageNoBtns = Math.min(totalPages, self.options.maxButtonsVisible);\r\n            var begin = 1;\r\n            var end = begin + totalPageNoBtns - 1;\r\n\r\n            /*\r\n             * Align the values in the begin and end variables if the user has the\r\n             * possibility that select a page that doens't appear in the paginador.\r\n             * e.g currentPage = 1, and user go to the 20 page.\r\n             */\r\n            while ((currentPage < begin) || (currentPage > end)) {\r\n              if (currentPage > end) {\r\n                 begin += totalPageNoBtns;\r\n                 end += totalPageNoBtns;\r\n\r\n                 if (end > totalPages) {\r\n                   begin = begin - (end - totalPages);\r\n                   end = totalPages;\r\n                 }\r\n               } else {\r\n                 begin -= totalPageNoBtns;\r\n                 end -= totalPageNoBtns;\r\n\r\n                 if (begin < 0) {\r\n                   end = end + (begin + totalPageNoBtns);\r\n                   begin = 1;\r\n                 }\r\n               }\r\n            }\r\n           /*\r\n            * Verify if the user clicks in the last page show by paginator.\r\n            * If yes, the paginator advances.\r\n            */\r\n            if ((currentPage === end) && (totalPages != 1)) {\r\n              begin = currentPage - 1;\r\n              end = begin + totalPageNoBtns - 1;\r\n\r\n              if (end >= totalPages) {\r\n                begin = begin - (end - (totalPages));\r\n                end = totalPages;\r\n              }\r\n            }\r\n\r\n            /*\r\n             * Verify it the user clicks in the first page show by paginator.\r\n             * If yes, the paginator retrogress\r\n             */\r\n             if ((begin === currentPage) && (totalPages != 1)) {\r\n               if (currentPage != 1) {\r\n                 end = currentPage + 1;\r\n                 begin = end - (totalPageNoBtns - 1);\r\n               }\r\n             }\r\n\r\n             var count = self.$numeric.size(),\r\n                 visibles = end-begin + 1,\r\n                 i = 0;\r\n\r\n             self.$numeric.filter(\".active\").removeClass(\"active\");\r\n             while (i<visibles) {\r\n               var pageNo = i + begin,\r\n                   $btn = self.$numeric.eq(i);\r\n               $btn.find(self.options.selectors.numericTxt).text(i+begin).show();\r\n               if (pageNo == currentPage) {\r\n                $btn.addClass(\"active\");\r\n               }\r\n               i++;\r\n             }\r\n             while (i<count) {\r\n               self.$numeric.eq(i).find(self.options.selectors.numericTxt).text(i+begin).hide();\r\n               i++;\r\n             }\r\n\r\n\r\n          }\r\n\r\n          function changeLabeldBtns(currentPage,totalPages) {\r\n            if (currentPage < 1) {\r\n              throw('Page can\\'t be less than 1');\r\n            } else if (currentPage > totalPages) {\r\n              throw('Page is bigger than total pages');\r\n            }\r\n\r\n            if (totalPages < 1) {\r\n              throw('Total Pages can\\'t be less than 1');\r\n            }\r\n\r\n            if (currentPage == 1 ) {\r\n              self.$first.addClass(\"disabled\");\r\n              self.$prev.addClass(\"disabled\");\r\n            } else {\r\n              self.$first.removeClass(\"disabled\");\r\n              self.$prev.removeClass(\"disabled\");\r\n            }\r\n\r\n            if (currentPage == totalPages ) {\r\n              self.$last.addClass(\"disabled\");\r\n              self.$next.addClass(\"disabled\");\r\n            } else {\r\n              self.$last.removeClass(\"disabled\");\r\n              self.$next.removeClass(\"disabled\");\r\n            }\r\n          }\r\n\r\n          if (updates.currentPage || updates.totalPages) {\r\n            var currentPage = self.currentPage(),\r\n                totalPages = self.totalPages();\r\n\r\n            changePageNoBtns(currentPage,totalPages);\r\n            changeLabeldBtns(currentPage,totalPages);\r\n          }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return Pagination;\r\n});\ndefine('skylark-widgets-swt/Progress',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    'use strict';\r\n\r\n     var Progress = swt.Progress = Widget.inherit({\r\n     \tklassName : \"Progress\",\r\n\r\n     \tpluginName : \"lark.progress\",\r\n\r\n     \toptions : {\r\n     \t\tselectors : {\r\n     \t\t\tbar : \"progress-bar\"\r\n     \t\t},\r\n     \t\tmin : 0,\r\n     \t\tmax : 100\r\n     \t},\r\n\r\n     \tstate : {\r\n     \t\tvalue : Number\r\n     \t},\r\n\r\n\t\t_init : function() {\r\n\t\t\tthis._vbar = this._velm.find(this.options.selectors.bar);\r\n\t\t\tthis.value(this.options.min);\r\n\t\t},\r\n\r\n\t\t_refresh : function() {\r\n\t        this.overrided(changed);\r\n\t        var self  = this;\r\n\r\n\t        if (updates[\"value\"] !== undefined) {\r\n\t        \tvar value = updates[\"value\"],\r\n\t        \t\tmin = this.options.min,\r\n\t        \t\tmax = this.options.max;\r\n\r\n\t\t\t\tthis._vbar.css(\"width\",(value-min)/(max-min)*100+\"%\");\r\n\t        }\r\n\t\t},\r\n\r\n\t\tstart : function(max){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideDown();\r\n\t\t},\r\n\r\n\t\tincrease : function(tick){\r\n\t\t\tvar value = this.value();\r\n\t\t\tthis.value(value += tick*1.0);\r\n\t\t},\r\n\r\n\t\tfinish : function(){\r\n\t\t\tthis.value(this.options.min);\r\n\t\t\tthis._velm.slideUp();\r\n\t\t}     \t\r\n     });\r\n\r\n\treturn Progress;\r\n\t\r\n });\ndefine('skylark-widgets-swt/Radio',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,_Toggler){\r\n\r\n  var Radio = swt.Radio = _Toggler.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"lark.radio\",\r\n\r\n    _parse : function() {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      this.state.set(\"checked\",checked);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    _init : function() {\r\n      //this.options = langx.mixin({}, $.fn.checkbox.defaults, options);\r\n      var element = this.domNode;\r\n      var $element = $(element);\r\n\r\n      if (element.tagName.toLowerCase() !== 'label') {\r\n        logError('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$radio = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        logError('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$radio.on('change', function(evt) {\r\n        //var $radio = $(evt.target);\r\n        var checked = self.$radio.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            // reset all items in group\r\n            this.resetGroup();\r\n\r\n            $radio.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $radio.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $radio = self.$radio;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $radio.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $radio.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    },\r\n\r\n    resetGroup: function resetGroup () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    }\r\n  });\r\n\r\n  return Radio;\r\n});\r\n\r\n\ndefine('skylark-widgets-swt/SearchBox',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SEARCH CONSTRUCTOR AND PROTOTYPE\n\n\tvar SearchBox = Widget.inherit({\n\t\tklassName: \"SearchBox\",\n\n\t\tpluginName: \"lark.searchbox\",\n\n\t\toptions : {\n\t\t\tclearOnEmpty: false,\n\t\t\tsearchOnKeyPress: false,\n\t\t\tallowCancel: false\n\t\t},\n\t\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\tthis.$repeater = this.$element.closest('.repeater');\n\n\t\t\tif (this.$element.attr('data-searchOnKeyPress') === 'true'){\n\t\t\t\tthis.options.searchOnKeyPress = true;\n\t\t\t}\n\n\t\t\tthis.$button = this.$element.find('button');\n\t\t\tthis.$input = this.$element.find('input');\n\t\t\tthis.$icon = this.$element.find('.glyphicon, .fuelux-icon');\n\n\t\t\tthis.$button.on('click.fu.search', langx.proxy(this.buttonclicked, this));\n\t\t\tthis.$input.on('keyup.fu.search', langx.proxy(this.keypress, this));\n\n\t\t\tif (this.$repeater.length > 0) {\n\t\t\t\tthis.$repeater.on('rendered.fu.repeater', langx.proxy(this.clearPending, this));\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t},\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// set input value attrbute\n\t\t\tthis.$element.find('input').each(function () {\n\t\t\t\t$(this).attr('value', $(this).val());\n\t\t\t});\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tsearch: function (searchText) {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-search').addClass('glyphicon-remove');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-search').addClass('fuelux-icon-remove');\n\t\t\t}\n\n\t\t\tthis.activeSearch = searchText;\n\t\t\tthis.$element.addClass('searched pending');\n\t\t\tthis.$element.trigger('searched.fu.search', searchText);\n\t\t},\n\n\t\tclear: function () {\n\t\t\tif (this.$icon.hasClass('glyphicon')) {\n\t\t\t\tthis.$icon.removeClass('glyphicon-remove').addClass('glyphicon-search');\n\t\t\t}\n\t\t\tif (this.$icon.hasClass('fuelux-icon')) {\n\t\t\t\tthis.$icon.removeClass('fuelux-icon-remove').addClass('fuelux-icon-search');\n\t\t\t}\n\n\t\t\tif (this.$element.hasClass('pending')) {\n\t\t\t\tthis.$element.trigger('canceled.fu.search');\n\t\t\t}\n\n\t\t\tthis.activeSearch = '';\n\t\t\tthis.$input.val('');\n\t\t\tthis.$element.trigger('cleared.fu.search');\n\t\t\tthis.$element.removeClass('searched pending');\n\t\t},\n\n\t\tclearPending: function () {\n\t\t\tthis.$element.removeClass('pending');\n\t\t},\n\n\t\taction: function () {\n\t\t\tvar val = this.$input.val();\n\n\t\t\tif (val && val.length > 0) {\n\t\t\t\tthis.search(val);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t},\n\n\t\tbuttonclicked: function (e) {\n\t\t\te.preventDefault();\n\t\t\tif ($(e.currentTarget).is('.disabled, :disabled')) return;\n\n\t\t\tif (this.$element.hasClass('pending') || this.$element.hasClass('searched')) {\n\t\t\t\tthis.clear();\n\t\t\t} else {\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function (e) {\n\t\t\tvar ENTER_KEY_CODE = 13;\n\t\t\tvar TAB_KEY_CODE = 9;\n\t\t\tvar ESC_KEY_CODE = 27;\n\n\t\t\tif (e.which === ENTER_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.action();\n\t\t\t} else if (e.which === TAB_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t} else if (e.which === ESC_KEY_CODE) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.clear();\n\t\t\t} else if (this.options.searchOnKeyPress) {\n\t\t\t\t// search on other keypress\n\t\t\t\tthis.action();\n\t\t\t}\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$input.attr('disabled', 'disabled');\n\n\t\t\tif (!this.options.allowCancel) {\n\t\t\t\tthis.$button.addClass('disabled');\n\t\t\t}\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$input.removeAttr('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t}\n\t});\n\n\treturn \tswt.SearchBox = SearchBox;\n});\n\ndefine('skylark-widgets-swt/SelectList',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"./swt\",\n  \"./Widget\",\n  \"skylark-bootstrap3/dropdown\"\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\n\n\n\t// SELECT CONSTRUCTOR AND PROTOTYPE\n\n\tvar SelectList = Widget.inherit({\n\t\tklassName: \"SelectList\",\n\n\t\tpluginName : \"lark.selectlist\",\n\t\n\t\toptions : {\n\t\t\temptyLabelHTML: '<li data-value=\"\"><a href=\"#\">No items</a></li>'\n\n\t\t},\n\n\t\t_init : function() {\n\t\t\tthis.$element = $(this._elm);\n\t\t\t//this.options = langx.mixin({}, $.fn.selectlist.defaults, options);\n\n\n\t\t\tthis.$button = this.$element.find('.btn.dropdown-toggle');\n\t\t\tthis.$hiddenField = this.$element.find('.hidden-field');\n\t\t\tthis.$label = this.$element.find('.selected-label');\n\t\t\tthis.$dropdownMenu = this.$element.find('.dropdown-menu');\n\n\t\t\tthis.$button.dropdown();\n\n\t\t\tthis.$element.on('click.fu.selectlist', '.dropdown-menu a', langx.proxy(this.itemClicked, this));\n\t\t\tthis.setDefaultSelection();\n\n\t\t\tif (this.options.resize === 'auto' || this.$element.attr('data-resize') === 'auto') {\n\t\t\t\tthis.resize();\n\t\t\t}\n\n\t\t\t// if selectlist is empty or is one item, disable it\n\t\t\tvar items = this.$dropdownMenu.children('li');\n\t\t\tif( items.length === 0) {\n\t\t\t\tthis.disable();\n\t\t\t\tthis.doSelect( $(this.options.emptyLabelHTML));\n\t\t\t}\n\n\t\t\t// support jumping focus to first letter in dropdown when key is pressed\n\t\t\tthis.$element.on('shown.bs.dropdown', function () {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t// attach key listener when dropdown is shown\n\t\t\t\t\t$(document).on('keypress.fu.selectlist', function(e){\n\n\t\t\t\t\t\t// get the key that was pressed\n\t\t\t\t\t\tvar key = String.fromCharCode(e.which);\n\t\t\t\t\t\t// look the items to find the first item with the first character match and set focus\n\t\t\t\t\t\t$this.find(\"li\").each(function(idx,item){\n\t\t\t\t\t\t\tif ($(item).text().charAt(0).toLowerCase() === key) {\n\t\t\t\t\t\t\t\t$(item).children('a').focus();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// unbind key event when dropdown is hidden\n\t\t\tthis.$element.on('hide.bs.dropdown', function () {\n\t\t\t\t\t$(document).off('keypress.fu.selectlist');\n\t\t\t});\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\t\t\t// empty elements to return to original markup\n\t\t\t// [none]\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tdoSelect: function ($item) {\n\t\t\tvar $selectedItem;\n\t\t\tthis.$selectedItem = $selectedItem = $item;\n\n\t\t\tthis.$hiddenField.val(this.$selectedItem.attr('data-value'));\n\t\t\tthis.$label.html($(this.$selectedItem.children()[0]).html());\n\n\t\t\t// clear and set selected item to allow declarative init state\n\t\t\t// unlike other controls, selectlist's value is stored internal, not in an input\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ($selectedItem.is($(this))) {\n\t\t\t\t\t$(this).attr('data-selected', true);\n\t\t\t\t} else {\n\t\t\t\t\t$(this).removeData('selected').removeAttr('data-selected');\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\titemClicked: function (e) {\n\t\t\tthis.$element.trigger('clicked.fu.selectlist', this.$selectedItem);\n\n\t\t\te.preventDefault();\n\t\t\t// ignore if a disabled item is clicked\n\t\t\tif ($(e.currentTarget).parent('li').is('.disabled, :disabled')) { return; }\n\n\t\t\t// is clicked element different from currently selected element?\n\t\t\tif (!($(e.target).parent().is(this.$selectedItem))) {\n\t\t\t\tthis.itemChanged(e);\n\t\t\t}\n\n\t\t\t// return focus to control after selecting an option\n\t\t\tthis.$element.find('.dropdown-toggle').focus();\n\t\t},\n\n\t\titemChanged: function (e) {\n\t\t\t//selectedItem needs to be <li> since the data is stored there, not in <a>\n\t\t\tthis.doSelect($(e.target).closest('li'));\n\n\t\t\t// pass object including text and any data-attributes\n\t\t\t// to onchange event\n\t\t\tvar data = this.selectedItem();\n\t\t\t// trigger changed event\n\t\t\tthis.$element.trigger('changed.fu.selectlist', data);\n\t\t},\n\n\t\tresize: function () {\n\t\t\tvar width = 0;\n\t\t\tvar newWidth = 0;\n\t\t\tvar sizer = $('<div/>').addClass('selectlist-sizer');\n\n\n\t\t\tif (Boolean($(document).find('html').hasClass('fuelux'))) {\n\t\t\t\t// default behavior for fuel ux setup. means fuelux was a class on the html tag\n\t\t\t\t$(document.body).append(sizer);\n\t\t\t} else {\n\t\t\t\t// fuelux is not a class on the html tag. So we'll look for the first one we find so the correct styles get applied to the sizer\n\t\t\t\t$('.fuelux:first').append(sizer);\n\t\t\t}\n\n\t\t\tsizer.append(this.$element.clone());\n\n\t\t\tthis.$element.find('a').each(function () {\n\t\t\t\tsizer.find('.selected-label').text($(this).text());\n\t\t\t\tnewWidth = sizer.find('.selectlist').outerWidth();\n\t\t\t\tnewWidth = newWidth + sizer.find('.sr-only').outerWidth();\n\t\t\t\tif (newWidth > width) {\n\t\t\t\t\twidth = newWidth;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (width <= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$button.css('width', width);\n\t\t\tthis.$dropdownMenu.css('width', width);\n\n\t\t\tsizer.remove();\n\t\t},\n\n\t\tselectedItem: function () {\n\t\t\tvar txt = this.$selectedItem.text();\n\t\t\treturn langx.mixin({\n\t\t\t\ttext: txt\n\t\t\t}, this.$selectedItem.data());\n\t\t},\n\n\t\tselectByText: function (text) {\n\t\t\tvar $item = $([]);\n\t\t\tthis.$element.find('li').each(function () {\n\t\t\t\tif ((this.textContent || this.innerText || $(this).text() || '').toLowerCase() === (text || '').toLowerCase()) {\n\t\t\t\t\t$item = $(this);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tselectByValue: function (value) {\n\t\t\tvar selector = 'li[data-value=\"' + value + '\"]';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectByIndex: function (index) {\n\t\t\t// zero-based index\n\t\t\tvar selector = 'li:eq(' + index + ')';\n\t\t\tthis.selectBySelector(selector);\n\t\t},\n\n\t\tselectBySelector: function (selector) {\n\t\t\tvar $item = this.$element.find(selector);\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tsetDefaultSelection: function () {\n\t\t\tvar $item = this.$element.find('li[data-selected=true]').eq(0);\n\n\t\t\tif ($item.length === 0) {\n\t\t\t\t$item = this.$element.find('li').has('a').eq(0);\n\t\t\t}\n\n\t\t\tthis.doSelect($item);\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.removeClass('disabled');\n\t\t\tthis.$button.removeClass('disabled');\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.addClass('disabled');\n\t\t\tthis.$button.addClass('disabled');\n\t\t}\n\n\t});\t\n\n\n\tSelectList.prototype.getValue = SelectList.prototype.selectedItem;\n\n\n\n\treturn swt.SelectList = SelectList;\n});\n\ndefine('skylark-widgets-swt/Tabular',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n        _showEmptyMessage : function (settings, skipWidthCalculation) {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n            $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n            if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n                // Check scrolling enabled\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    // Set the width of empty message cell to the thead width\r\n                    $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n                }\r\n            }\r\n        },  \r\n\r\n        _calculateColumnWidth : function () {\r\n            var tbWrap = this._tbWrap;\r\n\r\n            var $tbWhole = $('table.body', tbWrap);\r\n            var $scroller = $('div.scroller', tbWrap);\r\n            var settings = $tbWhole.data('appendGrid');\r\n            var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n            var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n            // Check any rows within the grid\r\n            if (settings._rowOrder.length > 0) {\r\n                // Reset the table/column width\r\n                $('td', tbHeadRow).width('auto');\r\n                $('col', tbColGp).width('auto');\r\n                $tbWhole.width('auto');\r\n                $scroller.width('auto');\r\n                // Check the total number of columns\r\n                var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n                var marginThreshold = -2;\r\n                if ($.fn.modal) {\r\n                    // If bootstrap is loaded, cell margin was reset\r\n                    marginThreshold = 1;\r\n                }\r\n                var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n                for (var z = 0; z < colLimit; z++) {\r\n                    var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                    var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                    if (bodyCellWidth > headCellWidth) {\r\n                        tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                    } else {\r\n                        tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n            }\r\n            // Set the width of footer row\r\n            $('table.foot', tbWrap).width($tbWhole.width());\r\n            // Check the scroll panel width\r\n            $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n        },\r\n\r\n\r\n        _createGridButton : function (param, uiIcon) {\r\n            // Generate the standard grid action button based on its parameter.\r\n            var genButton = null;\r\n            if (param) {\r\n                if (langx.isFunction(param)) {\r\n                    // Generate button if it is a function.\r\n                    genButton = $(param());\r\n                } else if (param.nodeType) {\r\n                    // Clone the button if it is a DOM element.\r\n                    genButton = $(param).clone();\r\n                } else if (param.icon || param.label) {\r\n                    // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                    genButton = $('<button/>').attr({ type: 'button' });\r\n                    genButton.plugin(\"lark.button\",param);\r\n                }\r\n            }\r\n            if (!genButton) {\r\n                // Use default setting (jQuery UI Button) if button is not created.\r\n                genButton = $('<button/>').attr({ type: 'button' });\r\n                genButton.plugin(\"lark.button\",{ icon: uiIcon, showLabel: false });\r\n            }\r\n            return genButton;\r\n        },\r\n\r\n        _sortSequence : function (startIndex) {\r\n            var tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (!settings.hideRowNumColumn) {\r\n                for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                    $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        _emptyGrid : function () {\r\n            var tbWhole = this._elm;\r\n\r\n            // Load settings\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Remove rows\r\n            $('tbody', tbWhole).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Add empty row\r\n            this._showEmptyMessage(settings);\r\n        },        \r\n\r\n        _gridRowDragged : function (isMoveUp, uniqueIndex, tbRowIndex) {\r\n            var tbWhole = this._elm;\r\n\r\n            // Get setting\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            // Find the start sorting index\r\n            var startIndex = -1;\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    if (isMoveUp) {\r\n                        startIndex = tbRowIndex;\r\n                        settings._rowOrder.splice(z, 1);\r\n                        settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                    } else {\r\n                        startIndex = z;\r\n                        settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                        settings._rowOrder.splice(z, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            // Do re-order\r\n            this._sortSequence( startIndex);\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n\r\n            // Trigger event\r\n            if (langx.isFunction(settings.afterRowDragged)) {\r\n                settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n            }\r\n        },\r\n\r\n       _saveSetting : function (settings) {\r\n            var tbWhole = this._elm;\r\n\r\n            $(tbWhole).data('appendGrid', settings);\r\n            $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n        },\r\n\r\n\r\n        _checkGridAndGetSettings : function (noMsg) {\r\n            // Check the jQuery grid object is initialized and return its settings\r\n\r\n            var settings = null,\r\n                $grid = $(this._elm);\r\n\r\n            if ($grid.length == 1) {\r\n                settings = $grid.data('appendGrid');\r\n                if (!settings && !noMsg) {\r\n                    alert(_systemMessages.notInit);\r\n                }\r\n            } else if (!noMsg) {\r\n                alert(_systemMessages.getValueMultiGrid);\r\n            }\r\n            return settings;\r\n        },\r\n\r\n        _insertRow : function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            // Define variables\r\n            var self = this,\r\n                tbWhole = this._elm;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n            var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maxBodyHeight > 0) {\r\n                tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n            }\r\n            // Check number of row to be inserted\r\n            var numOfRow = numOfRowOrRowArray, loadData = false;\r\n            if (langx.isArray(numOfRowOrRowArray)) {\r\n                numOfRow = numOfRowOrRowArray.length;\r\n                loadData = true;\r\n            }\r\n            // Check parent row\r\n            if (langx.isNumeric(callerUniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                        rowIndex = z;\r\n                        if (z != 0) parentIndex = z - 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (langx.isNumeric(rowIndex)) {\r\n                if (rowIndex >= settings._rowOrder.length) {\r\n                    rowIndex = null;\r\n                } else {\r\n                    parentIndex = rowIndex - 1;\r\n                }\r\n            }\r\n            else if (settings._rowOrder.length != 0) {\r\n                rowIndex = null;\r\n                parentIndex = settings._rowOrder.length - 1;\r\n            }\r\n            // Store old grid height\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                $('tr.empty', tbWhole).remove();\r\n                calColWidth = true;\r\n            }\r\n            // Add total number of row\r\n            for (var z = 0; z < numOfRow; z++) {\r\n                // Check maximum number of rows\r\n                if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                    reachMaxRow = true;\r\n                    break;\r\n                }\r\n                // Update variables\r\n                settings._uniqueIndex++;\r\n                uniqueIndex = settings._uniqueIndex;\r\n                hidden.length = 0;\r\n                // Check row insert index\r\n                if (langx.isNumeric(rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    addedRows.push(rowIndex);\r\n                }\r\n                else {\r\n                    settings._rowOrder.push(uniqueIndex);\r\n                    tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                    }\r\n                    addedRows.push(settings._rowOrder.length - 1);\r\n                }\r\n                tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n                if (settings._sectionClasses.body) {\r\n                    tbRow.className = settings._sectionClasses.body;\r\n                }\r\n                $(tbRow).data('appendGrid', uniqueIndex);\r\n                // Config on the sub panel row\r\n                if (tbSubRow != null) {\r\n                    tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                    $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                    if (settings._sectionClasses.subPanel) {\r\n                        tbSubRow.className = settings._sectionClasses.subPanel;\r\n                    }\r\n                }\r\n                // Add row number\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                    if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n                }\r\n                // Process on each columns\r\n                for (var y = 0; y < settings.columns.length; y++) {\r\n                    // Skip hidden\r\n                    if (settings.columns[y].type == 'hidden') {\r\n                        hidden.push(y);\r\n                        continue;\r\n                    }\r\n                    // Check column invisble\r\n                    var className = 'ui-widget-content';\r\n                    if (settings.columns[y].invisible) className += ' invisible';\r\n                    // Insert cell\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                    tbCell.className = className;\r\n                    if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                    // Prepare control id and name\r\n                    var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrlName = ctrlId;\r\n                    }\r\n                    // Check control type\r\n                    ctrl = null;\r\n                    if (settings.columns[y].type == 'custom') {\r\n                        if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                            ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        }\r\n                    } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                        ctrl = document.createElement('select');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        // Build option list\r\n                        if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                            // For array type option list\r\n                            if (settings.columns[y].ctrlOptions.length > 0) {\r\n                                if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                    // Check to generate optGroup or not\r\n                                    var lastGroupName = null, lastGroupElem = null;\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                            if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                                lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                                lastGroupElem = document.createElement('optgroup');\r\n                                                lastGroupElem.label = lastGroupName;\r\n                                                ctrl.appendChild(lastGroupElem);\r\n                                            }\r\n                                        } else {\r\n                                            lastGroupElem = null;\r\n                                        }\r\n                                        var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                        if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                            option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                        }\r\n                                        if (null == lastGroupElem) {\r\n                                            option.appendTo(ctrl);\r\n                                        }\r\n                                        else {\r\n                                            option.appendTo(lastGroupElem);\r\n                                        }\r\n                                        // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                        ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                            // For plain object type option list\r\n                            for (var x in settings.columns[y].ctrlOptions) {\r\n                                ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                            }\r\n                        } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                            // For string type option list\r\n                            var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                            for (var x = 0; x < arrayOpt.length; x++) {\r\n                                var eqIndex = arrayOpt[x].indexOf(':');\r\n                                if (-1 == eqIndex) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                                } else {\r\n                                    ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                                }\r\n                            }\r\n                        } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                            settings.columns[y].ctrlOptions(ctrl);\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-selectmenu') {\r\n                            $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    else if (settings.columns[y].type == 'checkbox') {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'checkbox';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        ctrl.value = 1;\r\n                        tbCell.appendChild(ctrl);\r\n                        tbCell.style.textAlign = 'center';\r\n                    }\r\n                    else if (settings.columns[y].type == 'textarea') {\r\n                        ctrl = document.createElement('textarea');\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                        ctrl = document.createElement('input');\r\n                        try {\r\n                            ctrl.type = settings.columns[y].type;\r\n                        }\r\n                        catch (err) { /* Not supported type */ }\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    else {\r\n                        // Generate text input\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.type = 'text';\r\n                        ctrl.id = ctrlId;\r\n                        ctrl.name = ctrlName;\r\n                        tbCell.appendChild(ctrl);\r\n                        // Handle UI widget\r\n                        if (settings.columns[y].type == 'ui-datepicker') {\r\n                            $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-spinner') {\r\n                            $(ctrl).spinner(settings.columns[y].uiOption);\r\n                        } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                            $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                        }\r\n                    }\r\n                    // Add extra control properties\r\n                    if (settings.columns[y].type != 'custom') {\r\n                        // Add control attributes as needed\r\n                        if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                        // Add control properties as needed\r\n                        if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                        // Add control CSS as needed\r\n                        if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                        // Add control class as needed\r\n                        if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                        // Add jQuery UI tooltip as needed\r\n                        if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                        // Add control events as needed\r\n                        if (langx.isFunction(settings.columns[y].onClick)) {\r\n                            $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                        if (langx.isFunction(settings.columns[y].onChange)) {\r\n                            $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                                evt.data.callback(evt, $(evt.data.caller).plugin(\"lark.tabular\").getRowIndex(evt.data.uniqueIndex));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                    } else if (!isEmpty(settings.columns[y].value)) {\r\n                        // Set default value\r\n                        setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                    }\r\n                }\r\n                // Add button cell if needed\r\n                if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                    if (!settings.rowButtonsInFront) {\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    } else if (!settings.hideRowNumColumn) {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                    } else {\r\n                        tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                    }\r\n                    tbCell.className = 'ui-widget-content last';\r\n                    tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                    if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                    // Add standard buttons\r\n                    if (!settings.hideButtons.insert) {\r\n                        var button = this._createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n                            .attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n                            .addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").insertRow(1, null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                    }\r\n                    if (!settings.hideButtons.remove) {\r\n                        var button = this._createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n                            .attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n                            .addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                self._removeRow( null, rowUniqueIndex, false);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                    }\r\n                    if (!settings.hideButtons.moveUp) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n                            .attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n                            .addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveUpRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                    }\r\n                    if (!settings.hideButtons.moveDown) {\r\n                        var button = this._createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n                            .attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n                            .addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                            .click(function (evt) {\r\n                                var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                                $(tbWhole).plugin(\"lark.tabular\").moveDownRow(null, rowUniqueIndex);\r\n                                if (evt && evt.preventDefault) evt.preventDefault();\r\n                                return false;\r\n                            }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                    }\r\n                    // Handle row dragging\r\n                    if (settings.rowDragging) {\r\n                        var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                            .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                            .appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                    }\r\n                    // Add hidden\r\n                    for (var y = 0; y < hidden.length; y++) {\r\n                        ctrl = document.createElement('input');\r\n                        ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                        if (langx.isFunction(settings.nameFormatter)) {\r\n                            ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                        } else {\r\n                            ctrl.name = ctrl.id;\r\n                        }\r\n                        ctrl.type = 'hidden';\r\n\r\n                        if (loadData) {\r\n                            // Load data if needed\r\n                            ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                        } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                            // Set default value\r\n                            ctrl.value = settings.columns[hidden[y]].value;\r\n                        }\r\n                        tbCell.appendChild(ctrl);\r\n                    }\r\n                    // Add extra buttons\r\n                    if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                            var buttonCfg = settings.customRowButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Create sub panel\r\n                if (settings.useSubPanel) {\r\n                    tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.className = 'ui-widget-content';\r\n                    tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                    if (langx.isFunction(settings.subPanelBuilder)) {\r\n                        settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            // Check if re-calculate column width is required\r\n            if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n                var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n                if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                    calColWidth = true;\r\n                    settings._calculateWidth = false;\r\n                }\r\n            }\r\n            // Save setting\r\n            this._saveSetting(settings);\r\n            // Calculate column width\r\n            if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n                this._calculateColumnWidth();\r\n            }\r\n            // Trigger events\r\n            if (langx.isNumeric(rowIndex)) {\r\n                if (langx.isFunction(settings.afterRowInserted)) {\r\n                    settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            else {\r\n                if (langx.isFunction(settings.afterRowAppended)) {\r\n                    settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n                }\r\n            }\r\n            if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n                settings.maxNumRowsReached();\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n            // Return added rows' uniqueIndex\r\n            return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n        },\r\n\r\n        _removeRow : function (rowIndex, uniqueIndex, force) {\r\n            var tbWhole = this._elm;\r\n\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            if (langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        rowIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (langx.isNumeric(rowIndex)) {\r\n                // Remove middle row\r\n                if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                    settings._rowOrder.splice(rowIndex, 1);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    } else {\r\n                        tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Sort sequence\r\n                    this._sortSequence( rowIndex);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, rowIndex);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Store old window scroll value\r\n                var oldHeight = 0, oldScroll = 0;\r\n                if (settings.maintainScroll) {\r\n                    oldHeight = $(tbWhole).height();\r\n                    oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n                }\r\n                // Remove last row\r\n                if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                    uniqueIndex = settings._rowOrder.pop();\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(tbBody.lastChild);\r\n                    }\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Trigger event\r\n                    if (langx.isFunction(settings.afterRowRemoved)) {\r\n                        settings.afterRowRemoved(tbWhole, null);\r\n                    }\r\n                }\r\n                // Scroll the page when append row\r\n                if (settings.maintainScroll) {\r\n                    // Try to maintain the height so that user no need to scroll every time when row added\r\n                    var newHeight = $(tbWhole).height();\r\n                    $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n                }\r\n            }\r\n            // Add empty row\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings);\r\n            }\r\n        },\r\n\r\n        _loadData : function (records, isInit) {\r\n            var tbWhole = this._elm;\r\n            var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n            var settings = $(tbWhole).data('appendGrid');\r\n            if (settings) {\r\n                // Clear existing content\r\n                tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                $(tbBody).empty();\r\n                settings._rowOrder.length = 0;\r\n                settings._uniqueIndex = 0;\r\n                // Check any records\r\n                if (records != null && records.length) {\r\n                    // Add rows\r\n                    insertResult = this._insertRow(records.length, null, null);\r\n                    // Set data\r\n                    for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                        for (var c = 0; c < settings.columns.length; c++) {\r\n                            setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                        }\r\n                        if (langx.isFunction(settings.rowDataLoaded)) {\r\n                            settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                        }\r\n                    }\r\n                }\r\n                // Save setting\r\n                settings._isDataLoaded = true;\r\n                if (isInit) settings.initData = null;\r\n                $(tbWhole).data('appendGrid', settings);\r\n                // Trigger data loaded event\r\n                if (langx.isFunction(settings.dataLoaded)) {\r\n                    settings.dataLoaded(tbWhole, records);\r\n                }\r\n            }\r\n        },\r\n\r\n        _init: function () {\r\n            var options = this.options,\r\n                self = this;\r\n            // Check mandatory paramters included\r\n            if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                alert(_systemMessages.noColumnInfo);\r\n            }\r\n            // Check target element is table or not\r\n            var tbWhole = this._elm, tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n            if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                alert(_systemMessages.elemNotTable);\r\n            }\r\n            // Generate settings\r\n            var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n            // Add internal settings\r\n            langx.extend(settings, {\r\n                // The UniqueIndex accumulate counter\r\n                _uniqueIndex: 0,\r\n                // The row order array\r\n                _rowOrder: [],\r\n                // Indicate data is loaded or not\r\n                _isDataLoaded: false,\r\n                // Visible column count for internal calculation\r\n                _visibleCount: 0,\r\n                // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                _finalColSpan: 0,\r\n                // Indicate to hide last column or not\r\n                _hideLastColumn: false,\r\n                // The element ID of the `appendGrid` wrapper\r\n                _wrapperId: null,\r\n                // \r\n                _calculateWidth: true\r\n            });\r\n            // Labels or messages used in grid\r\n            if (langx.isPlainObject(options.i18n))\r\n                settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n            else\r\n                settings._i18n = langx.extend({}, _defaultTextResources);\r\n            // The extra class names for buttons\r\n            if (langx.isPlainObject(options.buttonClasses))\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n            else\r\n                settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n            // The extra class names for sections\r\n            if (langx.isPlainObject(options.sectionClasses))\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n            else\r\n                settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n            // Make sure the `hideButtons` setting defined\r\n            if (langx.isPlainObject(options.hideButtons))\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n            else\r\n                settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n            // Check `idPrefix` is defined\r\n            if (isEmpty(settings.idPrefix)) {\r\n                // Check table ID defined\r\n                if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                    // Generate an ID using current time\r\n                    settings.idPrefix = 'ag' + new Date().getTime();\r\n                }\r\n                else {\r\n                    settings.idPrefix = tbWhole.id;\r\n                }\r\n            }\r\n            // Check custom grid button parameters\r\n            if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                settings.customGridButtons = {};\r\n            }\r\n            // Check rowDragging and useSubPanel option\r\n            if (settings.useSubPanel && settings.rowDragging) {\r\n                settings.rowDragging = false;\r\n            }\r\n            // Create thead and tbody\r\n            tbHead = document.createElement('thead');\r\n            tbHead.className = 'ui-widget-header';\r\n            tbBody = document.createElement('tbody');\r\n            tbBody.className = 'ui-widget-content';\r\n            tbFoot = document.createElement('tfoot');\r\n            tbFoot.className = 'ui-widget-header';\r\n            tbColGp = document.createElement('colgroup');\r\n            // Prepare the table element\r\n            settings._wrapperId = settings.idPrefix + '-wrapper';\r\n            tbWrap = this._tbWrap = document.createElement('div');\r\n            $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n            $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n            // Check if content scrolling is enabled\r\n            if (settings.maxBodyHeight > 0) {\r\n                // Seperate the thead and tfoot from source table\r\n                $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n            } else {\r\n                // Add thead, tbody and tfoot to the same table\r\n                $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n            }\r\n            // Handle header row\r\n            var tbHeadCellRowNum, tbHeadCellRowButton;\r\n            tbHead.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.header) {\r\n                tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n            } else {\r\n                tbRow.className = 'columnHead';\r\n            }\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Prepare column information and add column header\r\n            var pendingSkipCol = 0;\r\n            for (var z = 0; z < settings.columns.length; z++) {\r\n                // Assign default setting\r\n                var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                settings.columns[z] = columnOpt;\r\n                // Skip hidden\r\n                if (settings.columns[z].type != 'hidden') {\r\n                    // Check column is invisible\r\n                    if (!settings.columns[z].invisible) {\r\n                        settings._visibleCount++;\r\n                    }\r\n                    // Check skip header colSpan\r\n                    if (pendingSkipCol == 0) {\r\n                        var className = 'ui-widget-header';\r\n                        if (settings.columns[z].invisible) className += ' invisible';\r\n                        if (settings.columns[z].resizable) className += ' resizable';\r\n                        tbRow.appendChild(tbCell = document.createElement('td'));\r\n                        tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                        tbCell.className = className;\r\n                        if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                        if (settings.columns[z].headerSpan > 1) {\r\n                            $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                            pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                        }\r\n                        // Add tooltip\r\n                        if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                        }\r\n                        else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                            $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                        }\r\n                        // Check to set display text or generate by function\r\n                        if (langx.isFunction(settings.columns[z].display)) {\r\n                            settings.columns[z].display(tbCell);\r\n                        } else if (!isEmpty(settings.columns[z].display)) {\r\n                            $(tbCell).text(settings.columns[z].display);\r\n                        }\r\n                        // Add column group for scrolling\r\n                        tbColGp.appendChild(document.createElement('col'));\r\n                    } else {\r\n                        pendingSkipCol--;\r\n                    }\r\n                }\r\n            }\r\n            // Enable columns resizable\r\n            if ($.fn.resizable ) {\r\n                $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n            }\r\n            // Check to hide last column or not\r\n            if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                    && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                    && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                settings._hideLastColumn = true;\r\n            }\r\n            // Calculate the `_finalColSpan` value\r\n            settings._finalColSpan = settings._visibleCount;\r\n            if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n            if (!settings._hideLastColumn) settings._finalColSpan++;\r\n            // Generate last column header if needed\r\n            if (!settings._hideLastColumn) {\r\n                if (settings.rowButtonsInFront) {\r\n                    if (settings.hideRowNumColumn) {\r\n                        // Insert a cell at the front\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                    } else {\r\n                        // Span the first cell that across row number and row button cells\r\n                        // tbHeadCellRowNum.colSpan = 2;\r\n                        // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                        // Insert a cell as the second column\r\n                        tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                    }\r\n                } else {\r\n                    tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                }\r\n                tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                // Add column group for scrolling\r\n                tbColGp.appendChild(document.createElement('col'));\r\n            }\r\n            // Add caption when defined\r\n            if (settings.caption) {\r\n                tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                if (settings._sectionClasses.caption) {\r\n                    tbRow.className = settings._sectionClasses.caption;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_caption_td';\r\n                tbCell.className = 'ui-state-active caption';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                // Add tooltip\r\n                if (langx.isPlainObject(settings.captionTooltip)) {\r\n                    $(tbCell).tooltip(settings.captionTooltip);\r\n                } else if (!isEmpty(settings.captionTooltip)) {\r\n                    $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                }\r\n                // Check to set display text or generate by function\r\n                if (langx.isFunction(settings.caption)) {\r\n                    settings.caption(tbCell);\r\n                } else {\r\n                    $(tbCell).text(settings.caption);\r\n                }\r\n            }\r\n            // Handle footer row\r\n            tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n            if (settings._sectionClasses.footer) {\r\n                tbRow.className = settings._sectionClasses.footer;\r\n            }\r\n            tbRow.appendChild(tbCell = document.createElement('td'));\r\n            tbCell.id = settings.idPrefix + '_footer_td';\r\n            tbCell.colSpan = settings._finalColSpan;\r\n            $('<input/>').attr({\r\n                type: 'hidden',\r\n                id: settings.idPrefix + '_rowOrder',\r\n                name: settings.idPrefix + '_rowOrder'\r\n            }).appendTo(tbCell);\r\n            // Make row invisible if all buttons are hidden\r\n            if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                    && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                tbRow.style.display = 'none';\r\n            } else {\r\n                if (!settings.hideButtons.append) {\r\n                    var button = this._createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n                    .attr({ title: settings._i18n.append }).addClass('append')\r\n                    .click(function (evt) {\r\n                        self._insertRow(1, null, null);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                }\r\n                if (!settings.hideButtons.removeLast) {\r\n                    var button = this._createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n                    .attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n                    .click(function (evt) {\r\n                        self._removeRow( null, this.value, false);\r\n                        if (evt && evt.preventDefault) evt.preventDefault();\r\n                        return false;\r\n                    }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                }\r\n                if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                        var buttonCfg = settings.customFooterButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Enable dragging\r\n            if (settings.rowDragging) {\r\n                $(tbBody).sortable({\r\n                    axis: 'y',\r\n                    containment: tbWhole,\r\n                    handle: '.rowDrag',\r\n                    helper: function (e, tr) {\r\n                        var org = tr.children();\r\n                        var helper = tr.clone();\r\n                        // Fix the cell width of cloned table cell\r\n                        helper.children().each(function (index) {\r\n                            $(this).width(org.eq(index).width());\r\n                            // Set the value of drop down list when drag (Issue #18)\r\n                            var helperSelect = $('select', this);\r\n                            if (helperSelect.length > 0) {\r\n                                for (var y = 0; y < helperSelect.length; y++) {\r\n                                    var orgSelect = org.eq(index).find('select');\r\n                                    if (orgSelect.length > y) {\r\n                                        helperSelect[y].value = orgSelect[y].value;\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        return helper;\r\n                    },\r\n                    update: function (event, ui) {\r\n                        var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                        var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                        self._gridRowDragged(ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            // Save options\r\n            $(tbWhole).data('appendGrid', settings);\r\n            if (langx.isArray(options.initData)) {\r\n                // Load data if initData is array\r\n                this._loadData(options.initData, true);\r\n            } else {\r\n                // Add empty rows\r\n                //$(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                this.appendRow(settings.initRows);\r\n            }\r\n            // Show no rows in grid\r\n            if (settings._rowOrder.length == 0) {\r\n                this._showEmptyMessage(settings, true);\r\n            }\r\n            // Calculate column width\r\n            if (settings.maxBodyHeight > 0) {\r\n                if (settings.autoColumnWidth) {\r\n                    this._calculateColumnWidth();\r\n                } else {\r\n                    $('table.foot', tbWrap).width($(tbWhole).width());\r\n                }\r\n            }\r\n        },\r\n\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = this._checkGridAndGetSettings( true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        load: function (records) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    this._loadData(records, false);\r\n                } else {\r\n                    this._emptyGrid();\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.insertRow(numOfRowOrRowArray);\r\n        },\r\n\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = this._insertRow(numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        this._sortSequence( insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                this._removeRow(rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                this._emptyGrid();\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings(), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    this._saveSetting(settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    this._saveSetting(settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = this._checkGridAndGetSettings(), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = this._checkGridAndGetSettings();\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        this._removeRow( null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n\r\n\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).plugin(\"lark.tabular\").getRowValue(null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n\r\n\r\n\r\n\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n    */\r\n\r\n    return Tabular ;\r\n});\r\n\ndefine('skylark-widgets-swt/TabStrip',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-query\",\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"skylark-bootstrap3/tab\",\r\n    \"skylark-bootstrap3/dropdown\"\r\n], function(langx, browser, eventer, noder, geom,  $, swt, Widget) {\r\n\r\n    var TabStrip = Widget.inherit({\r\n        klassName : \"TabStrip\",\r\n        pluginName : \"lark.tabstrip\",\r\n\r\n        options : {\r\n          selectors : {\r\n            header : \".nav-tabs\",\r\n            tab : \"[data-toggle=\\\"tab\\\"]\",\r\n            content : \".tab-content\",\r\n            tabpane : \".tab-pane\"\r\n          },\r\n\r\n          droptabs : {\r\n            selectors : {\r\n              dropdown : \"li.droptabs\",\r\n              dropdownMenu    : \"ul.dropdown-menu\",\r\n              dropdownTabs    : \"li\",\r\n              dropdownCaret   : \"b.caret\",\r\n              visibleTabs     : \">li:not(.dropdown)\",\r\n            },\r\n            auto              : true,\r\n            pullDropdownRight : true,\r\n\r\n\r\n          }\r\n        },\r\n\r\n        _init : function() {\r\n          this.$header = this._velm.$(this.options.selectors.header); \r\n          this.$tabs = this.$header.find(this.options.selectors.tab);\r\n          this.$content = this._velm.$(this.options.selectors.content);\r\n          this.$tabpanes = this.$content.find(this.options.selectors.tabpane);\r\n\r\n          this.$header.find('[data-toggle=\"dropdown\"]').dropdown();\r\n\r\n          var self = this;\r\n          this.$tabs.each(function(idx,tabEl){\r\n            $(tabEl).tab({\r\n              target : self.$tabpanes[idx]\r\n            });\r\n          });\r\n\r\n        },\r\n\r\n        arrange : function () {\r\n\r\n          var dropdownTabsSelector = this.options.droptabs.selectors.dropdownTabs,\r\n              visibleTabsSelector = this.options.droptabs.selectors.visibleTabs;\r\n\r\n              $container = this.$header;\r\n          var dropdown = $container.find(this.options.droptabs.selectors.dropdown);\r\n          var dropdownMenu = dropdown.find(this.options.droptabs.selectors.dropdownMenu);\r\n          var dropdownLabel = $('>a', dropdown).clone();\r\n          var dropdownCaret = $(this.options.droptabs.selectors.dropdownCaret, dropdown);\r\n\r\n          // We only want the default label, strip the caret out\r\n          $(this.options.droptabs.selectors.dropdownCaret, dropdownLabel).remove();\r\n\r\n          if (this.options.droptabs.pullDropdownRight) {\r\n            $(dropdown).addClass('pull-right');\r\n          }\r\n\r\n          var $dropdownTabs = function () {\r\n            return $(dropdownTabsSelector, dropdownMenu);\r\n          }\r\n\r\n          var $visibleTabs = function () {\r\n            return $(visibleTabsSelector, $container);\r\n          }\r\n\r\n          function getFirstHiddenElementWidth() {\r\n            var tempElem=$dropdownTabs().first().clone().appendTo($container).css(\"position\",\"fixed\");\r\n            var hiddenElementWidth = $(tempElem).outerWidth();\r\n            $(tempElem).remove();\r\n            return hiddenElementWidth;\r\n          }\r\n\r\n          function getHiddenElementWidth(elem) {\r\n            var tempElem=$(elem).clone().appendTo($container).css(\"position\",\"fixed\");\r\n            var hiddenElementWidth = $(tempElem).outerWidth();\r\n            $(tempElem).remove();\r\n            return hiddenElementWidth;\r\n          }\r\n\r\n          function getDropdownLabel() {\r\n            var labelText = 'Dropdown';\r\n            if ($(dropdown).hasClass('active')) {\r\n              labelText = $('>li.active>a', dropdownMenu).html();\r\n            } else if (dropdownLabel.html().length > 0) {\r\n              labelText = dropdownLabel.html();\r\n            }\r\n\r\n            labelText = $.trim(labelText);\r\n\r\n            if (labelText.length > 10) {\r\n              labelText = labelText.substring(0, 10) + '...';\r\n            }\r\n\r\n            return labelText;\r\n          }\r\n\r\n          function renderDropdownLabel() {\r\n            $('>a', dropdown).html(getDropdownLabel() + ' ' + dropdownCaret.prop('outerHTML'));\r\n          }\r\n\r\n          function manageActive(elem) {\r\n            //fixes a bug where Bootstrap can't remove the 'active' class on elements after they've been hidden inside the dropdown\r\n            $('a', $(elem)).on('show.bs.tab', function (e) {\r\n              $(e.relatedTarget).parent().removeClass('active');\r\n            })\r\n            $('a', $(elem)).on('shown.bs.tab', function (e) {\r\n              renderDropdownLabel();\r\n            })\r\n\r\n          }\r\n\r\n          function checkDropdownSelection() {\r\n            if ($($dropdownTabs()).filter('.active').length > 0) {\r\n              $(dropdown).addClass('active');\r\n            } else {\r\n              $(dropdown).removeClass('active');\r\n            }\r\n\r\n            renderDropdownLabel();\r\n          }\r\n\r\n\r\n          var visibleTabsWidth = function () {\r\n            var visibleTabsWidth = 0;\r\n            $($visibleTabs()).each(function( index ) {\r\n              visibleTabsWidth += parseInt($(this).outerWidth(), 10);\r\n            });\r\n            visibleTabsWidth = visibleTabsWidth + parseInt($(dropdown).outerWidth(), 10);\r\n            return visibleTabsWidth;\r\n          }\r\n\r\n          var availableSpace = function () {\r\n            return $container.outerWidth()-visibleTabsWidth();\r\n          }\r\n\r\n          if (availableSpace()<0) {//we will hide tabs here\r\n            var x = availableSpace();\r\n            $($visibleTabs().get().reverse()).each(function( index ){\r\n              if (!($(this).hasClass('always-visible'))){\r\n                  $(this).prependTo(dropdownMenu);\r\n                  x=x+$(this).outerWidth();\r\n              }\r\n              if (x>=0) {return false;}\r\n            });\r\n          }\r\n\r\n          if (availableSpace()>getFirstHiddenElementWidth()) { //and here we bring the tabs out\r\n            var x = availableSpace();\r\n            $($dropdownTabs()).each(function( index ){\r\n              if (getHiddenElementWidth(this) < x && !($(this).hasClass('always-dropdown'))){\r\n                $(this).appendTo($container);\r\n                x = x-$(this).outerWidth();\r\n              } else {return false;}\r\n             });\r\n\r\n            if (!this.options.droptabs.pullDropdownRight && !$(dropdown).is(':last-child')) {\r\n              // If not pulling-right, keep the dropdown at the end of the container.\r\n              $(dropdown).detach().insertAfter($container.find('li:last-child'));\r\n            }\r\n          }\r\n\r\n          if ($dropdownTabs().length <= 0) {\r\n            dropdown.hide();\r\n          } else {\r\n            dropdown.show();\r\n          }\r\n        },\r\n\r\n        add : function() {\r\n          //TODO\r\n        },\r\n\r\n        remove : function(){\r\n          //TODO\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    return swt.TabStrip = TabStrip;\r\n\r\n});\ndefine('skylark-widgets-swt/Toolbar',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-widgets-base/Widget\"\r\n],function(langx,$,Widget){ \r\n\r\n\r\n\r\n  var Toolbar = Widget.inherit({\r\n    pluginName : \"lark.toolbar\",\r\n\r\n    options : {\r\n      toolbarFloat: true,\r\n      toolbarHidden: false,\r\n      toolbarFloatOffset: 0,\r\n      template : '<div class=\"lark-toolbar\"><ul></ul></div>',\r\n      separator : {\r\n        template :  '<li><span class=\"separator\"></span></li>'\r\n      }\r\n    },\r\n\r\n    _init : function() {\r\n      var floatInitialized, initToolbarFloat, toolbarHeight;\r\n      //this.editor = editor;\r\n\r\n      //this.opts = langx.extend({}, this.opts, opts);\r\n      this.opts = this.options;\r\n\r\n\r\n      //if (!langx.isArray(this.opts.toolbar)) {\r\n      //  this.opts.toolbar = ['bold', 'italic', 'underline', 'strikethrough', '|', 'ol', 'ul', 'blockquote', 'code', '|', 'link', 'image', '|', 'indent', 'outdent'];\r\n      //}\r\n\r\n      this.wrapper = $(this._elm);\r\n      this.list = this.wrapper.find('ul');\r\n      this.list.on('click', function(e) {\r\n        return false;\r\n      });\r\n      this.wrapper.on('mousedown', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('.menu-on');\r\n        };\r\n      })(this));\r\n      $(document).on('mousedown.toolbar', (function(_this) {\r\n        return function(e) {\r\n          return _this.list.find('.menu-on').removeClass('menu-on');\r\n        };\r\n      })(this));\r\n      if (!this.opts.toolbarHidden && this.opts.toolbarFloat) {\r\n        this.wrapper.css('top', this.opts.toolbarFloatOffset);\r\n        toolbarHeight = 0;\r\n        initToolbarFloat = (function(_this) {\r\n          return function() {\r\n            _this.wrapper.css('position', 'static');\r\n            _this.wrapper.width('auto');\r\n            _this.editor.editable.util.reflow(_this.wrapper);\r\n            _this.wrapper.width(_this.wrapper.outerWidth());\r\n            _this.wrapper.css('left', _this.editor.editable.util.os.mobile ? _this.wrapper.position().left : _this.wrapper.offset().left);\r\n            _this.wrapper.css('position', '');\r\n            toolbarHeight = _this.wrapper.outerHeight();\r\n            _this.editor.placeholderEl.css('top', toolbarHeight);\r\n            return true;\r\n          };\r\n        })(this);\r\n        floatInitialized = null;\r\n\r\n        /*\r\n        $(window).on('resize.richeditor-' + this.editor.id, function(e) {\r\n          return floatInitialized = initToolbarFloat();\r\n        });\r\n        $(window).on('scroll.richeditor-' + this.editor.id, (function(_this) {\r\n          return function(e) {\r\n            var bottomEdge, scrollTop, topEdge;\r\n            if (!_this.wrapper.is(':visible')) {\r\n              return;\r\n            }\r\n            topEdge = _this.editor.wrapper.offset().top;\r\n            bottomEdge = topEdge + _this.editor.wrapper.outerHeight() - 80;\r\n            scrollTop = $(document).scrollTop() + _this.opts.toolbarFloatOffset;\r\n            if (scrollTop <= topEdge || scrollTop >= bottomEdge) {\r\n              _this.editor.wrapper.removeClass('toolbar-floating').css('padding-top', '');\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', _this.opts.toolbarFloatOffset);\r\n              }\r\n            } else {\r\n              floatInitialized || (floatInitialized = initToolbarFloat());\r\n              _this.editor.wrapper.addClass('toolbar-floating').css('padding-top', toolbarHeight);\r\n              if (_this.editor.editable.util.os.mobile) {\r\n                return _this.wrapper.css('top', scrollTop - topEdge + _this.opts.toolbarFloatOffset);\r\n              }\r\n            }\r\n          };\r\n        })(this));\r\n        */\r\n      }\r\n\r\n      /*\r\n      this.editor.on('destroy', (function(_this) {\r\n        return function() {\r\n          return _this.buttons.length = 0;\r\n        };\r\n      })(this));\r\n      */\r\n\r\n      \r\n    },\r\n\r\n    addToolItem : function(itemWidget) {\r\n      $(itemWidget._elm).appendTo(this.list);\r\n      return this;\r\n    },\r\n\r\n    addSeparator : function() {\r\n      $(this.options.separator.template).appendTo(this.list);\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return Toolbar;\r\n\r\n});\ndefine('skylark-widgets-swt/main',[\r\n    \"./swt\",\r\n    \"./Widget\",\r\n    \"./Accordion\",\r\n    \"./Button\",\r\n    \"./Carousel\",\r\n    \"./CheckBox\",\r\n    \"./ComboBox\",\r\n    \"./TextBox\",\r\n    \"./Listing\",\r\n    \"./Pagination\",\r\n    \"./Progress\",\r\n    \"./Radio\",\r\n    \"./SearchBox\",\r\n    \"./SelectList\",\r\n    \"./Tabular\",\r\n    \"./TabStrip\",\r\n    \"./TextBox\",\r\n    \"./Toolbar\"\r\n], function(swt) {\r\n    return swt;\r\n});\ndefine('skylark-widgets-swt', ['skylark-widgets-swt/main'], function (main) { return main; });\n\n"]}
{"version":3,"sources":["Tree.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","Node","Tree","methods","row","tree","settings","parentId","this","id","data","nodeIdAttr","parentIdAttr","treeCell","children","columnElType","column","expander","expanderTemplate","indenter","indenterTemplate","cell","cellTemplate","initialized","prepend","wrapInner","prototype","addChild","child","push","ancestors","node","parentNode","collapse","collapsed","removeClass","addClass","_hideChildren","attr","stringExpand","onNodeCollapse","apply","hasClass","expand","expanded","onNodeExpand","is","_showChildren","stringCollapse","hide","isBranchNode","length","branchAttr","updateBranchLeafClass","level","removeChild","i","inArray","splice","render","handler","target","expandable","e","parents","treetable","toggle","preventDefault","html","clickableNodeNames","off","on","keyCode","style","paddingLeft","indent","reveal","setParent","show","_initialize","_i","_len","_ref","_results","initialState","onNodeInitialized","table","nodes","roots","collapseAll","expandAll","findLastNode","loadRows","rows","move","destination","nodeParent","_moveRows","removeNode","unloadBranch","remove","sortBranch","sortFun","sort","_sortChildRows","slice","insertAfter","init","options","force","extend","onInitialized","each","el","undefined","destroy","removeData","collapseNode","Error","expandNode","loadBranch","append","lastNode","filter","nodeId","destinationId","columnOrFunction","isNumeric","a","b","extractValue","valA","valB","val","find","text","trim","toUpperCase","fn","method","Array","call","arguments","error","window","TreeTable","jQuery"],"mappings":"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","file":"../Tree.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n/*\r\n * jQuery treetable Plugin 3.2.0\r\n * http://ludo.cubicphuse.nl/jquery-treetable\r\n *\r\n * Copyright 2013, Ludo van den Boom\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n */\r\n(function($) {\r\n  \"use strict\";\r\n\r\n  var Node, Tree, methods;\r\n\r\n  Node = (function() {\r\n    function Node(row, tree, settings) {\r\n      var parentId;\r\n\r\n      this.row = row;\r\n      this.tree = tree;\r\n      this.settings = settings;\r\n\r\n      // TODO Ensure id/parentId is always a string (not int)\r\n      this.id = this.row.data(this.settings.nodeIdAttr);\r\n\r\n      // TODO Move this to a setParentId function?\r\n      parentId = this.row.data(this.settings.parentIdAttr);\r\n      if (parentId != null && parentId !== \"\") {\r\n        this.parentId = parentId;\r\n      }\r\n\r\n      this.treeCell = $(this.row.children(this.settings.columnElType)[this.settings.column]);\r\n      this.expander = $(this.settings.expanderTemplate);\r\n      this.indenter = $(this.settings.indenterTemplate);\r\n      this.cell = $(this.settings.cellTemplate);\r\n      this.children = [];\r\n      this.initialized = false;\r\n      this.treeCell.prepend(this.indenter);\r\n      this.treeCell.wrapInner(this.cell);\r\n    }\r\n\r\n    Node.prototype.addChild = function(child) {\r\n      return this.children.push(child);\r\n    };\r\n\r\n    Node.prototype.ancestors = function() {\r\n      var ancestors, node;\r\n      node = this;\r\n      ancestors = [];\r\n      while (node = node.parentNode()) {\r\n        ancestors.push(node);\r\n      }\r\n      return ancestors;\r\n    };\r\n\r\n    Node.prototype.collapse = function() {\r\n      if (this.collapsed()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"expanded\").addClass(\"collapsed\");\r\n\r\n      this._hideChildren();\r\n      this.expander.attr(\"title\", this.settings.stringExpand);\r\n\r\n      if (this.initialized && this.settings.onNodeCollapse != null) {\r\n        this.settings.onNodeCollapse.apply(this);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.collapsed = function() {\r\n      return this.row.hasClass(\"collapsed\");\r\n    };\r\n\r\n    // TODO destroy: remove event handlers, expander, indenter, etc.\r\n\r\n    Node.prototype.expand = function() {\r\n      if (this.expanded()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"collapsed\").addClass(\"expanded\");\r\n\r\n      if (this.initialized && this.settings.onNodeExpand != null) {\r\n        this.settings.onNodeExpand.apply(this);\r\n      }\r\n\r\n      if ($(this.row).is(\":visible\")) {\r\n        this._showChildren();\r\n      }\r\n\r\n      this.expander.attr(\"title\", this.settings.stringCollapse);\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.expanded = function() {\r\n      return this.row.hasClass(\"expanded\");\r\n    };\r\n\r\n    Node.prototype.hide = function() {\r\n      this._hideChildren();\r\n      this.row.hide();\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.isBranchNode = function() {\r\n      if(this.children.length > 0 || this.row.data(this.settings.branchAttr) === true) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n\r\n    Node.prototype.updateBranchLeafClass = function(){\r\n      this.row.removeClass('branch');\r\n      this.row.removeClass('leaf');\r\n      this.row.addClass(this.isBranchNode() ? 'branch' : 'leaf');\r\n    };\r\n\r\n    Node.prototype.level = function() {\r\n      return this.ancestors().length;\r\n    };\r\n\r\n    Node.prototype.parentNode = function() {\r\n      if (this.parentId != null) {\r\n        return this.tree[this.parentId];\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    Node.prototype.removeChild = function(child) {\r\n      var i = $.inArray(child, this.children);\r\n      return this.children.splice(i, 1)\r\n    };\r\n\r\n    Node.prototype.render = function() {\r\n      var handler,\r\n          settings = this.settings,\r\n          target;\r\n\r\n      if (settings.expandable === true && this.isBranchNode()) {\r\n        handler = function(e) {\r\n          $(this).parents(\"table\").treetable(\"node\", $(this).parents(\"tr\").data(settings.nodeIdAttr)).toggle();\r\n          return e.preventDefault();\r\n        };\r\n\r\n        this.indenter.html(this.expander);\r\n        target = settings.clickableNodeNames === true ? this.treeCell : this.expander;\r\n\r\n        target.off(\"click.treetable\").on(\"click.treetable\", handler);\r\n        target.off(\"keydown.treetable\").on(\"keydown.treetable\", function(e) {\r\n          if (e.keyCode == 13) {\r\n            handler.apply(this, [e]);\r\n          }\r\n        });\r\n      }\r\n\r\n      this.indenter[0].style.paddingLeft = \"\" + (this.level() * settings.indent) + \"px\";\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.reveal = function() {\r\n      if (this.parentId != null) {\r\n        this.parentNode().reveal();\r\n      }\r\n      return this.expand();\r\n    };\r\n\r\n    Node.prototype.setParent = function(node) {\r\n      if (this.parentId != null) {\r\n        this.tree[this.parentId].removeChild(this);\r\n      }\r\n      this.parentId = node.id;\r\n      this.row.data(this.settings.parentIdAttr, node.id);\r\n      return node.addChild(this);\r\n    };\r\n\r\n    Node.prototype.show = function() {\r\n      if (!this.initialized) {\r\n        this._initialize();\r\n      }\r\n      this.row.show();\r\n      if (this.expanded()) {\r\n        this._showChildren();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.toggle = function() {\r\n      if (this.expanded()) {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype._hideChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.hide());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Node.prototype._initialize = function() {\r\n      var settings = this.settings;\r\n\r\n      this.render();\r\n\r\n      if (settings.expandable === true && settings.initialState === \"collapsed\") {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n\r\n      if (settings.onNodeInitialized != null) {\r\n        settings.onNodeInitialized.apply(this);\r\n      }\r\n\r\n      return this.initialized = true;\r\n    };\r\n\r\n    Node.prototype._showChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.show());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    return Node;\r\n  })();\r\n\r\n  Tree = (function() {\r\n    function Tree(table, settings) {\r\n      this.table = table;\r\n      this.settings = settings;\r\n      this.tree = {};\r\n\r\n      // Cache the nodes and roots in simple arrays for quick access/iteration\r\n      this.nodes = [];\r\n      this.roots = [];\r\n    }\r\n\r\n    Tree.prototype.collapseAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.collapse());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.expandAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.expand());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.findLastNode = function (node) {\r\n      if (node.children.length > 0) {\r\n        return this.findLastNode(node.children[node.children.length - 1]);\r\n      } else {\r\n        return node;\r\n      }\r\n    };\r\n\r\n    Tree.prototype.loadRows = function(rows) {\r\n      var node, row, i;\r\n\r\n      if (rows != null) {\r\n        for (i = 0; i < rows.length; i++) {\r\n          row = $(rows[i]);\r\n\r\n          if (row.data(this.settings.nodeIdAttr) != null) {\r\n            node = new Node(row, this.tree, this.settings);\r\n            this.nodes.push(node);\r\n            this.tree[node.id] = node;\r\n\r\n            if (node.parentId != null && this.tree[node.parentId]) {\r\n              this.tree[node.parentId].addChild(node);\r\n            } else {\r\n              this.roots.push(node);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        node = this.nodes[i].updateBranchLeafClass();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.move = function(node, destination) {\r\n      // Conditions:\r\n      // 1: +node+ should not be inserted as a child of +node+ itself.\r\n      // 2: +destination+ should not be the same as +node+'s current parent (this\r\n      //    prevents +node+ from being moved to the same location where it already\r\n      //    is).\r\n      // 3: +node+ should not be inserted in a location in a branch if this would\r\n      //    result in +node+ being an ancestor of itself.\r\n      var nodeParent = node.parentNode();\r\n      if (node !== destination && destination.id !== node.parentId && $.inArray(node, destination.ancestors()) === -1) {\r\n        node.setParent(destination);\r\n        this._moveRows(node, destination);\r\n\r\n        // Re-render parentNode if this is its first child node, and therefore\r\n        // doesn't have the expander yet.\r\n        if (node.parentNode().children.length === 1) {\r\n          node.parentNode().render();\r\n        }\r\n      }\r\n\r\n      if(nodeParent){\r\n        nodeParent.updateBranchLeafClass();\r\n      }\r\n      if(node.parentNode()){\r\n        node.parentNode().updateBranchLeafClass();\r\n      }\r\n      node.updateBranchLeafClass();\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.removeNode = function(node) {\r\n      // Recursively remove all descendants of +node+\r\n      this.unloadBranch(node);\r\n\r\n      // Remove node from DOM (<tr>)\r\n      node.row.remove();\r\n\r\n      // Remove node from parent children list\r\n      if (node.parentId != null) {\r\n        node.parentNode().removeChild(node);\r\n      }\r\n\r\n      // Clean up Tree object (so Node objects are GC-ed)\r\n      delete this.tree[node.id];\r\n      this.nodes.splice($.inArray(node, this.nodes), 1);\r\n\r\n      return this;\r\n    }\r\n\r\n    Tree.prototype.render = function() {\r\n      var root, _i, _len, _ref;\r\n      _ref = this.roots;\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        root = _ref[_i];\r\n\r\n        // Naming is confusing (show/render). I do not call render on node from\r\n        // here.\r\n        root.show();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.sortBranch = function(node, sortFun) {\r\n      // First sort internal array of children\r\n      node.children.sort(sortFun);\r\n\r\n      // Next render rows in correct order on page\r\n      this._sortChildRows(node);\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.unloadBranch = function(node) {\r\n      // Use a copy of the children array to not have other functions interfere\r\n      // with this function if they manipulate the children array\r\n      // (eg removeNode).\r\n      var children = node.children.slice(0),\r\n          i;\r\n\r\n      for (i = 0; i < children.length; i++) {\r\n        this.removeNode(children[i]);\r\n      }\r\n\r\n      // Reset node's collection of children\r\n      node.children = [];\r\n\r\n      node.updateBranchLeafClass();\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype._moveRows = function(node, destination) {\r\n      var children = node.children, i;\r\n\r\n      node.row.insertAfter(destination.row);\r\n      node.render();\r\n\r\n      // Loop backwards through children to have them end up on UI in correct\r\n      // order (see #112)\r\n      for (i = children.length - 1; i >= 0; i--) {\r\n        this._moveRows(children[i], node);\r\n      }\r\n    };\r\n\r\n    // Special _moveRows case, move children to itself to force sorting\r\n    Tree.prototype._sortChildRows = function(parentNode) {\r\n      return this._moveRows(parentNode, parentNode);\r\n    };\r\n\r\n    return Tree;\r\n  })();\r\n\r\n  // jQuery Plugin\r\n  methods = {\r\n    init: function(options, force) {\r\n      var settings;\r\n\r\n      settings = $.extend({\r\n        branchAttr: \"ttBranch\",\r\n        clickableNodeNames: false,\r\n        column: 0,\r\n        columnElType: \"td\", // i.e. 'td', 'th' or 'td,th'\r\n        expandable: false,\r\n        expanderTemplate: \"<a href='#'>&nbsp;</a>\",\r\n        indent: 19,\r\n        indenterTemplate: \"<span class='indenter'></span>\",\r\n        cellTemplate: '',\r\n        initialState: \"collapsed\",\r\n        nodeIdAttr: \"ttId\", // maps to data-tt-id\r\n        parentIdAttr: \"ttParentId\", // maps to data-tt-parent-id\r\n        stringExpand: \"Expand\",\r\n        stringCollapse: \"Collapse\",\r\n\r\n        // Events\r\n        onInitialized: null,\r\n        onNodeCollapse: null,\r\n        onNodeExpand: null,\r\n        onNodeInitialized: null\r\n      }, options);\r\n\r\n      return this.each(function() {\r\n        var el = $(this), tree;\r\n\r\n        if (force || el.data(\"treetable\") === undefined) {\r\n          tree = new Tree(this, settings);\r\n          tree.loadRows(this.rows).render();\r\n\r\n          el.addClass(\"treetable\").data(\"treetable\", tree);\r\n\r\n          if (settings.onInitialized != null) {\r\n            settings.onInitialized.apply(tree);\r\n          }\r\n        }\r\n\r\n        return el;\r\n      });\r\n    },\r\n\r\n    destroy: function() {\r\n      return this.each(function() {\r\n        return $(this).removeData(\"treetable\").removeClass(\"treetable\");\r\n      });\r\n    },\r\n\r\n    collapseAll: function() {\r\n      this.data(\"treetable\").collapseAll();\r\n      return this;\r\n    },\r\n\r\n    collapseNode: function(id) {\r\n      var node = this.data(\"treetable\").tree[id];\r\n\r\n      if (node) {\r\n        node.collapse();\r\n      } else {\r\n        throw new Error(\"Unknown node '\" + id + \"'\");\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    expandAll: function() {\r\n      this.data(\"treetable\").expandAll();\r\n      return this;\r\n    },\r\n\r\n    expandNode: function(id) {\r\n      var node = this.data(\"treetable\").tree[id];\r\n\r\n      if (node) {\r\n        if (!node.initialized) {\r\n          node._initialize();\r\n        }\r\n\r\n        node.expand();\r\n      } else {\r\n        throw new Error(\"Unknown node '\" + id + \"'\");\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    loadBranch: function(node, rows) {\r\n      var settings = this.data(\"treetable\").settings,\r\n          tree = this.data(\"treetable\").tree;\r\n\r\n      // TODO Switch to $.parseHTML\r\n      rows = $(rows);\r\n\r\n      if (node == null) { // Inserting new root nodes\r\n        this.append(rows);\r\n      } else {\r\n        var lastNode = this.data(\"treetable\").findLastNode(node);\r\n        rows.insertAfter(lastNode.row);\r\n      }\r\n\r\n      this.data(\"treetable\").loadRows(rows);\r\n\r\n      // Make sure nodes are properly initialized\r\n      rows.filter(\"tr\").each(function() {\r\n        tree[$(this).data(settings.nodeIdAttr)].show();\r\n      });\r\n\r\n      if (node != null) {\r\n        // Re-render parent to ensure expander icon is shown (#79)\r\n        node.render().expand();\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    move: function(nodeId, destinationId) {\r\n      var destination, node;\r\n\r\n      node = this.data(\"treetable\").tree[nodeId];\r\n      destination = this.data(\"treetable\").tree[destinationId];\r\n      this.data(\"treetable\").move(node, destination);\r\n\r\n      return this;\r\n    },\r\n\r\n    node: function(id) {\r\n      return this.data(\"treetable\").tree[id];\r\n    },\r\n\r\n    removeNode: function(id) {\r\n      var node = this.data(\"treetable\").tree[id];\r\n\r\n      if (node) {\r\n        this.data(\"treetable\").removeNode(node);\r\n      } else {\r\n        throw new Error(\"Unknown node '\" + id + \"'\");\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    reveal: function(id) {\r\n      var node = this.data(\"treetable\").tree[id];\r\n\r\n      if (node) {\r\n        node.reveal();\r\n      } else {\r\n        throw new Error(\"Unknown node '\" + id + \"'\");\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    sortBranch: function(node, columnOrFunction) {\r\n      var settings = this.data(\"treetable\").settings,\r\n          prepValue,\r\n          sortFun;\r\n\r\n      columnOrFunction = columnOrFunction || settings.column;\r\n      sortFun = columnOrFunction;\r\n\r\n      if ($.isNumeric(columnOrFunction)) {\r\n        sortFun = function(a, b) {\r\n          var extractValue, valA, valB;\r\n\r\n          extractValue = function(node) {\r\n            var val = node.row.find(\"td:eq(\" + columnOrFunction + \")\").text();\r\n            // Ignore trailing/leading whitespace and use uppercase values for\r\n            // case insensitive ordering\r\n            return $.trim(val).toUpperCase();\r\n          }\r\n\r\n          valA = extractValue(a);\r\n          valB = extractValue(b);\r\n\r\n          if (valA < valB) return -1;\r\n          if (valA > valB) return 1;\r\n          return 0;\r\n        };\r\n      }\r\n\r\n      this.data(\"treetable\").sortBranch(node, sortFun);\r\n      return this;\r\n    },\r\n\r\n    unloadBranch: function(node) {\r\n      this.data(\"treetable\").unloadBranch(node);\r\n      return this;\r\n    }\r\n  };\r\n\r\n  $.fn.treetable = function(method) {\r\n    if (methods[method]) {\r\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n    } else if (typeof method === 'object' || !method) {\r\n      return methods.init.apply(this, arguments);\r\n    } else {\r\n      return $.error(\"Method \" + method + \" does not exist on jQuery.treetable\");\r\n    }\r\n  };\r\n\r\n  // Expose classes to world\r\n  window.TreeTable || (window.TreeTable = {});\r\n  window.TreeTable.Node = Node;\r\n  window.TreeTable.Tree = Tree;\r\n})(jQuery);\r\n\r\n\r\n});"]}
{"version":3,"sources":["widgets.js"],"names":["define","langx","swt","vendors","VendorFactory","Evented","inherit","klassName","vendorName","_types","init","this","add","type","klass","toLowerCase","get","has","create","settings","children","widgetClass","inst","Error","register","vendor","getFactory","splitts","split","factory"],"mappings":";;;;;;;AAAAA,QACI,uBACD,SAASC,GACR,GAAIC,GACAC,KAIAC,EAAgBH,EAAMI,QAAQC,SAC9BC,UAAY,gBAEZC,WAAa,KAEbC,OAAS,KAETC,KAAO,SAASF,GACZG,KAAKH,WAAaA,EAClBG,KAAKF,WAUTG,IAAM,SAASC,EAAMC,GACjBH,KAAKF,OAAOI,EAAKE,eAAiBD,GAUtCE,IAAK,SAASH,GACV,MAAOF,MAAKF,OAAOI,EAAKE,gBAU5BE,IAAK,SAASJ,GACV,QAASF,KAAKF,OAAOI,EAAKE,gBAkB9BG,OAAQ,SAASL,EAAMM,EAASC,GAC5B,GAAIC,GAAYC,CAmBhB,IAfmB,gBAART,IACPM,EAAWA,MACXA,EAASN,KAAOA,IAEhBO,EAAWD,EACXA,EAAWN,EACXA,EAAOM,EAASN,MAIpBA,EAAOA,EAAKE,cACZM,EAAcV,KAAKF,OAAOI,IAIrBQ,EACD,KAAM,IAAIE,OAAM,mCAAqCV,EAOzD,OAFAS,GAAO,GAAID,GAAYF,KAY/B,OAHAjB,GAAMC,EAAa,IAAI,GAAIC,GAAc,QAWrCoB,SAAW,SAASC,GAEhB,GADAA,EAASA,EAAOV,cACZZ,EAAQsB,GACR,KAAM,IAAIF,OAAM,8BAAgCE,EAEpD,OAAOtB,GAAQsB,GAAU,GAAIrB,GAAcqB,IAG/CC,WAAa,SAASD,GAClB,MAAIA,IACAA,EAASA,EAAOV,cACTZ,EAAQsB,IAEZvB,GAIXgB,OAAS,SAASL,EAAMM,EAASC,GAEV,gBAARP,IACPM,EAAWA,MACXA,EAASN,KAAOA,IAEhBO,EAAWD,EACXA,EAAWN,EACXA,EAAOM,EAASN,MAIpBA,EAAOA,EAAKE,aAEZ,IAAIY,GAAUd,EAAKe,MAAM,KACrBH,EAAUE,EAAQ,GAClBE,EAAUlB,KAAKK,IAAIS,EAGvB,OAFAZ,GAAOc,EAAQ,GAERE,EAAQX,OAAOL,EAAKM,EAASC","file":"../widgets.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    var swt,\r\n        vendors = {},\r\n        namespaceInit;\r\n\r\n\r\n    var VendorFactory = langx.Evented.inherit({\r\n        klassName : \"VendorFactory\",\r\n\r\n        vendorName : null,\r\n\r\n        _types : null,\r\n\r\n        init : function(vendorName) {\r\n            this.vendorName = vendorName;\r\n            this._types = {};\r\n        },\r\n\r\n        /**\r\n         * Add a new widget type to the factory.\r\n         *\r\n         * @method register\r\n         * @param {String} type Type name for example \"button\".\r\n         * @param {function} typeClass Class type function.\r\n         */\r\n        add : function(type, klass) {\r\n            this._types[type.toLowerCase()] = klass;\r\n        },\r\n\r\n        /**\r\n         * Returns true/false if the specified type exists or not.\r\n         *\r\n         * @method has\r\n         * @param {String} type Type to look for.\r\n         * @return {Boolean} true/false if the control by name exists.\r\n         */\r\n        get: function(type) {\r\n            return this._types[type.toLowerCase()];\r\n        },\r\n        \r\n        /**\r\n         * Returns true/false if the specified type exists or not.\r\n         *\r\n         * @method has\r\n         * @param {String} type Type to look for.\r\n         * @return {Boolean} true/false if the control by name exists.\r\n         */\r\n        has: function(type) {\r\n            return !!this._types[type.toLowerCase()];\r\n        },\r\n\r\n        /**\r\n         * Creates a new widget instance based on the settings provided. The instance created will be\r\n         * based on the specified type property it can also create whole structures of components out of\r\n         * the specified JSON object.\r\n         *\r\n         * @example\r\n         * .create({\r\n         *     type: 'button',\r\n         *     text: 'Hello world!'\r\n         * });\r\n         *\r\n         * @method create\r\n         * @param {Object/String} settings Name/Value object with items used to create the type.\r\n         * @return {Widget} Widget instance based on the specified type.\r\n         */\r\n        create: function(type, settings,children) {\r\n            var widgetClass,inst;\r\n\r\n\r\n            // If string is specified then use it as the type\r\n            if (typeof type == 'string') {\r\n                settings = settings || {};\r\n                settings.type = type;\r\n            } else {\r\n                children = settings;\r\n                settings = type;\r\n                type = settings.type;\r\n            }\r\n\r\n            // Find widget type\r\n            type = type.toLowerCase();\r\n            widgetClass = this._types[type];\r\n\r\n            // #if debug\r\n\r\n            if (!widgetClass) {\r\n                throw new Error(\"Could not find control by type: \" + type);\r\n            }\r\n\r\n            // #endif\r\n\r\n            inst = new widgetClass(settings);\r\n\r\n            return inst;\r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n    swt = vendors[\"swt\"] = new VendorFactory(\"swt\");\r\n\r\n\r\n    return {\r\n        /**\r\n         * Register a new widget factory by the vendor.\r\n         *\r\n         * @method register\r\n         * @param {String} vendor Vendor name for example \"jquey\",\"react\".\r\n         * @param {function} typeClass Class type function.\r\n         */\r\n        register : function(vendor) {\r\n            vendor = vendor.toLowerCase();\r\n            if (vendors[vendor]) {\r\n                throw new Error(\"The vendor is been existed:\" + vendor);\r\n            }\r\n            return vendors[vendor] = new VendorFactory(vendor);\r\n        },\r\n\r\n        getFactory : function(vendor) {\r\n            if (vendor) {\r\n                vendor = vendor.toLowerCase();\r\n                return vendors[vendor];\r\n            }\r\n            return swt;\r\n        },\r\n\r\n\r\n        create : function(type, settings,children) {\r\n            // If string is specified then use it as the type\r\n            if (typeof type == 'string') {\r\n                settings = settings || {};\r\n                settings.type = type;\r\n            } else {\r\n                children = settings;\r\n                settings = type;\r\n                type = settings.type;\r\n            }\r\n\r\n            // Find widget type\r\n            type = type.toLowerCase();\r\n\r\n            var splitts = type.split(\"@\"),\r\n                vendor =  splitts[1],\r\n                factory = this.get(vendor);       \r\n            type = splitts[0];\r\n\r\n            return factory.create(type,settings,children);\r\n\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n});\r\n"]}
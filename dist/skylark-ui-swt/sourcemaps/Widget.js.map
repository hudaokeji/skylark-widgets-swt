{"version":3,"sources":["Widget.js"],"names":["define","skylark","langx","browser","datax","eventer","noder","geom","elmx","$","plugins","Map","ui","Widget","Plugin","inherit","klassName","_elmx","_construct","elm","options","isHtmlNode","this","_parse","overrided","_elm","_create","_velm","state","_init","self","on","e","args","_refresh","data","_post","updates","mapping","events","attributs","properties","styles","html","getEnclosing","selector","getEnclosed","children","ArrayList","show","hide","focus","ex","blur","enable","set","disable","aria","name","value","getEl","ariaTarget","_aria","get","setAttribute","attr","velm","ret","css","prop","detach","remove","meta","ctor","apply","arguments","prototype","undefined","pluginName","register"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/datax\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/elmx\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-utils-dom/plugins\",\r\n  \"skylark-utils-collection/Map\",\r\n  \"./ui\"\r\n],function(skylark,langx,browser,datax,eventer,noder,geom,elmx,$,plugins,Map,ui){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n\tvar Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _elmx : elmx,\r\n\r\n    _construct : function(elm,options) {\r\n        if (langx.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._elm = this._create();\r\n        }\r\n        this._velm = elmx(this._elm);\r\n        this.state = this.options.state || new Map();\r\n        this._init();\r\n     },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      options = options || {};\r\n      // TODO : parse options from element\r\n      return options;\r\n    },\r\n\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n     \r\n    },\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      //TODO:\r\n      var self = this;\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * Post widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _post : function() {\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    html: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n\treturn ui.Widget = Widget;\r\n});\r\n"]}
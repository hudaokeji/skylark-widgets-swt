{"version":3,"sources":["Progressbar.js"],"names":["define","langx","browser","eventer","noder","geom","$","ui","Widget","Progressbar","inherit","klassName","pluginName","options","transition_delay","refresh_speed","display_text","use_percentage","percent_format","percent","amount_format","amount_part","amount_max","amount_min","update","noop","done","fail","_construt","element","this","$element","extend","defaults","transition","$this","$parent","parent","$back_text","$front_text","data_transitiongoal","parseInt","attr","aria_valuemin","aria_valuemax","is_vertical","hasClass","isNaN","percentage","Math","round","addClass","prependTo","parent_size","css","height","line-height","window","resize","width","setTimeout","current_percentage","current_value","this_size","text","progress","setInterval","clearInterval"],"mappings":"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","file":"../Progressbar.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./ui\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,ui,Widget){\r\n\r\n    'use strict';\r\n\r\n    /* This module used the following source code\r\n     * !\r\n\t * bootstrap-progressbar v0.9.0 by @minddust\r\n\t * Copyright (c) 2012-2015 Stephan Gro√ü\r\n\t *\r\n\t * http://www.minddust.com/project/bootstrap-progressbar/\r\n\t *\r\n\t * Licensed under the MIT license:\r\n\t * http://www.opensource.org/licenses/MIT\r\n     */    \r\n\r\n     var Progressbar = ui.Progressbar = Widget.inherit({\r\n     \tklassName : \"Progressbar\",\r\n\r\n     \tpluginName : \"lark.progressbar\",\r\n\r\n\t    options : {\r\n\t        transition_delay: 300,\r\n\t        refresh_speed: 50,\r\n\t        display_text: 'none',\r\n\t        use_percentage: true,\r\n\t        percent_format: function(percent) { return percent + '%'; },\r\n\t        amount_format: function(amount_part, amount_max, amount_min) { return amount_part + ' / ' + amount_max; },\r\n\t        update: $.noop,\r\n\t        done: $.noop,\r\n\t        fail: $.noop\r\n\t    },\r\n\r\n     \t_construt : function(element, options) {\r\n\t        this.$element = $(element);\r\n\t        this.options = $.extend({}, Progressbar.defaults, options);\r\n     \t},\r\n\r\n\r\n\t    transition : function() {\r\n\t        var $this = this.$element;\r\n\t        var $parent = $this.parent();\r\n\t        var $back_text = this.$back_text;\r\n\t        var $front_text = this.$front_text;\r\n\t        var options = this.options;\r\n\t        var data_transitiongoal = parseInt($this.attr('data-transitiongoal'));\r\n\t        var aria_valuemin = parseInt($this.attr('aria-valuemin')) || 0;\r\n\t        var aria_valuemax = parseInt($this.attr('aria-valuemax')) || 100;\r\n\t        var is_vertical = $parent.hasClass('vertical');\r\n\t        var update = options.update && typeof options.update === 'function' ? options.update : Progressbar.defaults.update;\r\n\t        var done = options.done && typeof options.done === 'function' ? options.done : Progressbar.defaults.done;\r\n\t        var fail = options.fail && typeof options.fail === 'function' ? options.fail : Progressbar.defaults.fail;\r\n\r\n\t        if (isNaN(data_transitiongoal)) {\r\n\t            fail('data-transitiongoal not set');\r\n\t            return;\r\n\t        }\r\n\t        var percentage = Math.round(100 * (data_transitiongoal - aria_valuemin) / (aria_valuemax - aria_valuemin));\r\n\r\n\t        if (options.display_text === 'center' && !$back_text && !$front_text) {\r\n\t            this.$back_text = $back_text = $('<span>').addClass('progressbar-back-text').prependTo($parent);\r\n\t            this.$front_text = $front_text = $('<span>').addClass('progressbar-front-text').prependTo($this);\r\n\r\n\t            var parent_size;\r\n\r\n\t            if (is_vertical) {\r\n\t                parent_size = $parent.css('height');\r\n\t                $back_text.css({height: parent_size, 'line-height': parent_size});\r\n\t                $front_text.css({height: parent_size, 'line-height': parent_size});\r\n\r\n\t                $(window).resize(function() {\r\n\t                    parent_size = $parent.css('height');\r\n\t                    $back_text.css({height: parent_size, 'line-height': parent_size});\r\n\t                    $front_text.css({height: parent_size, 'line-height': parent_size});\r\n\t                }); // normal resizing would brick the structure because width is in px\r\n\t            }\r\n\t            else {\r\n\t                parent_size = $parent.css('width');\r\n\t                $front_text.css({width: parent_size});\r\n\r\n\t                $(window).resize(function() {\r\n\t                    parent_size = $parent.css('width');\r\n\t                    $front_text.css({width: parent_size});\r\n\t                }); // normal resizing would brick the structure because width is in px\r\n\t            }\r\n\t        }\r\n\r\n\t        setTimeout(function() {\r\n\t            var current_percentage;\r\n\t            var current_value;\r\n\t            var this_size;\r\n\t            var parent_size;\r\n\t            var text;\r\n\r\n\t            if (is_vertical) {\r\n\t                $this.css('height', percentage + '%');\r\n\t            }\r\n\t            else {\r\n\t                $this.css('width', percentage + '%');\r\n\t            }\r\n\r\n\t            var progress = setInterval(function() {\r\n\t                if (is_vertical) {\r\n\t                    this_size = $this.height();\r\n\t                    parent_size = $parent.height();\r\n\t                }\r\n\t                else {\r\n\t                    this_size = $this.width();\r\n\t                    parent_size = $parent.width();\r\n\t                }\r\n\r\n\t                current_percentage = Math.round(100 * this_size / parent_size);\r\n\t                current_value = Math.round(aria_valuemin + this_size / parent_size * (aria_valuemax - aria_valuemin));\r\n\r\n\t                if (current_percentage >= percentage) {\r\n\t                    current_percentage = percentage;\r\n\t                    current_value = data_transitiongoal;\r\n\t                    done($this);\r\n\t                    clearInterval(progress);\r\n\t                }\r\n\r\n\t                if (options.display_text !== 'none') {\r\n\t                    text = options.use_percentage ? options.percent_format(current_percentage) : options.amount_format(current_value, aria_valuemax, aria_valuemin);\r\n\r\n\t                    if (options.display_text === 'fill') {\r\n\t                        $this.text(text);\r\n\t                    }\r\n\t                    else if (options.display_text === 'center') {\r\n\t                        $back_text.text(text);\r\n\t                        $front_text.text(text);\r\n\t                    }\r\n\t                }\r\n\t                $this.attr('aria-valuenow', current_value);\r\n\r\n\t                update(current_percentage, $this);\r\n\t            }, options.refresh_speed);\r\n\t        }, options.transition_delay);\r\n\t    }\r\n\r\n     });\r\n\r\n\treturn Progressbar;\r\n\t\r\n });"]}
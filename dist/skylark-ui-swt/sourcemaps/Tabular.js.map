{"version":3,"sources":["Tabular.js"],"names":["define","langx","browser","eventer","noder","geom","$","swt","Widget","inherit","klassName","pluginName","options","buttonClasses","append","removeLast","insert","remove","moveUp","moveDown","rowDrag","sectionClasses","caption","header","body","subPanel","footer","hideButtons","_defaultInitOptions","captionTooltip","initRows","maxRowsAllowed","initData","columns","i18n","idPrefix","rowDragging","hideRowNumColumn","rowButtonsInFront","rowCountName","customGridButtons","customRowButtons","customFooterButtons","useSubPanel","maintainScroll","maxBodyHeight","autoColumnWidth","_defaultCallbackContainer","nameFormatter","dataLoaded","rowDataLoaded","afterRowAppended","afterRowInserted","afterRowSwapped","beforeRowRemove","afterRowRemoved","afterRowDragged","subPanelBuilder","subPanelGetter","maxNumRowsReached","_defaultColumnOptions","type","name","value","display","displayCss","displayTooltip","headerSpan","cellCss","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","ctrlOptions","uiOption","uiTooltip","resizable","invisible","emptyCriteria","customBuilder","customGetter","customSetter","onClick","onChange","_systemMessages","noColumnInfo","elemNotTable","notInit","getValueMultiGrid","notSupportMethod","_defaultTextResources","rowEmpty","_defaultButtonClasses","_defaultSectionClasses","_defaultHideButtons","_methods","init","this","length","isArray","alert","tbWrap","tbHead","tbBody","tbFoot","tbColGp","tbRow","tbCell","tbWhole","isEmpty","tagName","tbHeadCellRowNum","tbHeadCellRowButton","settings","extend","_uniqueIndex","_rowOrder","_isDataLoaded","_visibleCount","_finalColSpan","_hideLastColumn","_wrapperId","_calculateWidth","isPlainObject","_i18n","_buttonClasses","_sectionClasses","id","Date","getTime","document","createElement","className","attr","addClass","insertAfter","empty","appendTo","prependTo","wrap","css","appendChild","pendingSkipCol","z","columnOpt","tooltip","isFunction","text","jQuery","ui","handles","insertBefore","firstChild","childnodes","colSpan","button","createGridButton","title","click","evt","insertRow","preventDefault","removeRow","y","buttonCfg","uiButton","atTheFront","prepend","makeCustomBottomButton","style","sortable","axis","containment","handle","helper","e","tr","org","children","clone","each","index","width","eq","helperSelect","orgSelect","find","update","event","uniqueIndex","item","substring","lastIndexOf","tbRowIndex","rowIndex","isMoveUp","data","startIndex","splice","sortSequence","saveSetting","gridRowDragged","originalPosition","top","position","loadData","appendGrid","showEmptyMessage","calculateColumnWidth","isReady","checkGridAndGetSettings","isDataLoaded","load","records","emptyGrid","appendRow","numOfRowOrRowArray","callerUniqueIndex","isNumeric","insertResult","insertUniqueIndex","addedRows","focus","target","moveUpRow","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","getElementsByTagName","findRowIndex","getElementById","removeChild","html","removeClass","blur","moveDownRow","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","push","getCtrlValue","setCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","grid","noMsg","ctrl","parentIndex","hidden","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","numOfRow","height","scrollParent","scrollTop","childNodes","rowSpan","ctrlName","ctrlId","lastGroupName","lastGroupElem","x","group","label","option","val","Option","arrayOpt","split","eqIndex","indexOf","selectmenu","textAlign","search","err","datepicker","spinner","autocomplete","prop","caller","callback","change","tabindex","rowUniqueIndex","makeCustomRowButton","scroll","scrollHeight","offsetHeight","newHeight","exButton","btnClass","btnCss","btnAttr","rowData","force","pop","lastChild","skipWidthCalculation","$emptyCell","isInit","r","c","join","suffix","adtData","newData","key","columnName","checked","element","param","uiIcon","genButton","nodeType","icon","showLabel","currentValue","defaultValue","$tbWhole","$scroller","tbHeadRow","tbBodyRow","marginThreshold","fn","modal","colLimit","Math","min","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","params","apply","Array","prototype","call","arguments"],"mappings":"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","file":"../Tabular.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./swt\",\r\n  \"./Widget\"\r\n],function(langx,browser,eventer,noder,geom,$,swt,Widget){\r\n\r\n    /*\r\n    * This module used the following source code\r\n    * !\r\n    * jQuery appendGrid v1.7.1\r\n    * https://appendgrid.apphb.com/\r\n    *\r\n    * Copyright 2017 Albert L.\r\n    * Dual licensed under the LGPL (http://www.gnu.org/licenses/lgpl.html)\r\n    * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\r\n    */\r\n\r\n    var Tabular = Widget.inherit({\r\n        klassName : \"Tabular\",\r\n\r\n        pluginName : \"lark.tabular\",\r\n\r\n        options : {\r\n            buttonClasses : { \r\n                append: null, \r\n                removeLast: null, \r\n                insert: null, \r\n                remove: null, \r\n                moveUp: null, \r\n                moveDown: null, \r\n                rowDrag: null \r\n            },\r\n            sectionClasses : { \r\n                caption: null, \r\n                header: null, \r\n                body: null, \r\n                subPanel: null, \r\n                footer: null \r\n            },\r\n            hideButtons : { \r\n                append: false, \r\n                removeLast: false, \r\n                insert: false, \r\n                remove: false, \r\n                moveUp: false, \r\n                moveDown: false \r\n            }\r\n\r\n        },\r\n\r\n\r\n    });\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n    var _methods = {\r\n        init: function (options) {\r\n            var target = this;\r\n            if (target.length > 0) {\r\n                // Check mandatory paramters included\r\n                if (!$.isArray(options.columns) || options.columns.length == 0) {\r\n                    alert(_systemMessages.noColumnInfo);\r\n                    return target;\r\n                }\r\n                // Check target element is table or not\r\n                var tbWhole = target[0], tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n                if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                    alert(_systemMessages.elemNotTable);\r\n                    return target;\r\n                }\r\n                // Generate settings\r\n                var settings = $.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n                // Add internal settings\r\n                $.extend(settings, {\r\n                    // The UniqueIndex accumulate counter\r\n                    _uniqueIndex: 0,\r\n                    // The row order array\r\n                    _rowOrder: [],\r\n                    // Indicate data is loaded or not\r\n                    _isDataLoaded: false,\r\n                    // Visible column count for internal calculation\r\n                    _visibleCount: 0,\r\n                    // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                    _finalColSpan: 0,\r\n                    // Indicate to hide last column or not\r\n                    _hideLastColumn: false,\r\n                    // The element ID of the `appendGrid` wrapper\r\n                    _wrapperId: null,\r\n                    // \r\n                    _calculateWidth: true\r\n                });\r\n                // Labels or messages used in grid\r\n                if ($.isPlainObject(options.i18n))\r\n                    settings._i18n = $.extend({}, _defaultTextResources, options.i18n);\r\n                else\r\n                    settings._i18n = $.extend({}, _defaultTextResources);\r\n                // The extra class names for buttons\r\n                if ($.isPlainObject(options.buttonClasses))\r\n                    settings._buttonClasses = $.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n                else\r\n                    settings._buttonClasses = $.extend({}, _defaultButtonClasses);\r\n                // The extra class names for sections\r\n                if ($.isPlainObject(options.sectionClasses))\r\n                    settings._sectionClasses = $.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n                else\r\n                    settings._sectionClasses = $.extend({}, _defaultSectionClasses);\r\n                // Make sure the `hideButtons` setting defined\r\n                if ($.isPlainObject(options.hideButtons))\r\n                    settings.hideButtons = $.extend({}, _defaultHideButtons, options.hideButtons);\r\n                else\r\n                    settings.hideButtons = $.extend({}, _defaultHideButtons);\r\n                // Check `idPrefix` is defined\r\n                if (isEmpty(settings.idPrefix)) {\r\n                    // Check table ID defined\r\n                    if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                        // Generate an ID using current time\r\n                        settings.idPrefix = 'ag' + new Date().getTime();\r\n                    }\r\n                    else {\r\n                        settings.idPrefix = tbWhole.id;\r\n                    }\r\n                }\r\n                // Check custom grid button parameters\r\n                if (!$.isPlainObject(settings.customGridButtons)) {\r\n                    settings.customGridButtons = {};\r\n                }\r\n                // Check rowDragging and useSubPanel option\r\n                if (settings.useSubPanel && settings.rowDragging) {\r\n                    settings.rowDragging = false;\r\n                }\r\n                // Create thead and tbody\r\n                tbHead = document.createElement('thead');\r\n                tbHead.className = 'ui-widget-header';\r\n                tbBody = document.createElement('tbody');\r\n                tbBody.className = 'ui-widget-content';\r\n                tbFoot = document.createElement('tfoot');\r\n                tbFoot.className = 'ui-widget-header';\r\n                tbColGp = document.createElement('colgroup');\r\n                // Prepare the table element\r\n                settings._wrapperId = settings.idPrefix + '-wrapper';\r\n                tbWrap = document.createElement('div');\r\n                $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n                $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n                // Check if content scrolling is enabled\r\n                if (settings.maxBodyHeight > 0) {\r\n                    // Seperate the thead and tfoot from source table\r\n                    $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                    $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                    $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n                } else {\r\n                    // Add thead, tbody and tfoot to the same table\r\n                    $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n                }\r\n                // Handle header row\r\n                var tbHeadCellRowNum, tbHeadCellRowButton;\r\n                tbHead.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.header) {\r\n                    tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n                } else {\r\n                    tbRow.className = 'columnHead';\r\n                }\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                    tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Prepare column information and add column header\r\n                var pendingSkipCol = 0;\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    // Assign default setting\r\n                    var columnOpt = $.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                    settings.columns[z] = columnOpt;\r\n                    // Skip hidden\r\n                    if (settings.columns[z].type != 'hidden') {\r\n                        // Check column is invisible\r\n                        if (!settings.columns[z].invisible) {\r\n                            settings._visibleCount++;\r\n                        }\r\n                        // Check skip header colSpan\r\n                        if (pendingSkipCol == 0) {\r\n                            var className = 'ui-widget-header';\r\n                            if (settings.columns[z].invisible) className += ' invisible';\r\n                            if (settings.columns[z].resizable) className += ' resizable';\r\n                            tbRow.appendChild(tbCell = document.createElement('td'));\r\n                            tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                            tbCell.className = className;\r\n                            if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                            if (settings.columns[z].headerSpan > 1) {\r\n                                $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                                pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                            }\r\n                            // Add tooltip\r\n                            if ($.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                                $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                            }\r\n                            else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                                $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                            }\r\n                            // Check to set display text or generate by function\r\n                            if ($.isFunction(settings.columns[z].display)) {\r\n                                settings.columns[z].display(tbCell);\r\n                            } else if (!isEmpty(settings.columns[z].display)) {\r\n                                $(tbCell).text(settings.columns[z].display);\r\n                            }\r\n                            // Add column group for scrolling\r\n                            tbColGp.appendChild(document.createElement('col'));\r\n                        } else {\r\n                            pendingSkipCol--;\r\n                        }\r\n                    }\r\n                }\r\n                // Enable columns resizable\r\n                if (!isEmpty(jQuery.ui.resizable)) {\r\n                    $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n                }\r\n                // Check to hide last column or not\r\n                if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                        && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                        && (!$.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                    settings._hideLastColumn = true;\r\n                }\r\n                // Calculate the `_finalColSpan` value\r\n                settings._finalColSpan = settings._visibleCount;\r\n                if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n                if (!settings._hideLastColumn) settings._finalColSpan++;\r\n                // Generate last column header if needed\r\n                if (!settings._hideLastColumn) {\r\n                    if (settings.rowButtonsInFront) {\r\n                        if (settings.hideRowNumColumn) {\r\n                            // Insert a cell at the front\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                        } else {\r\n                            // Span the first cell that across row number and row button cells\r\n                            // tbHeadCellRowNum.colSpan = 2;\r\n                            // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                            // Insert a cell as the second column\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                        }\r\n                    } else {\r\n                        tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                    }\r\n                    tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                    tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Add caption when defined\r\n                if (settings.caption) {\r\n                    tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                    if (settings._sectionClasses.caption) {\r\n                        tbRow.className = settings._sectionClasses.caption;\r\n                    }\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_caption_td';\r\n                    tbCell.className = 'ui-state-active caption';\r\n                    tbCell.colSpan = settings._finalColSpan;\r\n                    // Add tooltip\r\n                    if ($.isPlainObject(settings.captionTooltip)) {\r\n                        $(tbCell).tooltip(settings.captionTooltip);\r\n                    } else if (!isEmpty(settings.captionTooltip)) {\r\n                        $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                    }\r\n                    // Check to set display text or generate by function\r\n                    if ($.isFunction(settings.caption)) {\r\n                        settings.caption(tbCell);\r\n                    } else {\r\n                        $(tbCell).text(settings.caption);\r\n                    }\r\n                }\r\n                // Handle footer row\r\n                tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.footer) {\r\n                    tbRow.className = settings._sectionClasses.footer;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_footer_td';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                $('<input/>').attr({\r\n                    type: 'hidden',\r\n                    id: settings.idPrefix + '_rowOrder',\r\n                    name: settings.idPrefix + '_rowOrder'\r\n                }).appendTo(tbCell);\r\n                // Make row invisible if all buttons are hidden\r\n                if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                        && (!$.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                    tbRow.style.display = 'none';\r\n                } else {\r\n                    if (!settings.hideButtons.append) {\r\n                        var button = createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.append }).addClass('append')\r\n                        .click(function (evt) {\r\n                            insertRow(tbWhole, 1, null, null);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                    }\r\n                    if (!settings.hideButtons.removeLast) {\r\n                        var button = createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    removeRow(tbWhole, null, this.value, false);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                    }\r\n                    if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Enable dragging\r\n                if (settings.rowDragging) {\r\n                    $(tbBody).sortable({\r\n                        axis: 'y',\r\n                        containment: tbWhole,\r\n                        handle: '.rowDrag',\r\n                        helper: function (e, tr) {\r\n                            var org = tr.children();\r\n                            var helper = tr.clone();\r\n                            // Fix the cell width of cloned table cell\r\n                            helper.children().each(function (index) {\r\n                                $(this).width(org.eq(index).width());\r\n                                // Set the value of drop down list when drag (Issue #18)\r\n                                var helperSelect = $('select', this);\r\n                                if (helperSelect.length > 0) {\r\n                                    for (var y = 0; y < helperSelect.length; y++) {\r\n                                        var orgSelect = org.eq(index).find('select');\r\n                                        if (orgSelect.length > y) {\r\n                                            helperSelect[y].value = orgSelect[y].value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                            return helper;\r\n                        },\r\n                        update: function (event, ui) {\r\n                            var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                            var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                            gridRowDragged(tbWhole, ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                        }\r\n                    });\r\n                }\r\n                // Save options\r\n                $(tbWhole).data('appendGrid', settings);\r\n                if ($.isArray(options.initData)) {\r\n                    // Load data if initData is array\r\n                    loadData(tbWhole, options.initData, true);\r\n                } else {\r\n                    // Add empty rows\r\n                    $(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                }\r\n                // Show no rows in grid\r\n                if (settings._rowOrder.length == 0) {\r\n                    showEmptyMessage(tbWrap, settings, true);\r\n                }\r\n                // Calculate column width\r\n                if (settings.maxBodyHeight > 0) {\r\n                    if (settings.autoColumnWidth) {\r\n                        calculateColumnWidth(tbWrap);\r\n                    } else {\r\n                        $('table.foot', tbWrap).width($(tbWhole).width());\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = checkGridAndGetSettings(this, true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n        load: function (records) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    loadData(target[0], records, false);\r\n                } else {\r\n                    emptyGrid(target[0]);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.appendGrid('insertRow', numOfRowOrRowArray);\r\n        },\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                if (($.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || ($.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if ($.isNumeric(rowIndex) || $.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        sortSequence(tbWhole, insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                removeRow(this[0], rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                emptyGrid(this[0]);\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if ($.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if ($.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if ($.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if ($.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && $.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && $.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                if ($.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        $.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        removeRow(tbWhole, null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    function checkGridAndGetSettings(grid, noMsg) {\r\n        // Check the jQuery grid object is initialized and return its settings\r\n        var settings = null;\r\n        if (grid.length == 1) {\r\n            settings = grid.data('appendGrid');\r\n            if (!settings && !noMsg) {\r\n                alert(_systemMessages.notInit);\r\n            }\r\n        } else if (!noMsg) {\r\n            alert(_systemMessages.getValueMultiGrid);\r\n        }\r\n        return settings;\r\n    }\r\n    function insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n        // Define variables\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n        var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n        var oldHeight = 0, oldScroll = 0;\r\n        if (settings.maxBodyHeight > 0) {\r\n            tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n        }\r\n        // Check number of row to be inserted\r\n        var numOfRow = numOfRowOrRowArray, loadData = false;\r\n        if ($.isArray(numOfRowOrRowArray)) {\r\n            numOfRow = numOfRowOrRowArray.length;\r\n            loadData = true;\r\n        }\r\n        // Check parent row\r\n        if ($.isNumeric(callerUniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                    rowIndex = z;\r\n                    if (z != 0) parentIndex = z - 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if ($.isNumeric(rowIndex)) {\r\n            if (rowIndex >= settings._rowOrder.length) {\r\n                rowIndex = null;\r\n            } else {\r\n                parentIndex = rowIndex - 1;\r\n            }\r\n        }\r\n        else if (settings._rowOrder.length != 0) {\r\n            rowIndex = null;\r\n            parentIndex = settings._rowOrder.length - 1;\r\n        }\r\n        // Store old grid height\r\n        if (settings.maintainScroll && !$.isNumeric(rowIndex)) {\r\n            oldHeight = $(tbWhole).height();\r\n            oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n        }\r\n        // Remove empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            $('tr.empty', tbWhole).remove();\r\n            calColWidth = true;\r\n        }\r\n        // Add total number of row\r\n        for (var z = 0; z < numOfRow; z++) {\r\n            // Check maximum number of rows\r\n            if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                reachMaxRow = true;\r\n                break;\r\n            }\r\n            // Update variables\r\n            settings._uniqueIndex++;\r\n            uniqueIndex = settings._uniqueIndex;\r\n            hidden.length = 0;\r\n            // Check row insert index\r\n            if ($.isNumeric(rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                }\r\n                addedRows.push(rowIndex);\r\n            }\r\n            else {\r\n                settings._rowOrder.push(uniqueIndex);\r\n                tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings.useSubPanel) {\r\n                    tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                }\r\n                addedRows.push(settings._rowOrder.length - 1);\r\n            }\r\n            tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n            if (settings._sectionClasses.body) {\r\n                tbRow.className = settings._sectionClasses.body;\r\n            }\r\n            $(tbRow).data('appendGrid', uniqueIndex);\r\n            // Config on the sub panel row\r\n            if (tbSubRow != null) {\r\n                tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                if (settings._sectionClasses.subPanel) {\r\n                    tbSubRow.className = settings._sectionClasses.subPanel;\r\n                }\r\n            }\r\n            // Add row number\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n            }\r\n            // Process on each columns\r\n            for (var y = 0; y < settings.columns.length; y++) {\r\n                // Skip hidden\r\n                if (settings.columns[y].type == 'hidden') {\r\n                    hidden.push(y);\r\n                    continue;\r\n                }\r\n                // Check column invisble\r\n                var className = 'ui-widget-content';\r\n                if (settings.columns[y].invisible) className += ' invisible';\r\n                // Insert cell\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                tbCell.className = className;\r\n                if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                // Prepare control id and name\r\n                var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                if ($.isFunction(settings.nameFormatter)) {\r\n                    ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                } else {\r\n                    ctrlName = ctrlId;\r\n                }\r\n                // Check control type\r\n                ctrl = null;\r\n                if (settings.columns[y].type == 'custom') {\r\n                    if ($.isFunction(settings.columns[y].customBuilder)) {\r\n                        ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    }\r\n                } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                    ctrl = document.createElement('select');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    // Build option list\r\n                    if ($.isArray(settings.columns[y].ctrlOptions)) {\r\n                        // For array type option list\r\n                        if (settings.columns[y].ctrlOptions.length > 0) {\r\n                            if ($.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                // Check to generate optGroup or not\r\n                                var lastGroupName = null, lastGroupElem = null;\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                        if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                            lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                            lastGroupElem = document.createElement('optgroup');\r\n                                            lastGroupElem.label = lastGroupName;\r\n                                            ctrl.appendChild(lastGroupElem);\r\n                                        }\r\n                                    } else {\r\n                                        lastGroupElem = null;\r\n                                    }\r\n                                    var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                        option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                    }\r\n                                    if (null == lastGroupElem) {\r\n                                        option.appendTo(ctrl);\r\n                                    }\r\n                                    else {\r\n                                        option.appendTo(lastGroupElem);\r\n                                    }\r\n                                    // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if ($.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                        // For plain object type option list\r\n                        for (var x in settings.columns[y].ctrlOptions) {\r\n                            ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                        }\r\n                    } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                        // For string type option list\r\n                        var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                        for (var x = 0; x < arrayOpt.length; x++) {\r\n                            var eqIndex = arrayOpt[x].indexOf(':');\r\n                            if (-1 == eqIndex) {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                            } else {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                            }\r\n                        }\r\n                    } else if ($.isFunction(settings.columns[y].ctrlOptions)) {\r\n                        settings.columns[y].ctrlOptions(ctrl);\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-selectmenu') {\r\n                        $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                else if (settings.columns[y].type == 'checkbox') {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'checkbox';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    ctrl.value = 1;\r\n                    tbCell.appendChild(ctrl);\r\n                    tbCell.style.textAlign = 'center';\r\n                }\r\n                else if (settings.columns[y].type == 'textarea') {\r\n                    ctrl = document.createElement('textarea');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                    ctrl = document.createElement('input');\r\n                    try {\r\n                        ctrl.type = settings.columns[y].type;\r\n                    }\r\n                    catch (err) { /* Not supported type */ }\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else {\r\n                    // Generate text input\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'text';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-datepicker') {\r\n                        $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-spinner') {\r\n                        $(ctrl).spinner(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                        $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                // Add extra control properties\r\n                if (settings.columns[y].type != 'custom') {\r\n                    // Add control attributes as needed\r\n                    if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                    // Add control properties as needed\r\n                    if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                    // Add control CSS as needed\r\n                    if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                    // Add control class as needed\r\n                    if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                    // Add jQuery UI tooltip as needed\r\n                    if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                    // Add control events as needed\r\n                    if ($.isFunction(settings.columns[y].onClick)) {\r\n                        $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                    if ($.isFunction(settings.columns[y].onChange)) {\r\n                        $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                }\r\n                if (loadData) {\r\n                    // Load data if needed\r\n                    setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                } else if (!isEmpty(settings.columns[y].value)) {\r\n                    // Set default value\r\n                    setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                }\r\n            }\r\n            // Add button cell if needed\r\n            if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                if (!settings.rowButtonsInFront) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                } else if (!settings.hideRowNumColumn) {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                } else {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                }\r\n                tbCell.className = 'ui-widget-content last';\r\n                tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                // Add standard buttons\r\n                if (!settings.hideButtons.insert) {\r\n                    var button = createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('insertRow', 1, null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                }\r\n                if (!settings.hideButtons.remove) {\r\n                    var button = createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                        .click(function (evt) {\r\n                            var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                            removeRow(tbWhole, null, rowUniqueIndex, false);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                }\r\n                if (!settings.hideButtons.moveUp) {\r\n                    var button = createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveUpRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                }\r\n                if (!settings.hideButtons.moveDown) {\r\n                    var button = createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveDownRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                }\r\n                // Handle row dragging\r\n                if (settings.rowDragging) {\r\n                    var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                        .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                        .appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                }\r\n                // Add hidden\r\n                for (var y = 0; y < hidden.length; y++) {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                    if ($.isFunction(settings.nameFormatter)) {\r\n                        ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrl.name = ctrl.id;\r\n                    }\r\n                    ctrl.type = 'hidden';\r\n\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                    } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                        // Set default value\r\n                        ctrl.value = settings.columns[hidden[y]].value;\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                // Add extra buttons\r\n                if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Create sub panel\r\n            if (settings.useSubPanel) {\r\n                tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.className = 'ui-widget-content';\r\n                tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                if ($.isFunction(settings.subPanelBuilder)) {\r\n                    settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                }\r\n            }\r\n        }\r\n        // Check if re-calculate column width is required\r\n        if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n            var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n            if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                calColWidth = true;\r\n                settings._calculateWidth = false;\r\n            }\r\n        }\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Calculate column width\r\n        if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n            calculateColumnWidth(document.getElementById(settings._wrapperId));\r\n        }\r\n        // Trigger events\r\n        if ($.isNumeric(rowIndex)) {\r\n            if ($.isFunction(settings.afterRowInserted)) {\r\n                settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        else {\r\n            if ($.isFunction(settings.afterRowAppended)) {\r\n                settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        if (reachMaxRow && $.isFunction(settings.maxNumRowsReached)) {\r\n            settings.maxNumRowsReached();\r\n        }\r\n        // Scroll the page when append row\r\n        if (settings.maintainScroll && !$.isNumeric(rowIndex)) {\r\n            // Try to maintain the height so that user no need to scroll every time when row added\r\n            var newHeight = $(tbWhole).height();\r\n            $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n        }\r\n        // Return added rows' uniqueIndex\r\n        return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n    }\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).appendGrid('getRowValue', null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function removeRow(tbWhole, rowIndex, uniqueIndex, force) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        if ($.isNumeric(uniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    rowIndex = z;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if ($.isNumeric(rowIndex)) {\r\n            // Remove middle row\r\n            if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 1);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Sort sequence\r\n                sortSequence(tbWhole, rowIndex);\r\n                // Trigger event\r\n                if ($.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, rowIndex);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Store old window scroll value\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maintainScroll) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove last row\r\n            if (force || !$.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                uniqueIndex = settings._rowOrder.pop();\r\n                tbBody.removeChild(tbBody.lastChild);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Trigger event\r\n                if ($.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, null);\r\n                }\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n        }\r\n        // Add empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n        }\r\n    }\r\n    function showEmptyMessage(tbWrap, settings, skipWidthCalculation) {\r\n        var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n        $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n        if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n            // Check scrolling enabled\r\n            if (settings.autoColumnWidth) {\r\n                calculateColumnWidth(tbWrap);\r\n            } else {\r\n                // Set the width of empty message cell to the thead width\r\n                $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n            }\r\n        }\r\n    }\r\n    function emptyGrid(tbWhole) {\r\n        // Load settings\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Remove rows\r\n        $('tbody', tbWhole).empty();\r\n        settings._rowOrder.length = 0;\r\n        settings._uniqueIndex = 0;\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Add empty row\r\n        showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n    }\r\n    function sortSequence(tbWhole, startIndex) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (!settings.hideRowNumColumn) {\r\n            for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n            }\r\n        }\r\n    }\r\n    function loadData(tbWhole, records, isInit) {\r\n        var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (settings) {\r\n            // Clear existing content\r\n            tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            $(tbBody).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Check any records\r\n            if (records != null && records.length) {\r\n                // Add rows\r\n                insertResult = insertRow(tbWhole, records.length, null, null);\r\n                // Set data\r\n                for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                    for (var c = 0; c < settings.columns.length; c++) {\r\n                        setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                    }\r\n                    if ($.isFunction(settings.rowDataLoaded)) {\r\n                        settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                    }\r\n                }\r\n            }\r\n            // Save setting\r\n            settings._isDataLoaded = true;\r\n            if (isInit) settings.initData = null;\r\n            $(tbWhole).data('appendGrid', settings);\r\n            // Trigger data loaded event\r\n            if ($.isFunction(settings.dataLoaded)) {\r\n                settings.dataLoaded(tbWhole, records);\r\n            }\r\n        }\r\n    }\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && $.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function saveSetting(tbWhole, settings) {\r\n        $(tbWhole).data('appendGrid', settings);\r\n        $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && $.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if ($.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    $.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    $.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if ($.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if ($.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n    function gridRowDragged(tbWhole, isMoveUp, uniqueIndex, tbRowIndex) {\r\n        // Get setting\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Find the start sorting index\r\n        var startIndex = -1;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                if (isMoveUp) {\r\n                    startIndex = tbRowIndex;\r\n                    settings._rowOrder.splice(z, 1);\r\n                    settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                } else {\r\n                    startIndex = z;\r\n                    settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                    settings._rowOrder.splice(z, 1);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Do re-order\r\n        sortSequence(tbWhole, startIndex);\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n\r\n        // Trigger event\r\n        if ($.isFunction(settings.afterRowDragged)) {\r\n            settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n        }\r\n    }\r\n    function createGridButton(param, uiIcon) {\r\n        // Generate the standard grid action button based on its parameter.\r\n        var genButton = null;\r\n        if (param) {\r\n            if ($.isFunction(param)) {\r\n                // Generate button if it is a function.\r\n                genButton = $(param());\r\n            } else if (param.nodeType) {\r\n                // Clone the button if it is a DOM element.\r\n                genButton = $(param).clone();\r\n            } else if (param.icon || param.label) {\r\n                // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                genButton = $('<button/>').attr({ type: 'button' }).button(param);\r\n            }\r\n        }\r\n        if (!genButton) {\r\n            // Use default setting (jQuery UI Button) if button is not created.\r\n            genButton = $('<button/>').attr({ type: 'button' }).button({ icon: uiIcon, showLabel: false });\r\n        }\r\n        return genButton;\r\n    }\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if ($.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function calculateColumnWidth(tbWrap) {\r\n        var $tbWhole = $('table.body', tbWrap);\r\n        var $scroller = $('div.scroller', tbWrap);\r\n        var settings = $tbWhole.data('appendGrid');\r\n        var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n        var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n        // Check any rows within the grid\r\n        if (settings._rowOrder.length > 0) {\r\n            // Reset the table/column width\r\n            $('td', tbHeadRow).width('auto');\r\n            $('col', tbColGp).width('auto');\r\n            $tbWhole.width('auto');\r\n            $scroller.width('auto');\r\n            // Check the total number of columns\r\n            var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n            var marginThreshold = -2;\r\n            if ($.fn.modal) {\r\n                // If bootstrap is loaded, cell margin was reset\r\n                marginThreshold = 1;\r\n            }\r\n            var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n            for (var z = 0; z < colLimit; z++) {\r\n                var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                if (bodyCellWidth > headCellWidth) {\r\n                    tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                } else {\r\n                    tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                }\r\n            }\r\n        } else {\r\n            $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n        }\r\n        // Set the width of footer row\r\n        $('table.foot', tbWrap).width($tbWhole.width());\r\n        // Check the scroll panel width\r\n        $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n    }\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n});\r\n"]}
{"version":3,"sources":["Checkbox.js"],"names":["define","langx","browser","eventer","noder","geom","$","ui","_Toggler","Checkbox","inherit","klassName","pluginName","_parse","$chk","this","checked","prop","disabled","state","set","_init","element","domNode","$element","tagName","toLowerCase","logError","$label","find","$container","parent","options","ignoreVisibilityCheck","css","match","containerSelector","attr","$toggleContainer","setInitialState","_sync","self","on","evt","_refresh","updates","setCheckedState","$lbl","$containerToggle","addClass","removeClass","setDisabledState","overrided","changed","value"],"mappings":";;;;;;;AAAAA,QACE,sBACA,4BACA,4BACA,0BACA,yBACA,0BACA,OACA,cACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAGC,GAE/C,GAAIC,GAAWF,EAAGE,SAAWD,EAASE,SACpCC,UAAW,WAEXC,WAAa,gBAEbC,OAAS,WACP,GAAIC,GAAOC,KAAKD,KAGZE,EAAUF,EAAKG,KAAK,WACpBC,EAAWJ,EAAKG,KAAK,WAEzBF,MAAKI,MAAMC,IAAI,UAAUJ,GACzBD,KAAKI,MAAMC,IAAgBF,IAI7BG,MAAQ,WAEN,GAAIC,GAAUP,KAAKQ,QACfC,EAAWlB,EAAEgB,EAEjB,IAAsC,UAAlCA,EAAQG,QAAQC,cAElB,WADAC,UAAS,uPAKXZ,MAAKa,OAASJ,EACdT,KAAKD,KAAOC,KAAKa,OAAOC,KAAK,0BAC7Bd,KAAKe,WAAaN,EAASO,OAAO,cAE7BhB,KAAKiB,QAAQC,uBAAyBlB,KAAKD,KAAKoB,IAAI,cAAcC,MAAM,oBAC3ER,SAAS,sOAIX,IAAIS,GAAoBrB,KAAKD,KAAKuB,KAAK,cACvCtB,MAAKuB,iBAAmBhC,EAAE8B,GAI1BrB,KAAKwB,mBAGPC,MAAQ,WAEN,GAAIC,GAAO1B,IACXA,MAAKD,KAAK4B,GAAG,SAAU,SAASC,GAE9B,GAAI3B,GAAUyB,EAAK3B,KAAKG,KAAK,UAC7BwB,GAAKtB,MAAMC,IAAI,UAAUJ,MAI7B4B,SAAW,SAASC,GAEhB,QAASC,GAAiB9B,GACxB,GAAIF,GAAO2B,EAAK3B,KACZiC,EAAON,EAAKb,OACZoB,EAAmBP,EAAKH,gBAExBtB,IACFF,EAAKG,KAAK,WAAW,GACrB8B,EAAKE,SAAS,WACdD,EAAiBE,YAAY,iBAE7BpC,EAAKG,KAAK,WAAW,GACrB8B,EAAKG,YAAY,WACjBF,EAAiBC,SAAS,WAI9B,QAASE,GAAkBjC,GACzB,GAAIJ,GAAO2B,EAAK3B,KACZiC,EAAON,EAAKb,MAEZV,IACFJ,EAAKG,KAAK,YAAY,GACtB8B,EAAKE,SAAS,cAEdnC,EAAKG,KAAK,YAAY,GACtB8B,EAAKG,YAAY,aAKrBnC,KAAKqC,UAAUC,QACf,IAAIZ,GAAQ1B,IAER8B,GAAiB,SACnBC,EAAgBD,EAAiB,QAAES,OAEjCT,EAAkB,UACpBM,EAAiBN,EAAkB,SAAES,SAK9C,OAAO7C","file":"../Checkbox.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./ui\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,ui,_Toggler){\r\n\r\n  var Checkbox = ui.Checkbox = _Toggler.inherit({\r\n    klassName: \"Checkbox\",\r\n\r\n    pluginName : \"lark.checkbox\",\r\n\r\n    _parse : function() {\r\n      var $chk = this.$chk;\r\n\r\n      // get current state of input\r\n      var checked = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n\r\n      this.state.set(\"checked\",checked);\r\n      this.state.set((\"disabled\",disabled));\r\n\r\n    },\r\n\r\n    _init : function() {\r\n      //this.options = langx.mixin({}, $.fn.checkbox.defaults, options);\r\n      var element = this.domNode;\r\n      var $element = $(element);\r\n\r\n      if (element.tagName.toLowerCase() !== 'label') {\r\n        logError('Checkbox must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$chk = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$chk.css('visibility').match(/hidden|collapse/)) {\r\n        logError('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$chk.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    _sync : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$chk.on('change', function(evt) {\r\n        //var $chk = $(evt.target);\r\n        var checked = self.$chk.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            $chk.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $chk.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $chk.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $chk.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    }\r\n  });\r\n\r\n\treturn Checkbox;\r\n});\r\n"]}
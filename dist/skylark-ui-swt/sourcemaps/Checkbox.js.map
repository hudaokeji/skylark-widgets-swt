{"version":3,"sources":["Checkbox.js"],"names":["define","langx","browser","eventer","noder","geom","$","ui","_Toggler","Checkbox","inherit","klassName","pluginName","options","selectors","chk","lbl","template","undefined","checked","label","value","_parse","elm","this","overrided","$el","chkSelector","lblSelector","$chk","find","prop","disabled","_create","_init","_elm","$lbl","_velm","_attach","self","on","evt","state","set","_refresh","updates","setCheckedState","$label","$containerToggle","$toggleContainer","addClass","removeClass","setDisabledState","changed"],"mappings":";;;;;;;AAAAA,QACE,sBACA,4BACA,4BACA,0BACA,yBACA,0BACA,OACA,cACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAGC,GAE/C,GAAIC,GAAYD,EAASE,SACvBC,UAAW,WAEXC,WAAa,gBAEbC,SACEC,WACEC,IAAM,uBACNC,IAAM,kBAERC,SAAWC,OACXC,QAAUD,OACVE,MAAQF,OACRG,MAAQH,QAGVI,OAAS,SAASC,EAAIV,GACpBA,EAAUW,KAAKC,UAAUF,EAAIV,EAC7B,IAAIa,GAAMpB,EAAEiB,GACRI,EAAcd,EAAQC,WAAaD,EAAQC,UAAUC,IACrDa,EAAcf,EAAQC,WAAaD,EAAQC,UAAUE,GAEpDW,KACHA,EAAcH,KAAKX,QAAQC,UAAUC,KAElCa,IACHA,EAAcJ,KAAKX,QAAQC,UAAUE,IAGvC,IAAIa,GAAOH,EAAII,KAAKH,EACTD,GAAII,KAAKF,EAcpB,OAZuBV,SAAnBL,EAAQM,QACVN,EAAQM,QAAUU,EAAKE,KAAK,WAE5BF,EAAKE,KAAK,UAAUlB,EAAQM,SAGND,QAApBL,EAAQmB,SACVnB,EAAQmB,SAAWH,EAAKE,KAAK,YAE7BF,EAAKE,KAAK,WAAWlB,EAAQmB,UAGxBnB,GAGToB,QAAU,aAIVC,MAAQ,WACIV,KAAKW,IAGfX,MAAKY,KAAOZ,KAAKa,MAAM/B,EAAEkB,KAAKX,QAAQC,UAAUE,KAChDQ,KAAKK,KAAOL,KAAKa,MAAM/B,EAAEkB,KAAKX,QAAQC,UAAUC,MAGlDuB,QAAU,WAER,GAAIC,GAAOf,IACXA,MAAKK,KAAKW,GAAG,SAAU,SAASC,GAE9B,GAAItB,GAAUoB,EAAKV,KAAKE,KAAK,UAC7BQ,GAAKG,MAAMC,IAAI,UAAUxB,MAI7ByB,SAAW,SAASC,GAEhB,QAASC,GAAiB3B,GACxB,GAAIU,GAAOU,EAAKV,KACZO,EAAOG,EAAKQ,OACZC,EAAmBT,EAAKU,gBAExB9B,IACFU,EAAKE,KAAK,WAAW,GACrBK,EAAKc,SAAS,WACdF,EAAiBG,YAAY,iBAE7BtB,EAAKE,KAAK,WAAW,GACrBK,EAAKe,YAAY,WACjBH,EAAiBE,SAAS,WAI9B,QAASE,GAAkBpB,GACzB,GAAIH,GAAOU,EAAKV,KACZO,EAAOG,EAAKQ,MAEZf,IACFH,EAAKE,KAAK,YAAY,GACtBK,EAAKc,SAAS,cAEdrB,EAAKE,KAAK,YAAY,GACtBK,EAAKe,YAAY,aAKrB3B,KAAKC,UAAU4B,QACf,IAAId,GAAQf,IAERqB,GAAiB,SACnBC,EAAgBD,EAAiB,QAAExB,OAEjCwB,EAAkB,UACpBO,EAAiBP,EAAkB,SAAExB,SAK9C,OAAOd,GAAGE,SAAWA","file":"../Checkbox.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./ui\",\r\n  \"./_Toggler\"\r\n],function(langx,browser,eventer,noder,geom,$,ui,_Toggler){\r\n\r\n  var Checkbox =  _Toggler.inherit({\r\n    klassName: \"Checkbox\",\r\n\r\n    pluginName : \"lark.checkbox\",\r\n\r\n    options : {\r\n      selectors : {\r\n        chk : \"input[type=checkbox]\",\r\n        lbl : \"checkbox-label\"\r\n      },\r\n      template : undefined,\r\n      checked : undefined,\r\n      label : undefined,\r\n      value : undefined\r\n    },\r\n\r\n    _parse : function(elm,options) {\r\n      options = this.overrided(elm,options);\r\n      var $el = $(elm),\r\n          chkSelector = options.selectors && options.selectors.chk,\r\n          lblSelector = options.selectors && options.selectors.lbl;\r\n\r\n      if (!chkSelector) {\r\n        chkSelector = this.options.selectors.chk;\r\n      }\r\n      if (!lblSelector) {\r\n        lblSelector = this.options.selectors.lbl;\r\n      }\r\n\r\n      var $chk = $el.find(chkSelector),\r\n          $lbl = $el.find(lblSelector);\r\n\r\n      if (options.checked == undefined) {\r\n        options.checked = $chk.prop('checked')\r\n      } else {\r\n        $chk.prop('checked',options.checked);\r\n      }\r\n\r\n      if (options.disabled == undefined) {\r\n        options.disabled = $chk.prop('disabled')\r\n      } else {\r\n        $chk.prop('disabled',options.disabled);\r\n      }\r\n\r\n      return options;\r\n    },\r\n\r\n    _create : function() {\r\n      //TODO\r\n    },\r\n\r\n    _init : function() {\r\n      var elm = this._elm;\r\n\r\n      // cache elements\r\n      this.$lbl = this._velm.$(this.options.selectors.lbl);\r\n      this.$chk = this._velm.$(this.options.selectors.chk);\r\n    },\r\n\r\n    _attach : function() {\r\n      // handle internal events\r\n      var self = this;\r\n      this.$chk.on('change', function(evt) {\r\n        //var $chk = $(evt.target);\r\n        var checked = self.$chk.prop('checked');\r\n        self.state.set(\"checked\",checked);\r\n      });\r\n    },\r\n\r\n    _refresh : function(updates) {\r\n\r\n        function setCheckedState (checked) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n          var $containerToggle = self.$toggleContainer;\r\n\r\n          if (checked) {\r\n            $chk.prop('checked', true);\r\n            $lbl.addClass('checked');\r\n            $containerToggle.removeClass('hide hidden');\r\n          } else {\r\n            $chk.prop('checked', false);\r\n            $lbl.removeClass('checked');\r\n            $containerToggle.addClass('hidden');\r\n          }\r\n        }\r\n\r\n        function setDisabledState (disabled) {\r\n          var $chk = self.$chk;\r\n          var $lbl = self.$label;\r\n\r\n          if (disabled) {\r\n            $chk.prop('disabled', true);\r\n            $lbl.addClass('disabled');\r\n          } else {\r\n            $chk.prop('disabled', false);\r\n            $lbl.removeClass('disabled');\r\n          }\r\n        }\r\n\r\n        // update visual with attribute values from control\r\n        this.overrided(changed);\r\n        var self  = this;\r\n\r\n        if (updates[\"checked\"]) {\r\n          setCheckedState(updates[\"checked\"].value);\r\n        }\r\n        if (updates[\"disabled\"]) {\r\n          setDisabledState(updates[\"disabled\"].value);\r\n        }\r\n    }\r\n  });\r\n\r\n\treturn ui.Checkbox = Checkbox;\r\n});\r\n"]}